// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cstrike15_gcmessages.proto

/*
	Package cstrike15_gcmessages is a generated protocol buffer package.

	It is generated from these files:
		cstrike15_gcmessages.proto

	It has these top-level messages:
		GameServerPing
		DetailedSearchStatistic
		TournamentPlayer
		TournamentTeam
		TournamentEvent
		GlobalStatistics
		OperationalStatisticDescription
		OperationalStatisticElement
		OperationalStatisticsPacket
		PlayerRankingInfo
		PlayerCommendationInfo
		PlayerMedalsInfo
		AccountActivity
		TournamentMatchSetup
		ServerHltvInfo
		IpAddressMask
		XpProgressData
		MatchEndItemUpdates
		ScoreLeaderboardData
		PlayerQuestData
		CMsgGC_ServerQuestUpdateData
		CMsgGCCStrike15V2_MatchmakingGCOperationalStats
		CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm
		CMsgGCCStrike15V2_GC2ServerReservationUpdate
		CMsgGCCStrike15V2_MatchmakingStart
		CMsgGCCStrike15V2_MatchmakingStop
		CMsgGCCStrike15V2_MatchmakingClient2ServerPing
		CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate
		CDataGCCStrike15V2_TournamentMatchDraft
		CPreMatchInfoData
		CMsgGCCStrike15V2_MatchmakingGC2ServerReserve
		CMsgGCCStrike15V2_MatchmakingServerReservationResponse
		CMsgGCCStrike15V2_MatchmakingGC2ClientReserve
		CMsgGCCStrike15V2_MatchmakingServerRoundStats
		CMsgGCCStrike15V2_MatchmakingServerMatchEnd
		CMsgGCCStrike15V2_MatchmakingClient2GCHello
		CMsgGCCStrike15V2_MatchmakingGC2ClientHello
		CMsgGCCStrike15V2_AccountPrivacySettings
		CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon
		CMsgGCCStrike15V2_MatchmakingServer2GCKick
		CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate
		CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate
		CMsgGCCStrike15V2_ServerNotificationForUserPenalty
		CMsgGCCStrike15V2_ClientReportPlayer
		CMsgGCCStrike15V2_ClientCommendPlayer
		CMsgGCCStrike15V2_ClientReportServer
		CMsgGCCStrike15V2_ClientReportResponse
		CMsgGCCStrike15V2_ClientRequestWatchInfoFriends
		WatchableMatchInfo
		CMsgGCCStrike15V2_ClientRequestJoinFriendData
		CMsgGCCStrike15V2_ClientRequestJoinServerData
		CMsgGCCstrike15V2_ClientRequestNewMission
		CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded
		CMsgGCCStrike15V2_WatchInfoUsers
		CMsgGCCStrike15V2_ClientRequestPlayersProfile
		CMsgGCCStrike15V2_PlayersProfile
		CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate
		CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment
		CMsgGCCStrike15V2_PlayerOverwatchCaseStatus
		CClientHeaderOverwatchEvidence
		CMsgGCCStrike15V2_GC2ClientTextMsg
		CMsgGCCStrike15V2_Client2GCTextMsg
		CMsgGCCStrike15V2_MatchEndRunRewardDrops
		CEconItemPreviewDataBlock
		CMsgGCCStrike15V2_MatchEndRewardDropsNotification
		CMsgItemAcknowledged
		CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest
		CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse
		CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification
		CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames
		CMsgGCCStrike15V2_MatchListRequestLiveGameForUser
		CMsgGCCStrike15V2_MatchListRequestRecentUserGames
		CMsgGCCStrike15V2_MatchListRequestTournamentGames
		CMsgGCCStrike15V2_MatchListRequestFullGameInfo
		CDataGCCStrike15V2_MatchInfo
		CDataGCCStrike15V2_TournamentGroupTeam
		CDataGCCStrike15V2_TournamentGroup
		CDataGCCStrike15V2_TournamentSection
		CDataGCCStrike15V2_TournamentInfo
		CMsgGCCStrike15V2_MatchList
		CMsgGCCStrike15V2_Predictions
		CMsgGCCStrike15V2_Fantasy
		CAttribute_String
		CMsgGCToGCReloadVersions
		CMsgCStrike15Welcome
		CMsgGCCStrike15V2_ClientVarValueNotificationInfo
		CMsgGCCStrike15V2_ServerVarValueNotificationInfo
		CMsgGCCStrike15V2_GiftsLeaderboardRequest
		CMsgGCCStrike15V2_GiftsLeaderboardResponse
		CMsgGCCStrike15V2_ClientSubmitSurveyVote
		CMsgGCCStrike15V2_Server2GCClientValidate
		CMsgGCCStrike15V2_Server2GCPureServerValidationFailure
		CMsgGCCStrike15V2_GC2ClientTournamentInfo
		CSOEconCoupon
		CSOQuestProgress
		CSOPersonaDataPublic
		CMsgGC_GlobalGame_Subscribe
		CMsgGC_GlobalGame_Unsubscribe
		CMsgGC_GlobalGame_Play
		CMsgGCCStrike15V2_AcknowledgePenalty
		CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin
		CMsgGCCStrike15V2_Client2GCStreamUnlock
		CMsgGCCStrike15V2_ClientToGCRequestElevate
		CMsgGCCStrike15V2_ClientToGCChat
		CMsgGCCStrike15V2_GCToClientChat
*/
package cstrike15_gcmessages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "."

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ECsgoGCMsg int32

const (
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Base                                   ECsgoGCMsg = 9100
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStart                       ECsgoGCMsg = 9101
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingStop                        ECsgoGCMsg = 9102
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing           ECsgoGCMsg = 9103
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate             ECsgoGCMsg = 9104
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve            ECsgoGCMsg = 9105
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse   ECsgoGCMsg = 9106
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve            ECsgoGCMsg = 9107
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats            ECsgoGCMsg = 9108
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello              ECsgoGCMsg = 9109
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello              ECsgoGCMsg = 9110
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd              ECsgoGCMsg = 9111
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon            ECsgoGCMsg = 9112
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick               ECsgoGCMsg = 9113
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm            ECsgoGCMsg = 9114
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats          ECsgoGCMsg = 9115
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate         ECsgoGCMsg = 9116
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate       ECsgoGCMsg = 9117
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty       ECsgoGCMsg = 9118
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportPlayer                     ECsgoGCMsg = 9119
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportServer                     ECsgoGCMsg = 9120
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayer                    ECsgoGCMsg = 9121
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientReportResponse                   ECsgoGCMsg = 9122
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery               ECsgoGCMsg = 9123
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse       ECsgoGCMsg = 9124
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_WatchInfoUsers                         ECsgoGCMsg = 9126
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile            ECsgoGCMsg = 9127
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayersProfile                         ECsgoGCMsg = 9128
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetMyMedalsInfo                        ECsgoGCMsg = 9129
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate              ECsgoGCMsg = 9131
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment          ECsgoGCMsg = 9132
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus              ECsgoGCMsg = 9133
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTextMsg                       ECsgoGCMsg = 9134
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCTextMsg                       ECsgoGCMsg = 9135
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops                 ECsgoGCMsg = 9136
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification        ECsgoGCMsg = 9137
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2         ECsgoGCMsg = 9138
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchList                              ECsgoGCMsg = 9139
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames       ECsgoGCMsg = 9140
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames        ECsgoGCMsg = 9141
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate             ECsgoGCMsg = 9142
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo         ECsgoGCMsg = 9144
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ECsgoGCMsg = 9145
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames        ECsgoGCMsg = 9146
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo           ECsgoGCMsg = 9147
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest                ECsgoGCMsg = 9148
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse               ECsgoGCMsg = 9149
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo         ECsgoGCMsg = 9150
	ECsgoGCMsg_k_EMsgGCToGCReloadVersions                                  ECsgoGCMsg = 9151
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote                 ECsgoGCMsg = 9152
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCClientValidate                ECsgoGCMsg = 9153
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser        ECsgoGCMsg = 9154
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure   ECsgoGCMsg = 9155
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest   ECsgoGCMsg = 9156
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse  ECsgoGCMsg = 9157
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AccountPrivacySettings                 ECsgoGCMsg = 9158
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_SetMyActivityInfo                      ECsgoGCMsg = 9159
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions  ECsgoGCMsg = 9160
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions   ECsgoGCMsg = 9161
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_DraftSummary                           ECsgoGCMsg = 9162
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData            ECsgoGCMsg = 9163
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestJoinServerData            ECsgoGCMsg = 9164
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientRequestNewMission                ECsgoGCMsg = 9165
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded              ECsgoGCMsg = 9166
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo                ECsgoGCMsg = 9167
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Subscribe                               ECsgoGCMsg = 9168
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Unsubscribe                             ECsgoGCMsg = 9169
	ECsgoGCMsg_k_EMsgGC_GlobalGame_Play                                    ECsgoGCMsg = 9170
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_AcknowledgePenalty                     ECsgoGCMsg = 9171
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin           ECsgoGCMsg = 9172
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GC2ClientGlobalStats                   ECsgoGCMsg = 9173
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_Client2GCStreamUnlock                  ECsgoGCMsg = 9174
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyRequestClientData               ECsgoGCMsg = 9175
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_FantasyUpdateClientData                ECsgoGCMsg = 9176
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket          ECsgoGCMsg = 9177
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestTicket                ECsgoGCMsg = 9178
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_ClientToGCRequestElevate               ECsgoGCMsg = 9179
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat                             ECsgoGCMsg = 9180
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Subscribe                   ECsgoGCMsg = 9181
	ECsgoGCMsg_k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe                 ECsgoGCMsg = 9182
)

var ECsgoGCMsg_name = map[int32]string{
	9100: "k_EMsgGCCStrike15_v2_Base",
	9101: "k_EMsgGCCStrike15_v2_MatchmakingStart",
	9102: "k_EMsgGCCStrike15_v2_MatchmakingStop",
	9103: "k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing",
	9104: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate",
	9105: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve",
	9106: "k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse",
	9107: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve",
	9108: "k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats",
	9109: "k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello",
	9110: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello",
	9111: "k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd",
	9112: "k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon",
	9113: "k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick",
	9114: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm",
	9115: "k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats",
	9116: "k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate",
	9117: "k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate",
	9118: "k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty",
	9119: "k_EMsgGCCStrike15_v2_ClientReportPlayer",
	9120: "k_EMsgGCCStrike15_v2_ClientReportServer",
	9121: "k_EMsgGCCStrike15_v2_ClientCommendPlayer",
	9122: "k_EMsgGCCStrike15_v2_ClientReportResponse",
	9123: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery",
	9124: "k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse",
	9126: "k_EMsgGCCStrike15_v2_WatchInfoUsers",
	9127: "k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile",
	9128: "k_EMsgGCCStrike15_v2_PlayersProfile",
	9129: "k_EMsgGCCStrike15_v2_SetMyMedalsInfo",
	9131: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate",
	9132: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment",
	9133: "k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus",
	9134: "k_EMsgGCCStrike15_v2_GC2ClientTextMsg",
	9135: "k_EMsgGCCStrike15_v2_Client2GCTextMsg",
	9136: "k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops",
	9137: "k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification",
	9138: "k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2",
	9139: "k_EMsgGCCStrike15_v2_MatchList",
	9140: "k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames",
	9141: "k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames",
	9142: "k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate",
	9144: "k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo",
	9145: "k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification",
	9146: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames",
	9147: "k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo",
	9148: "k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest",
	9149: "k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse",
	9150: "k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo",
	9151: "k_EMsgGCToGCReloadVersions",
	9152: "k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote",
	9153: "k_EMsgGCCStrike15_v2_Server2GCClientValidate",
	9154: "k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser",
	9155: "k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure",
	9156: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest",
	9157: "k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse",
	9158: "k_EMsgGCCStrike15_v2_AccountPrivacySettings",
	9159: "k_EMsgGCCStrike15_v2_SetMyActivityInfo",
	9160: "k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions",
	9161: "k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions",
	9162: "k_EMsgGCCStrike15_v2_DraftSummary",
	9163: "k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData",
	9164: "k_EMsgGCCStrike15_v2_ClientRequestJoinServerData",
	9165: "k_EMsgGCCStrike15_v2_ClientRequestNewMission",
	9166: "k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded",
	9167: "k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo",
	9168: "k_EMsgGC_GlobalGame_Subscribe",
	9169: "k_EMsgGC_GlobalGame_Unsubscribe",
	9170: "k_EMsgGC_GlobalGame_Play",
	9171: "k_EMsgGCCStrike15_v2_AcknowledgePenalty",
	9172: "k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin",
	9173: "k_EMsgGCCStrike15_v2_GC2ClientGlobalStats",
	9174: "k_EMsgGCCStrike15_v2_Client2GCStreamUnlock",
	9175: "k_EMsgGCCStrike15_v2_FantasyRequestClientData",
	9176: "k_EMsgGCCStrike15_v2_FantasyUpdateClientData",
	9177: "k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket",
	9178: "k_EMsgGCCStrike15_v2_ClientToGCRequestTicket",
	9179: "k_EMsgGCCStrike15_v2_ClientToGCRequestElevate",
	9180: "k_EMsgGCCStrike15_v2_GlobalChat",
	9181: "k_EMsgGCCStrike15_v2_GlobalChat_Subscribe",
	9182: "k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe",
}
var ECsgoGCMsg_value = map[string]int32{
	"k_EMsgGCCStrike15_v2_Base":                                   9100,
	"k_EMsgGCCStrike15_v2_MatchmakingStart":                       9101,
	"k_EMsgGCCStrike15_v2_MatchmakingStop":                        9102,
	"k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing":           9103,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate":             9104,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve":            9105,
	"k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse":   9106,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve":            9107,
	"k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats":            9108,
	"k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello":              9109,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello":              9110,
	"k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd":              9111,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon":            9112,
	"k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick":               9113,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm":            9114,
	"k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats":          9115,
	"k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate":         9116,
	"k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate":       9117,
	"k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty":       9118,
	"k_EMsgGCCStrike15_v2_ClientReportPlayer":                     9119,
	"k_EMsgGCCStrike15_v2_ClientReportServer":                     9120,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayer":                    9121,
	"k_EMsgGCCStrike15_v2_ClientReportResponse":                   9122,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery":               9123,
	"k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse":       9124,
	"k_EMsgGCCStrike15_v2_WatchInfoUsers":                         9126,
	"k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile":            9127,
	"k_EMsgGCCStrike15_v2_PlayersProfile":                         9128,
	"k_EMsgGCCStrike15_v2_SetMyMedalsInfo":                        9129,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate":              9131,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment":          9132,
	"k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus":              9133,
	"k_EMsgGCCStrike15_v2_GC2ClientTextMsg":                       9134,
	"k_EMsgGCCStrike15_v2_Client2GCTextMsg":                       9135,
	"k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops":                 9136,
	"k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification":        9137,
	"k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2":         9138,
	"k_EMsgGCCStrike15_v2_MatchList":                              9139,
	"k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames":       9140,
	"k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames":        9141,
	"k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate":             9142,
	"k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo":         9144,
	"k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification": 9145,
	"k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames":        9146,
	"k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo":           9147,
	"k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest":                9148,
	"k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse":               9149,
	"k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo":         9150,
	"k_EMsgGCToGCReloadVersions":                                  9151,
	"k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote":                 9152,
	"k_EMsgGCCStrike15_v2_Server2GCClientValidate":                9153,
	"k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser":        9154,
	"k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure":   9155,
	"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest":   9156,
	"k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse":  9157,
	"k_EMsgGCCStrike15_v2_AccountPrivacySettings":                 9158,
	"k_EMsgGCCStrike15_v2_SetMyActivityInfo":                      9159,
	"k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions":  9160,
	"k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions":   9161,
	"k_EMsgGCCStrike15_v2_DraftSummary":                           9162,
	"k_EMsgGCCStrike15_v2_ClientRequestJoinFriendData":            9163,
	"k_EMsgGCCStrike15_v2_ClientRequestJoinServerData":            9164,
	"k_EMsgGCCStrike15_v2_ClientRequestNewMission":                9165,
	"k_EMsgGCCStrike15_v2_GC2ServerNotifyXPRewarded":              9166,
	"k_EMsgGCCStrike15_v2_GC2ClientTournamentInfo":                9167,
	"k_EMsgGC_GlobalGame_Subscribe":                               9168,
	"k_EMsgGC_GlobalGame_Unsubscribe":                             9169,
	"k_EMsgGC_GlobalGame_Play":                                    9170,
	"k_EMsgGCCStrike15_v2_AcknowledgePenalty":                     9171,
	"k_EMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin":           9172,
	"k_EMsgGCCStrike15_v2_GC2ClientGlobalStats":                   9173,
	"k_EMsgGCCStrike15_v2_Client2GCStreamUnlock":                  9174,
	"k_EMsgGCCStrike15_v2_FantasyRequestClientData":               9175,
	"k_EMsgGCCStrike15_v2_FantasyUpdateClientData":                9176,
	"k_EMsgGCCStrike15_v2_GCToClientSteamdatagramTicket":          9177,
	"k_EMsgGCCStrike15_v2_ClientToGCRequestTicket":                9178,
	"k_EMsgGCCStrike15_v2_ClientToGCRequestElevate":               9179,
	"k_EMsgGCCStrike15_v2_GlobalChat":                             9180,
	"k_EMsgGCCStrike15_v2_GlobalChat_Subscribe":                   9181,
	"k_EMsgGCCStrike15_v2_GlobalChat_Unsubscribe":                 9182,
}

func (x ECsgoGCMsg) Enum() *ECsgoGCMsg {
	p := new(ECsgoGCMsg)
	*p = x
	return p
}
func (x ECsgoGCMsg) String() string {
	return proto.EnumName(ECsgoGCMsg_name, int32(x))
}
func (x *ECsgoGCMsg) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ECsgoGCMsg_value, data, "ECsgoGCMsg")
	if err != nil {
		return err
	}
	*x = ECsgoGCMsg(value)
	return nil
}
func (ECsgoGCMsg) EnumDescriptor() ([]byte, []int) { return fileDescriptorCstrike15Gcmessages, []int{0} }

type GameServerPing struct {
	GameserverId uint64 `protobuf:"varint,1,opt,name=gameserver_id,json=gameserverId" json:"gameserver_id"`
	Ping         int32  `protobuf:"varint,2,opt,name=ping" json:"ping"`
	Ip           uint32 `protobuf:"varint,3,opt,name=ip" json:"ip"`
	Port         uint32 `protobuf:"varint,4,opt,name=port" json:"port"`
	Instances    uint32 `protobuf:"varint,5,opt,name=instances" json:"instances"`
}

func (m *GameServerPing) Reset()         { *m = GameServerPing{} }
func (m *GameServerPing) String() string { return proto.CompactTextString(m) }
func (*GameServerPing) ProtoMessage()    {}
func (*GameServerPing) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{0}
}

func (m *GameServerPing) GetGameserverId() uint64 {
	if m != nil {
		return m.GameserverId
	}
	return 0
}

func (m *GameServerPing) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

func (m *GameServerPing) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *GameServerPing) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *GameServerPing) GetInstances() uint32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

type DetailedSearchStatistic struct {
	GameType         uint32 `protobuf:"varint,1,opt,name=game_type,json=gameType" json:"game_type"`
	SearchTimeAvg    uint32 `protobuf:"varint,2,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg"`
	PlayersSearching uint32 `protobuf:"varint,4,opt,name=players_searching,json=playersSearching" json:"players_searching"`
}

func (m *DetailedSearchStatistic) Reset()         { *m = DetailedSearchStatistic{} }
func (m *DetailedSearchStatistic) String() string { return proto.CompactTextString(m) }
func (*DetailedSearchStatistic) ProtoMessage()    {}
func (*DetailedSearchStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{1}
}

func (m *DetailedSearchStatistic) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *DetailedSearchStatistic) GetSearchTimeAvg() uint32 {
	if m != nil {
		return m.SearchTimeAvg
	}
	return 0
}

func (m *DetailedSearchStatistic) GetPlayersSearching() uint32 {
	if m != nil {
		return m.PlayersSearching
	}
	return 0
}

type TournamentPlayer struct {
	AccountId      uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	PlayerNick     string `protobuf:"bytes,2,opt,name=player_nick,json=playerNick" json:"player_nick"`
	PlayerName     string `protobuf:"bytes,3,opt,name=player_name,json=playerName" json:"player_name"`
	PlayerDob      uint32 `protobuf:"varint,4,opt,name=player_dob,json=playerDob" json:"player_dob"`
	PlayerFlag     string `protobuf:"bytes,5,opt,name=player_flag,json=playerFlag" json:"player_flag"`
	PlayerLocation string `protobuf:"bytes,6,opt,name=player_location,json=playerLocation" json:"player_location"`
	PlayerDesc     string `protobuf:"bytes,7,opt,name=player_desc,json=playerDesc" json:"player_desc"`
}

func (m *TournamentPlayer) Reset()         { *m = TournamentPlayer{} }
func (m *TournamentPlayer) String() string { return proto.CompactTextString(m) }
func (*TournamentPlayer) ProtoMessage()    {}
func (*TournamentPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{2}
}

func (m *TournamentPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *TournamentPlayer) GetPlayerNick() string {
	if m != nil {
		return m.PlayerNick
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerDob() uint32 {
	if m != nil {
		return m.PlayerDob
	}
	return 0
}

func (m *TournamentPlayer) GetPlayerFlag() string {
	if m != nil {
		return m.PlayerFlag
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerLocation() string {
	if m != nil {
		return m.PlayerLocation
	}
	return ""
}

func (m *TournamentPlayer) GetPlayerDesc() string {
	if m != nil {
		return m.PlayerDesc
	}
	return ""
}

type TournamentTeam struct {
	TeamId   int32               `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id"`
	TeamTag  string              `protobuf:"bytes,2,opt,name=team_tag,json=teamTag" json:"team_tag"`
	TeamFlag string              `protobuf:"bytes,3,opt,name=team_flag,json=teamFlag" json:"team_flag"`
	TeamName string              `protobuf:"bytes,4,opt,name=team_name,json=teamName" json:"team_name"`
	Players  []*TournamentPlayer `protobuf:"bytes,5,rep,name=players" json:"players,omitempty"`
}

func (m *TournamentTeam) Reset()         { *m = TournamentTeam{} }
func (m *TournamentTeam) String() string { return proto.CompactTextString(m) }
func (*TournamentTeam) ProtoMessage()    {}
func (*TournamentTeam) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{3}
}

func (m *TournamentTeam) GetTeamId() int32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *TournamentTeam) GetTeamTag() string {
	if m != nil {
		return m.TeamTag
	}
	return ""
}

func (m *TournamentTeam) GetTeamFlag() string {
	if m != nil {
		return m.TeamFlag
	}
	return ""
}

func (m *TournamentTeam) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *TournamentTeam) GetPlayers() []*TournamentPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

type TournamentEvent struct {
	EventId         int32  `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	EventTag        string `protobuf:"bytes,2,opt,name=event_tag,json=eventTag" json:"event_tag"`
	EventName       string `protobuf:"bytes,3,opt,name=event_name,json=eventName" json:"event_name"`
	EventTimeStart  uint32 `protobuf:"varint,4,opt,name=event_time_start,json=eventTimeStart" json:"event_time_start"`
	EventTimeEnd    uint32 `protobuf:"varint,5,opt,name=event_time_end,json=eventTimeEnd" json:"event_time_end"`
	EventPublic     int32  `protobuf:"varint,6,opt,name=event_public,json=eventPublic" json:"event_public"`
	EventStageId    int32  `protobuf:"varint,7,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
	EventStageName  string `protobuf:"bytes,8,opt,name=event_stage_name,json=eventStageName" json:"event_stage_name"`
	ActiveSectionId uint32 `protobuf:"varint,9,opt,name=active_section_id,json=activeSectionId" json:"active_section_id"`
}

func (m *TournamentEvent) Reset()         { *m = TournamentEvent{} }
func (m *TournamentEvent) String() string { return proto.CompactTextString(m) }
func (*TournamentEvent) ProtoMessage()    {}
func (*TournamentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{4}
}

func (m *TournamentEvent) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TournamentEvent) GetEventTag() string {
	if m != nil {
		return m.EventTag
	}
	return ""
}

func (m *TournamentEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *TournamentEvent) GetEventTimeStart() uint32 {
	if m != nil {
		return m.EventTimeStart
	}
	return 0
}

func (m *TournamentEvent) GetEventTimeEnd() uint32 {
	if m != nil {
		return m.EventTimeEnd
	}
	return 0
}

func (m *TournamentEvent) GetEventPublic() int32 {
	if m != nil {
		return m.EventPublic
	}
	return 0
}

func (m *TournamentEvent) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

func (m *TournamentEvent) GetEventStageName() string {
	if m != nil {
		return m.EventStageName
	}
	return ""
}

func (m *TournamentEvent) GetActiveSectionId() uint32 {
	if m != nil {
		return m.ActiveSectionId
	}
	return 0
}

type GlobalStatistics struct {
	PlayersOnline           uint32                     `protobuf:"varint,1,opt,name=players_online,json=playersOnline" json:"players_online"`
	ServersOnline           uint32                     `protobuf:"varint,2,opt,name=servers_online,json=serversOnline" json:"servers_online"`
	PlayersSearching        uint32                     `protobuf:"varint,3,opt,name=players_searching,json=playersSearching" json:"players_searching"`
	ServersAvailable        uint32                     `protobuf:"varint,4,opt,name=servers_available,json=serversAvailable" json:"servers_available"`
	OngoingMatches          uint32                     `protobuf:"varint,5,opt,name=ongoing_matches,json=ongoingMatches" json:"ongoing_matches"`
	SearchTimeAvg           uint32                     `protobuf:"varint,6,opt,name=search_time_avg,json=searchTimeAvg" json:"search_time_avg"`
	SearchStatistics        []*DetailedSearchStatistic `protobuf:"bytes,7,rep,name=search_statistics,json=searchStatistics" json:"search_statistics,omitempty"`
	MainPostUrl             string                     `protobuf:"bytes,8,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url"`
	RequiredAppidVersion    uint32                     `protobuf:"varint,9,opt,name=required_appid_version,json=requiredAppidVersion" json:"required_appid_version"`
	PricesheetVersion       uint32                     `protobuf:"varint,10,opt,name=pricesheet_version,json=pricesheetVersion" json:"pricesheet_version"`
	TwitchStreamsVersion    uint32                     `protobuf:"varint,11,opt,name=twitch_streams_version,json=twitchStreamsVersion" json:"twitch_streams_version"`
	ActiveTournamentEventid uint32                     `protobuf:"varint,12,opt,name=active_tournament_eventid,json=activeTournamentEventid" json:"active_tournament_eventid"`
	ActiveSurveyId          uint32                     `protobuf:"varint,13,opt,name=active_survey_id,json=activeSurveyId" json:"active_survey_id"`
}

func (m *GlobalStatistics) Reset()         { *m = GlobalStatistics{} }
func (m *GlobalStatistics) String() string { return proto.CompactTextString(m) }
func (*GlobalStatistics) ProtoMessage()    {}
func (*GlobalStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{5}
}

func (m *GlobalStatistics) GetPlayersOnline() uint32 {
	if m != nil {
		return m.PlayersOnline
	}
	return 0
}

func (m *GlobalStatistics) GetServersOnline() uint32 {
	if m != nil {
		return m.ServersOnline
	}
	return 0
}

func (m *GlobalStatistics) GetPlayersSearching() uint32 {
	if m != nil {
		return m.PlayersSearching
	}
	return 0
}

func (m *GlobalStatistics) GetServersAvailable() uint32 {
	if m != nil {
		return m.ServersAvailable
	}
	return 0
}

func (m *GlobalStatistics) GetOngoingMatches() uint32 {
	if m != nil {
		return m.OngoingMatches
	}
	return 0
}

func (m *GlobalStatistics) GetSearchTimeAvg() uint32 {
	if m != nil {
		return m.SearchTimeAvg
	}
	return 0
}

func (m *GlobalStatistics) GetSearchStatistics() []*DetailedSearchStatistic {
	if m != nil {
		return m.SearchStatistics
	}
	return nil
}

func (m *GlobalStatistics) GetMainPostUrl() string {
	if m != nil {
		return m.MainPostUrl
	}
	return ""
}

func (m *GlobalStatistics) GetRequiredAppidVersion() uint32 {
	if m != nil {
		return m.RequiredAppidVersion
	}
	return 0
}

func (m *GlobalStatistics) GetPricesheetVersion() uint32 {
	if m != nil {
		return m.PricesheetVersion
	}
	return 0
}

func (m *GlobalStatistics) GetTwitchStreamsVersion() uint32 {
	if m != nil {
		return m.TwitchStreamsVersion
	}
	return 0
}

func (m *GlobalStatistics) GetActiveTournamentEventid() uint32 {
	if m != nil {
		return m.ActiveTournamentEventid
	}
	return 0
}

func (m *GlobalStatistics) GetActiveSurveyId() uint32 {
	if m != nil {
		return m.ActiveSurveyId
	}
	return 0
}

type OperationalStatisticDescription struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name"`
	Idkey uint32 `protobuf:"varint,2,opt,name=idkey" json:"idkey"`
}

func (m *OperationalStatisticDescription) Reset()         { *m = OperationalStatisticDescription{} }
func (m *OperationalStatisticDescription) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticDescription) ProtoMessage()    {}
func (*OperationalStatisticDescription) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{6}
}

func (m *OperationalStatisticDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OperationalStatisticDescription) GetIdkey() uint32 {
	if m != nil {
		return m.Idkey
	}
	return 0
}

type OperationalStatisticElement struct {
	Idkey  uint32  `protobuf:"varint,1,opt,name=idkey" json:"idkey"`
	Values []int32 `protobuf:"varint,2,rep,name=values" json:"values,omitempty"`
}

func (m *OperationalStatisticElement) Reset()         { *m = OperationalStatisticElement{} }
func (m *OperationalStatisticElement) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticElement) ProtoMessage()    {}
func (*OperationalStatisticElement) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{7}
}

func (m *OperationalStatisticElement) GetIdkey() uint32 {
	if m != nil {
		return m.Idkey
	}
	return 0
}

func (m *OperationalStatisticElement) GetValues() []int32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type OperationalStatisticsPacket struct {
	Packetid    int32                          `protobuf:"varint,1,opt,name=packetid" json:"packetid"`
	Mstimestamp int32                          `protobuf:"varint,2,opt,name=mstimestamp" json:"mstimestamp"`
	Values      []*OperationalStatisticElement `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *OperationalStatisticsPacket) Reset()         { *m = OperationalStatisticsPacket{} }
func (m *OperationalStatisticsPacket) String() string { return proto.CompactTextString(m) }
func (*OperationalStatisticsPacket) ProtoMessage()    {}
func (*OperationalStatisticsPacket) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{8}
}

func (m *OperationalStatisticsPacket) GetPacketid() int32 {
	if m != nil {
		return m.Packetid
	}
	return 0
}

func (m *OperationalStatisticsPacket) GetMstimestamp() int32 {
	if m != nil {
		return m.Mstimestamp
	}
	return 0
}

func (m *OperationalStatisticsPacket) GetValues() []*OperationalStatisticElement {
	if m != nil {
		return m.Values
	}
	return nil
}

type PlayerRankingInfo struct {
	AccountId  uint32  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RankId     uint32  `protobuf:"varint,2,opt,name=rank_id,json=rankId" json:"rank_id"`
	Wins       uint32  `protobuf:"varint,3,opt,name=wins" json:"wins"`
	RankChange float32 `protobuf:"fixed32,4,opt,name=rank_change,json=rankChange" json:"rank_change"`
}

func (m *PlayerRankingInfo) Reset()         { *m = PlayerRankingInfo{} }
func (m *PlayerRankingInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerRankingInfo) ProtoMessage()    {}
func (*PlayerRankingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{9}
}

func (m *PlayerRankingInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerRankingInfo) GetRankId() uint32 {
	if m != nil {
		return m.RankId
	}
	return 0
}

func (m *PlayerRankingInfo) GetWins() uint32 {
	if m != nil {
		return m.Wins
	}
	return 0
}

func (m *PlayerRankingInfo) GetRankChange() float32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

type PlayerCommendationInfo struct {
	CmdFriendly uint32 `protobuf:"varint,1,opt,name=cmd_friendly,json=cmdFriendly" json:"cmd_friendly"`
	CmdTeaching uint32 `protobuf:"varint,2,opt,name=cmd_teaching,json=cmdTeaching" json:"cmd_teaching"`
	CmdLeader   uint32 `protobuf:"varint,4,opt,name=cmd_leader,json=cmdLeader" json:"cmd_leader"`
}

func (m *PlayerCommendationInfo) Reset()         { *m = PlayerCommendationInfo{} }
func (m *PlayerCommendationInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerCommendationInfo) ProtoMessage()    {}
func (*PlayerCommendationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{10}
}

func (m *PlayerCommendationInfo) GetCmdFriendly() uint32 {
	if m != nil {
		return m.CmdFriendly
	}
	return 0
}

func (m *PlayerCommendationInfo) GetCmdTeaching() uint32 {
	if m != nil {
		return m.CmdTeaching
	}
	return 0
}

func (m *PlayerCommendationInfo) GetCmdLeader() uint32 {
	if m != nil {
		return m.CmdLeader
	}
	return 0
}

type PlayerMedalsInfo struct {
	MedalTeam                 uint32   `protobuf:"varint,1,opt,name=medal_team,json=medalTeam" json:"medal_team"`
	MedalCombat               uint32   `protobuf:"varint,2,opt,name=medal_combat,json=medalCombat" json:"medal_combat"`
	MedalWeapon               uint32   `protobuf:"varint,3,opt,name=medal_weapon,json=medalWeapon" json:"medal_weapon"`
	MedalGlobal               uint32   `protobuf:"varint,4,opt,name=medal_global,json=medalGlobal" json:"medal_global"`
	MedalArms                 uint32   `protobuf:"varint,5,opt,name=medal_arms,json=medalArms" json:"medal_arms"`
	DisplayItemsDefidx        []uint32 `protobuf:"varint,7,rep,name=display_items_defidx,json=displayItemsDefidx" json:"display_items_defidx,omitempty"`
	FeaturedDisplayItemDefidx uint32   `protobuf:"varint,8,opt,name=featured_display_item_defidx,json=featuredDisplayItemDefidx" json:"featured_display_item_defidx"`
}

func (m *PlayerMedalsInfo) Reset()         { *m = PlayerMedalsInfo{} }
func (m *PlayerMedalsInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerMedalsInfo) ProtoMessage()    {}
func (*PlayerMedalsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{11}
}

func (m *PlayerMedalsInfo) GetMedalTeam() uint32 {
	if m != nil {
		return m.MedalTeam
	}
	return 0
}

func (m *PlayerMedalsInfo) GetMedalCombat() uint32 {
	if m != nil {
		return m.MedalCombat
	}
	return 0
}

func (m *PlayerMedalsInfo) GetMedalWeapon() uint32 {
	if m != nil {
		return m.MedalWeapon
	}
	return 0
}

func (m *PlayerMedalsInfo) GetMedalGlobal() uint32 {
	if m != nil {
		return m.MedalGlobal
	}
	return 0
}

func (m *PlayerMedalsInfo) GetMedalArms() uint32 {
	if m != nil {
		return m.MedalArms
	}
	return 0
}

func (m *PlayerMedalsInfo) GetDisplayItemsDefidx() []uint32 {
	if m != nil {
		return m.DisplayItemsDefidx
	}
	return nil
}

func (m *PlayerMedalsInfo) GetFeaturedDisplayItemDefidx() uint32 {
	if m != nil {
		return m.FeaturedDisplayItemDefidx
	}
	return 0
}

type AccountActivity struct {
	Activity uint32 `protobuf:"varint,1,opt,name=activity" json:"activity"`
	Mode     uint32 `protobuf:"varint,2,opt,name=mode" json:"mode"`
	Map      uint32 `protobuf:"varint,3,opt,name=map" json:"map"`
}

func (m *AccountActivity) Reset()         { *m = AccountActivity{} }
func (m *AccountActivity) String() string { return proto.CompactTextString(m) }
func (*AccountActivity) ProtoMessage()    {}
func (*AccountActivity) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{12}
}

func (m *AccountActivity) GetActivity() uint32 {
	if m != nil {
		return m.Activity
	}
	return 0
}

func (m *AccountActivity) GetMode() uint32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *AccountActivity) GetMap() uint32 {
	if m != nil {
		return m.Map
	}
	return 0
}

type TournamentMatchSetup struct {
	EventId      int32 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	TeamIdCt     int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct"`
	TeamIdT      int32 `protobuf:"varint,3,opt,name=team_id_t,json=teamIdT" json:"team_id_t"`
	EventStageId int32 `protobuf:"varint,4,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
}

func (m *TournamentMatchSetup) Reset()         { *m = TournamentMatchSetup{} }
func (m *TournamentMatchSetup) String() string { return proto.CompactTextString(m) }
func (*TournamentMatchSetup) ProtoMessage()    {}
func (*TournamentMatchSetup) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{13}
}

func (m *TournamentMatchSetup) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *TournamentMatchSetup) GetTeamIdCt() int32 {
	if m != nil {
		return m.TeamIdCt
	}
	return 0
}

func (m *TournamentMatchSetup) GetTeamIdT() int32 {
	if m != nil {
		return m.TeamIdT
	}
	return 0
}

func (m *TournamentMatchSetup) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

type ServerHltvInfo struct {
	TvUdpPort       uint32 `protobuf:"varint,1,opt,name=tv_udp_port,json=tvUdpPort" json:"tv_udp_port"`
	TvWatchKey      uint64 `protobuf:"varint,2,opt,name=tv_watch_key,json=tvWatchKey" json:"tv_watch_key"`
	TvSlots         uint32 `protobuf:"varint,3,opt,name=tv_slots,json=tvSlots" json:"tv_slots"`
	TvClients       uint32 `protobuf:"varint,4,opt,name=tv_clients,json=tvClients" json:"tv_clients"`
	TvProxies       uint32 `protobuf:"varint,5,opt,name=tv_proxies,json=tvProxies" json:"tv_proxies"`
	TvTime          uint32 `protobuf:"varint,6,opt,name=tv_time,json=tvTime" json:"tv_time"`
	GameType        uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type"`
	GameMapgroup    string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup"`
	GameMap         string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map"`
	TvMasterSteamid uint64 `protobuf:"varint,11,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid"`
	TvLocalSlots    uint32 `protobuf:"varint,12,opt,name=tv_local_slots,json=tvLocalSlots" json:"tv_local_slots"`
	TvLocalClients  uint32 `protobuf:"varint,13,opt,name=tv_local_clients,json=tvLocalClients" json:"tv_local_clients"`
	TvLocalProxies  uint32 `protobuf:"varint,14,opt,name=tv_local_proxies,json=tvLocalProxies" json:"tv_local_proxies"`
	TvRelaySlots    uint32 `protobuf:"varint,15,opt,name=tv_relay_slots,json=tvRelaySlots" json:"tv_relay_slots"`
	TvRelayClients  uint32 `protobuf:"varint,16,opt,name=tv_relay_clients,json=tvRelayClients" json:"tv_relay_clients"`
	TvRelayProxies  uint32 `protobuf:"varint,17,opt,name=tv_relay_proxies,json=tvRelayProxies" json:"tv_relay_proxies"`
	TvRelayAddress  uint32 `protobuf:"varint,18,opt,name=tv_relay_address,json=tvRelayAddress" json:"tv_relay_address"`
	TvRelayPort     uint32 `protobuf:"varint,19,opt,name=tv_relay_port,json=tvRelayPort" json:"tv_relay_port"`
	TvRelaySteamid  uint64 `protobuf:"varint,20,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid"`
}

func (m *ServerHltvInfo) Reset()         { *m = ServerHltvInfo{} }
func (m *ServerHltvInfo) String() string { return proto.CompactTextString(m) }
func (*ServerHltvInfo) ProtoMessage()    {}
func (*ServerHltvInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{14}
}

func (m *ServerHltvInfo) GetTvUdpPort() uint32 {
	if m != nil {
		return m.TvUdpPort
	}
	return 0
}

func (m *ServerHltvInfo) GetTvWatchKey() uint64 {
	if m != nil {
		return m.TvWatchKey
	}
	return 0
}

func (m *ServerHltvInfo) GetTvSlots() uint32 {
	if m != nil {
		return m.TvSlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvClients() uint32 {
	if m != nil {
		return m.TvClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvProxies() uint32 {
	if m != nil {
		return m.TvProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvTime() uint32 {
	if m != nil {
		return m.TvTime
	}
	return 0
}

func (m *ServerHltvInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *ServerHltvInfo) GetGameMapgroup() string {
	if m != nil {
		return m.GameMapgroup
	}
	return ""
}

func (m *ServerHltvInfo) GetGameMap() string {
	if m != nil {
		return m.GameMap
	}
	return ""
}

func (m *ServerHltvInfo) GetTvMasterSteamid() uint64 {
	if m != nil {
		return m.TvMasterSteamid
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalSlots() uint32 {
	if m != nil {
		return m.TvLocalSlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalClients() uint32 {
	if m != nil {
		return m.TvLocalClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvLocalProxies() uint32 {
	if m != nil {
		return m.TvLocalProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelaySlots() uint32 {
	if m != nil {
		return m.TvRelaySlots
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayClients() uint32 {
	if m != nil {
		return m.TvRelayClients
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayProxies() uint32 {
	if m != nil {
		return m.TvRelayProxies
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayAddress() uint32 {
	if m != nil {
		return m.TvRelayAddress
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelayPort() uint32 {
	if m != nil {
		return m.TvRelayPort
	}
	return 0
}

func (m *ServerHltvInfo) GetTvRelaySteamid() uint64 {
	if m != nil {
		return m.TvRelaySteamid
	}
	return 0
}

type IpAddressMask struct {
	A     uint32 `protobuf:"varint,1,opt,name=a" json:"a"`
	B     uint32 `protobuf:"varint,2,opt,name=b" json:"b"`
	C     uint32 `protobuf:"varint,3,opt,name=c" json:"c"`
	D     uint32 `protobuf:"varint,4,opt,name=d" json:"d"`
	Bits  uint32 `protobuf:"varint,5,opt,name=bits" json:"bits"`
	Token uint32 `protobuf:"varint,6,opt,name=token" json:"token"`
}

func (m *IpAddressMask) Reset()         { *m = IpAddressMask{} }
func (m *IpAddressMask) String() string { return proto.CompactTextString(m) }
func (*IpAddressMask) ProtoMessage()    {}
func (*IpAddressMask) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{15}
}

func (m *IpAddressMask) GetA() uint32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *IpAddressMask) GetB() uint32 {
	if m != nil {
		return m.B
	}
	return 0
}

func (m *IpAddressMask) GetC() uint32 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *IpAddressMask) GetD() uint32 {
	if m != nil {
		return m.D
	}
	return 0
}

func (m *IpAddressMask) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *IpAddressMask) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

type XpProgressData struct {
	XpPoints   uint32 `protobuf:"varint,1,opt,name=xp_points,json=xpPoints" json:"xp_points"`
	XpCategory int32  `protobuf:"varint,2,opt,name=xp_category,json=xpCategory" json:"xp_category"`
}

func (m *XpProgressData) Reset()         { *m = XpProgressData{} }
func (m *XpProgressData) String() string { return proto.CompactTextString(m) }
func (*XpProgressData) ProtoMessage()    {}
func (*XpProgressData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{16}
}

func (m *XpProgressData) GetXpPoints() uint32 {
	if m != nil {
		return m.XpPoints
	}
	return 0
}

func (m *XpProgressData) GetXpCategory() int32 {
	if m != nil {
		return m.XpCategory
	}
	return 0
}

type MatchEndItemUpdates struct {
	ItemId             uint64 `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id"`
	ItemAttrDefidx     uint32 `protobuf:"varint,2,opt,name=item_attr_defidx,json=itemAttrDefidx" json:"item_attr_defidx"`
	ItemAttrDeltaValue uint32 `protobuf:"varint,3,opt,name=item_attr_delta_value,json=itemAttrDeltaValue" json:"item_attr_delta_value"`
}

func (m *MatchEndItemUpdates) Reset()         { *m = MatchEndItemUpdates{} }
func (m *MatchEndItemUpdates) String() string { return proto.CompactTextString(m) }
func (*MatchEndItemUpdates) ProtoMessage()    {}
func (*MatchEndItemUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{17}
}

func (m *MatchEndItemUpdates) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *MatchEndItemUpdates) GetItemAttrDefidx() uint32 {
	if m != nil {
		return m.ItemAttrDefidx
	}
	return 0
}

func (m *MatchEndItemUpdates) GetItemAttrDeltaValue() uint32 {
	if m != nil {
		return m.ItemAttrDeltaValue
	}
	return 0
}

type ScoreLeaderboardData struct {
	QuestId        uint64                                 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	Score          uint32                                 `protobuf:"varint,2,opt,name=score" json:"score"`
	Accountentries []*ScoreLeaderboardData_AccountEntries `protobuf:"bytes,3,rep,name=accountentries" json:"accountentries,omitempty"`
	Matchentries   []*ScoreLeaderboardData_Entry          `protobuf:"bytes,5,rep,name=matchentries" json:"matchentries,omitempty"`
}

func (m *ScoreLeaderboardData) Reset()         { *m = ScoreLeaderboardData{} }
func (m *ScoreLeaderboardData) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData) ProtoMessage()    {}
func (*ScoreLeaderboardData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{18}
}

func (m *ScoreLeaderboardData) GetQuestId() uint64 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *ScoreLeaderboardData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ScoreLeaderboardData) GetAccountentries() []*ScoreLeaderboardData_AccountEntries {
	if m != nil {
		return m.Accountentries
	}
	return nil
}

func (m *ScoreLeaderboardData) GetMatchentries() []*ScoreLeaderboardData_Entry {
	if m != nil {
		return m.Matchentries
	}
	return nil
}

type ScoreLeaderboardData_Entry struct {
	Tag uint32 `protobuf:"varint,1,opt,name=tag" json:"tag"`
	Val uint32 `protobuf:"varint,2,opt,name=val" json:"val"`
}

func (m *ScoreLeaderboardData_Entry) Reset()         { *m = ScoreLeaderboardData_Entry{} }
func (m *ScoreLeaderboardData_Entry) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData_Entry) ProtoMessage()    {}
func (*ScoreLeaderboardData_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{18, 0}
}

func (m *ScoreLeaderboardData_Entry) GetTag() uint32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *ScoreLeaderboardData_Entry) GetVal() uint32 {
	if m != nil {
		return m.Val
	}
	return 0
}

type ScoreLeaderboardData_AccountEntries struct {
	Accountid uint32                        `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Entries   []*ScoreLeaderboardData_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *ScoreLeaderboardData_AccountEntries) Reset()         { *m = ScoreLeaderboardData_AccountEntries{} }
func (m *ScoreLeaderboardData_AccountEntries) String() string { return proto.CompactTextString(m) }
func (*ScoreLeaderboardData_AccountEntries) ProtoMessage()    {}
func (*ScoreLeaderboardData_AccountEntries) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{18, 1}
}

func (m *ScoreLeaderboardData_AccountEntries) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *ScoreLeaderboardData_AccountEntries) GetEntries() []*ScoreLeaderboardData_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type PlayerQuestData struct {
	QuesterAccountId uint32                           `protobuf:"varint,1,opt,name=quester_account_id,json=questerAccountId" json:"quester_account_id"`
	QuestItemData    []*PlayerQuestData_QuestItemData `protobuf:"bytes,2,rep,name=quest_item_data,json=questItemData" json:"quest_item_data,omitempty"`
	XpProgressData   []*XpProgressData                `protobuf:"bytes,3,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	TimePlayed       uint32                           `protobuf:"varint,4,opt,name=time_played,json=timePlayed" json:"time_played"`
	MmGameMode       uint32                           `protobuf:"varint,5,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode"`
	ItemUpdates      []*MatchEndItemUpdates           `protobuf:"bytes,6,rep,name=item_updates,json=itemUpdates" json:"item_updates,omitempty"`
}

func (m *PlayerQuestData) Reset()         { *m = PlayerQuestData{} }
func (m *PlayerQuestData) String() string { return proto.CompactTextString(m) }
func (*PlayerQuestData) ProtoMessage()    {}
func (*PlayerQuestData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{19}
}

func (m *PlayerQuestData) GetQuesterAccountId() uint32 {
	if m != nil {
		return m.QuesterAccountId
	}
	return 0
}

func (m *PlayerQuestData) GetQuestItemData() []*PlayerQuestData_QuestItemData {
	if m != nil {
		return m.QuestItemData
	}
	return nil
}

func (m *PlayerQuestData) GetXpProgressData() []*XpProgressData {
	if m != nil {
		return m.XpProgressData
	}
	return nil
}

func (m *PlayerQuestData) GetTimePlayed() uint32 {
	if m != nil {
		return m.TimePlayed
	}
	return 0
}

func (m *PlayerQuestData) GetMmGameMode() uint32 {
	if m != nil {
		return m.MmGameMode
	}
	return 0
}

func (m *PlayerQuestData) GetItemUpdates() []*MatchEndItemUpdates {
	if m != nil {
		return m.ItemUpdates
	}
	return nil
}

type PlayerQuestData_QuestItemData struct {
	QuestId                 uint64 `protobuf:"varint,1,opt,name=quest_id,json=questId" json:"quest_id"`
	QuestNormalPointsEarned int32  `protobuf:"varint,2,opt,name=quest_normal_points_earned,json=questNormalPointsEarned" json:"quest_normal_points_earned"`
	QuestBonusPointsEarned  int32  `protobuf:"varint,3,opt,name=quest_bonus_points_earned,json=questBonusPointsEarned" json:"quest_bonus_points_earned"`
}

func (m *PlayerQuestData_QuestItemData) Reset()         { *m = PlayerQuestData_QuestItemData{} }
func (m *PlayerQuestData_QuestItemData) String() string { return proto.CompactTextString(m) }
func (*PlayerQuestData_QuestItemData) ProtoMessage()    {}
func (*PlayerQuestData_QuestItemData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{19, 0}
}

func (m *PlayerQuestData_QuestItemData) GetQuestId() uint64 {
	if m != nil {
		return m.QuestId
	}
	return 0
}

func (m *PlayerQuestData_QuestItemData) GetQuestNormalPointsEarned() int32 {
	if m != nil {
		return m.QuestNormalPointsEarned
	}
	return 0
}

func (m *PlayerQuestData_QuestItemData) GetQuestBonusPointsEarned() int32 {
	if m != nil {
		return m.QuestBonusPointsEarned
	}
	return 0
}

type CMsgGC_ServerQuestUpdateData struct {
	PlayerQuestData []*PlayerQuestData    `protobuf:"bytes,1,rep,name=player_quest_data,json=playerQuestData" json:"player_quest_data,omitempty"`
	BinaryData      []byte                `protobuf:"bytes,2,opt,name=binary_data,json=binaryData" json:"binary_data"`
	MmGameMode      uint32                `protobuf:"varint,3,opt,name=mm_game_mode,json=mmGameMode" json:"mm_game_mode"`
	Missionlbsdata  *ScoreLeaderboardData `protobuf:"bytes,4,opt,name=missionlbsdata" json:"missionlbsdata,omitempty"`
}

func (m *CMsgGC_ServerQuestUpdateData) Reset()         { *m = CMsgGC_ServerQuestUpdateData{} }
func (m *CMsgGC_ServerQuestUpdateData) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_ServerQuestUpdateData) ProtoMessage()    {}
func (*CMsgGC_ServerQuestUpdateData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{20}
}

func (m *CMsgGC_ServerQuestUpdateData) GetPlayerQuestData() []*PlayerQuestData {
	if m != nil {
		return m.PlayerQuestData
	}
	return nil
}

func (m *CMsgGC_ServerQuestUpdateData) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

func (m *CMsgGC_ServerQuestUpdateData) GetMmGameMode() uint32 {
	if m != nil {
		return m.MmGameMode
	}
	return 0
}

func (m *CMsgGC_ServerQuestUpdateData) GetMissionlbsdata() *ScoreLeaderboardData {
	if m != nil {
		return m.Missionlbsdata
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGCOperationalStats struct {
	Packetid int32                              `protobuf:"varint,1,opt,name=packetid" json:"packetid"`
	Namekeys []*OperationalStatisticDescription `protobuf:"bytes,2,rep,name=namekeys" json:"namekeys,omitempty"`
	Packets  []*OperationalStatisticsPacket     `protobuf:"bytes,3,rep,name=packets" json:"packets,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGCOperationalStats{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{21}
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPacketid() int32 {
	if m != nil {
		return m.Packetid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetNamekeys() []*OperationalStatisticDescription {
	if m != nil {
		return m.Namekeys
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) GetPackets() []*OperationalStatisticsPacket {
	if m != nil {
		return m.Packets
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm struct {
	Token    uint32 `protobuf:"varint,1,opt,name=token" json:"token"`
	Stamp    uint32 `protobuf:"varint,2,opt,name=stamp" json:"stamp"`
	Exchange uint64 `protobuf:"varint,3,opt,name=exchange" json:"exchange"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{22}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetStamp() uint32 {
	if m != nil {
		return m.Stamp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) GetExchange() uint64 {
	if m != nil {
		return m.Exchange
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ServerReservationUpdate struct {
	ViewersExternalTotal uint32 `protobuf:"varint,1,opt,name=viewers_external_total,json=viewersExternalTotal" json:"viewers_external_total"`
	ViewersExternalSteam uint32 `protobuf:"varint,2,opt,name=viewers_external_steam,json=viewersExternalSteam" json:"viewers_external_steam"`
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Reset() {
	*m = CMsgGCCStrike15V2_GC2ServerReservationUpdate{}
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GC2ServerReservationUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{23}
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalTotal() uint32 {
	if m != nil {
		return m.ViewersExternalTotal
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) GetViewersExternalSteam() uint32 {
	if m != nil {
		return m.ViewersExternalSteam
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingStart struct {
	AccountIds      []uint32              `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType        uint32                `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type"`
	TicketData      string                `protobuf:"bytes,3,opt,name=ticket_data,json=ticketData" json:"ticket_data"`
	ClientVersion   uint32                `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version"`
	TournamentMatch *TournamentMatchSetup `protobuf:"bytes,5,opt,name=tournament_match,json=tournamentMatch" json:"tournament_match,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Reset()         { *m = CMsgGCCStrike15V2_MatchmakingStart{} }
func (m *CMsgGCCStrike15V2_MatchmakingStart) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchmakingStart) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchmakingStart) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{24}
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetTicketData() string {
	if m != nil {
		return m.TicketData
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetClientVersion() uint32 {
	if m != nil {
		return m.ClientVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) GetTournamentMatch() *TournamentMatchSetup {
	if m != nil {
		return m.TournamentMatch
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingStop struct {
	Abandon int32 `protobuf:"varint,1,opt,name=abandon" json:"abandon"`
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Reset()         { *m = CMsgGCCStrike15V2_MatchmakingStop{} }
func (m *CMsgGCCStrike15V2_MatchmakingStop) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchmakingStop) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchmakingStop) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{25}
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) GetAbandon() int32 {
	if m != nil {
		return m.Abandon
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2ServerPing struct {
	Gameserverpings []*GameServerPing `protobuf:"bytes,1,rep,name=gameserverpings" json:"gameserverpings,omitempty"`
	OffsetIndex     int32             `protobuf:"varint,2,opt,name=offset_index,json=offsetIndex" json:"offset_index"`
	FinalBatch      int32             `protobuf:"varint,3,opt,name=final_batch,json=finalBatch" json:"final_batch"`
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingClient2ServerPing{}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{26}
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetGameserverpings() []*GameServerPing {
	if m != nil {
		return m.Gameserverpings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetOffsetIndex() int32 {
	if m != nil {
		return m.OffsetIndex
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) GetFinalBatch() int32 {
	if m != nil {
		return m.FinalBatch
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate struct {
	Matchmaking                   int32                                                `protobuf:"varint,1,opt,name=matchmaking" json:"matchmaking"`
	WaitingAccountIdSessions      []uint32                                             `protobuf:"varint,2,rep,name=waiting_account_id_sessions,json=waitingAccountIdSessions" json:"waiting_account_id_sessions,omitempty"`
	Error                         string                                               `protobuf:"bytes,3,opt,name=error" json:"error"`
	OngoingmatchAccountIdSessions []uint32                                             `protobuf:"varint,6,rep,name=ongoingmatch_account_id_sessions,json=ongoingmatchAccountIdSessions" json:"ongoingmatch_account_id_sessions,omitempty"`
	GlobalStats                   *GlobalStatistics                                    `protobuf:"bytes,7,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	FailpingAccountIdSessions     []uint32                                             `protobuf:"varint,8,rep,name=failping_account_id_sessions,json=failpingAccountIdSessions" json:"failping_account_id_sessions,omitempty"`
	PenaltyAccountIdSessions      []uint32                                             `protobuf:"varint,9,rep,name=penalty_account_id_sessions,json=penaltyAccountIdSessions" json:"penalty_account_id_sessions,omitempty"`
	FailreadyAccountIdSessions    []uint32                                             `protobuf:"varint,10,rep,name=failready_account_id_sessions,json=failreadyAccountIdSessions" json:"failready_account_id_sessions,omitempty"`
	VacbannedAccountIdSessions    []uint32                                             `protobuf:"varint,11,rep,name=vacbanned_account_id_sessions,json=vacbannedAccountIdSessions" json:"vacbanned_account_id_sessions,omitempty"`
	ServerIpaddressMask           *IpAddressMask                                       `protobuf:"bytes,12,opt,name=server_ipaddress_mask,json=serverIpaddressMask" json:"server_ipaddress_mask,omitempty"`
	Notes                         []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note `protobuf:"bytes,13,rep,name=notes" json:"notes,omitempty"`
	PenaltyAccountIdSessionsGreen []uint32                                             `protobuf:"varint,14,rep,name=penalty_account_id_sessions_green,json=penaltyAccountIdSessionsGreen" json:"penalty_account_id_sessions_green,omitempty"`
	InsufficientlevelSessions     []uint32                                             `protobuf:"varint,15,rep,name=insufficientlevel_sessions,json=insufficientlevelSessions" json:"insufficientlevel_sessions,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{27}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetMatchmaking() int32 {
	if m != nil {
		return m.Matchmaking
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetWaitingAccountIdSessions() []uint32 {
	if m != nil {
		return m.WaitingAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetOngoingmatchAccountIdSessions() []uint32 {
	if m != nil {
		return m.OngoingmatchAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetGlobalStats() *GlobalStatistics {
	if m != nil {
		return m.GlobalStats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailpingAccountIdSessions() []uint32 {
	if m != nil {
		return m.FailpingAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessions() []uint32 {
	if m != nil {
		return m.PenaltyAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetFailreadyAccountIdSessions() []uint32 {
	if m != nil {
		return m.FailreadyAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetVacbannedAccountIdSessions() []uint32 {
	if m != nil {
		return m.VacbannedAccountIdSessions
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetServerIpaddressMask() *IpAddressMask {
	if m != nil {
		return m.ServerIpaddressMask
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetNotes() []*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetPenaltyAccountIdSessionsGreen() []uint32 {
	if m != nil {
		return m.PenaltyAccountIdSessionsGreen
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) GetInsufficientlevelSessions() []uint32 {
	if m != nil {
		return m.InsufficientlevelSessions
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note struct {
	Type     int32   `protobuf:"varint,1,opt,name=type" json:"type"`
	RegionId int32   `protobuf:"varint,2,opt,name=region_id,json=regionId" json:"region_id"`
	RegionR  float32 `protobuf:"fixed32,3,opt,name=region_r,json=regionR" json:"region_r"`
	Distance float32 `protobuf:"fixed32,4,opt,name=distance" json:"distance"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{27, 0}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetRegionR() float32 {
	if m != nil {
		return m.RegionR
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) GetDistance() float32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type CDataGCCStrike15V2_TournamentMatchDraft struct {
	EventId      int32                                            `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	EventStageId int32                                            `protobuf:"varint,2,opt,name=event_stage_id,json=eventStageId" json:"event_stage_id"`
	TeamId_0     int32                                            `protobuf:"varint,3,opt,name=team_id_0,json=teamId0" json:"team_id_0"`
	TeamId_1     int32                                            `protobuf:"varint,4,opt,name=team_id_1,json=teamId1" json:"team_id_1"`
	MapsCount    int32                                            `protobuf:"varint,5,opt,name=maps_count,json=mapsCount" json:"maps_count"`
	MapsCurrent  int32                                            `protobuf:"varint,6,opt,name=maps_current,json=mapsCurrent" json:"maps_current"`
	TeamIdStart  int32                                            `protobuf:"varint,7,opt,name=team_id_start,json=teamIdStart" json:"team_id_start"`
	TeamIdVeto1  int32                                            `protobuf:"varint,8,opt,name=team_id_veto1,json=teamIdVeto1" json:"team_id_veto1"`
	TeamIdPickn  int32                                            `protobuf:"varint,9,opt,name=team_id_pickn,json=teamIdPickn" json:"team_id_pickn"`
	Drafts       []*CDataGCCStrike15V2_TournamentMatchDraft_Entry `protobuf:"bytes,10,rep,name=drafts" json:"drafts,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Reset() {
	*m = CDataGCCStrike15V2_TournamentMatchDraft{}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentMatchDraft) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentMatchDraft) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{28}
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetEventStageId() int32 {
	if m != nil {
		return m.EventStageId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_0() int32 {
	if m != nil {
		return m.TeamId_0
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamId_1() int32 {
	if m != nil {
		return m.TeamId_1
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCount() int32 {
	if m != nil {
		return m.MapsCount
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetMapsCurrent() int32 {
	if m != nil {
		return m.MapsCurrent
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdStart() int32 {
	if m != nil {
		return m.TeamIdStart
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdVeto1() int32 {
	if m != nil {
		return m.TeamIdVeto1
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetTeamIdPickn() int32 {
	if m != nil {
		return m.TeamIdPickn
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) GetDrafts() []*CDataGCCStrike15V2_TournamentMatchDraft_Entry {
	if m != nil {
		return m.Drafts
	}
	return nil
}

type CDataGCCStrike15V2_TournamentMatchDraft_Entry struct {
	Mapid    int32 `protobuf:"varint,1,opt,name=mapid" json:"mapid"`
	TeamIdCt int32 `protobuf:"varint,2,opt,name=team_id_ct,json=teamIdCt" json:"team_id_ct"`
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Reset() {
	*m = CDataGCCStrike15V2_TournamentMatchDraft_Entry{}
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) String() string {
	return proto.CompactTextString(m)
}
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) ProtoMessage() {}
func (*CDataGCCStrike15V2_TournamentMatchDraft_Entry) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{28, 0}
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetMapid() int32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) GetTeamIdCt() int32 {
	if m != nil {
		return m.TeamIdCt
	}
	return 0
}

type CPreMatchInfoData struct {
	PredictionsPct int32                                    `protobuf:"varint,1,opt,name=predictions_pct,json=predictionsPct" json:"predictions_pct"`
	Draft          *CDataGCCStrike15V2_TournamentMatchDraft `protobuf:"bytes,4,opt,name=draft" json:"draft,omitempty"`
	Stats          []*CPreMatchInfoData_TeamStats           `protobuf:"bytes,5,rep,name=stats" json:"stats,omitempty"`
}

func (m *CPreMatchInfoData) Reset()         { *m = CPreMatchInfoData{} }
func (m *CPreMatchInfoData) String() string { return proto.CompactTextString(m) }
func (*CPreMatchInfoData) ProtoMessage()    {}
func (*CPreMatchInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{29}
}

func (m *CPreMatchInfoData) GetPredictionsPct() int32 {
	if m != nil {
		return m.PredictionsPct
	}
	return 0
}

func (m *CPreMatchInfoData) GetDraft() *CDataGCCStrike15V2_TournamentMatchDraft {
	if m != nil {
		return m.Draft
	}
	return nil
}

func (m *CPreMatchInfoData) GetStats() []*CPreMatchInfoData_TeamStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type CPreMatchInfoData_TeamStats struct {
	MatchInfoIdxtxt int32    `protobuf:"varint,1,opt,name=match_info_idxtxt,json=matchInfoIdxtxt" json:"match_info_idxtxt"`
	MatchInfoTxt    string   `protobuf:"bytes,2,opt,name=match_info_txt,json=matchInfoTxt" json:"match_info_txt"`
	MatchInfoTeams  []string `protobuf:"bytes,3,rep,name=match_info_teams,json=matchInfoTeams" json:"match_info_teams,omitempty"`
}

func (m *CPreMatchInfoData_TeamStats) Reset()         { *m = CPreMatchInfoData_TeamStats{} }
func (m *CPreMatchInfoData_TeamStats) String() string { return proto.CompactTextString(m) }
func (*CPreMatchInfoData_TeamStats) ProtoMessage()    {}
func (*CPreMatchInfoData_TeamStats) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{29, 0}
}

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoIdxtxt() int32 {
	if m != nil {
		return m.MatchInfoIdxtxt
	}
	return 0
}

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoTxt() string {
	if m != nil {
		return m.MatchInfoTxt
	}
	return ""
}

func (m *CPreMatchInfoData_TeamStats) GetMatchInfoTeams() []string {
	if m != nil {
		return m.MatchInfoTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerReserve struct {
	AccountIds                  []uint32             `protobuf:"varint,1,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	GameType                    uint32               `protobuf:"varint,2,opt,name=game_type,json=gameType" json:"game_type"`
	MatchId                     uint64               `protobuf:"varint,3,opt,name=match_id,json=matchId" json:"match_id"`
	ServerVersion               uint32               `protobuf:"varint,4,opt,name=server_version,json=serverVersion" json:"server_version"`
	Rankings                    []*PlayerRankingInfo `protobuf:"bytes,5,rep,name=rankings" json:"rankings,omitempty"`
	EncryptionKey               uint64               `protobuf:"varint,6,opt,name=encryption_key,json=encryptionKey" json:"encryption_key"`
	EncryptionKeyPub            uint64               `protobuf:"varint,7,opt,name=encryption_key_pub,json=encryptionKeyPub" json:"encryption_key_pub"`
	PartyIds                    []uint32             `protobuf:"varint,8,rep,name=party_ids,json=partyIds" json:"party_ids,omitempty"`
	Whitelist                   []*IpAddressMask     `protobuf:"bytes,9,rep,name=whitelist" json:"whitelist,omitempty"`
	TvMasterSteamid             uint64               `protobuf:"varint,10,opt,name=tv_master_steamid,json=tvMasterSteamid" json:"tv_master_steamid"`
	TournamentEvent             *TournamentEvent     `protobuf:"bytes,11,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams             []*TournamentTeam    `protobuf:"bytes,12,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
	TournamentCastersAccountIds []uint32             `protobuf:"varint,13,rep,name=tournament_casters_account_ids,json=tournamentCastersAccountIds" json:"tournament_casters_account_ids,omitempty"`
	TvRelaySteamid              uint64               `protobuf:"varint,14,opt,name=tv_relay_steamid,json=tvRelaySteamid" json:"tv_relay_steamid"`
	PreMatchData                *CPreMatchInfoData   `protobuf:"bytes,15,opt,name=pre_match_data,json=preMatchData" json:"pre_match_data,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{30}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKey() uint64 {
	if m != nil {
		return m.EncryptionKey
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetEncryptionKeyPub() uint64 {
	if m != nil {
		return m.EncryptionKeyPub
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPartyIds() []uint32 {
	if m != nil {
		return m.PartyIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetWhitelist() []*IpAddressMask {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvMasterSteamid() uint64 {
	if m != nil {
		return m.TvMasterSteamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentEvent() *TournamentEvent {
	if m != nil {
		return m.TournamentEvent
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTournamentCastersAccountIds() []uint32 {
	if m != nil {
		return m.TournamentCastersAccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetTvRelaySteamid() uint64 {
	if m != nil {
		return m.TvRelaySteamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) GetPreMatchData() *CPreMatchInfoData {
	if m != nil {
		return m.PreMatchData
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerReservationResponse struct {
	Reservationid           uint64                                         `protobuf:"varint,1,opt,name=reservationid" json:"reservationid"`
	Reservation             *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                     string                                         `protobuf:"bytes,3,opt,name=map" json:"map"`
	GcReservationSent       uint64                                         `protobuf:"varint,4,opt,name=gc_reservation_sent,json=gcReservationSent" json:"gc_reservation_sent"`
	ServerVersion           uint32                                         `protobuf:"varint,5,opt,name=server_version,json=serverVersion" json:"server_version"`
	TvInfo                  *ServerHltvInfo                                `protobuf:"bytes,6,opt,name=tv_info,json=tvInfo" json:"tv_info,omitempty"`
	RewardPlayerAccounts    []uint32                                       `protobuf:"varint,7,rep,name=reward_player_accounts,json=rewardPlayerAccounts" json:"reward_player_accounts,omitempty"`
	IdlePlayerAccounts      []uint32                                       `protobuf:"varint,8,rep,name=idle_player_accounts,json=idlePlayerAccounts" json:"idle_player_accounts,omitempty"`
	RewardItemAttrDefIdx    uint32                                         `protobuf:"varint,9,opt,name=reward_item_attr_def_idx,json=rewardItemAttrDefIdx" json:"reward_item_attr_def_idx"`
	RewardItemAttrValue     uint32                                         `protobuf:"varint,10,opt,name=reward_item_attr_value,json=rewardItemAttrValue" json:"reward_item_attr_value"`
	RewardItemAttrRewardIdx uint32                                         `protobuf:"varint,11,opt,name=reward_item_attr_reward_idx,json=rewardItemAttrRewardIdx" json:"reward_item_attr_reward_idx"`
	RewardDropList          uint32                                         `protobuf:"varint,12,opt,name=reward_drop_list,json=rewardDropList" json:"reward_drop_list"`
	TournamentTag           string                                         `protobuf:"bytes,13,opt,name=tournament_tag,json=tournamentTag" json:"tournament_tag"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{31}
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetGcReservationSent() uint64 {
	if m != nil {
		return m.GcReservationSent
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTvInfo() *ServerHltvInfo {
	if m != nil {
		return m.TvInfo
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardPlayerAccounts() []uint32 {
	if m != nil {
		return m.RewardPlayerAccounts
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetIdlePlayerAccounts() []uint32 {
	if m != nil {
		return m.IdlePlayerAccounts
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrDefIdx() uint32 {
	if m != nil {
		return m.RewardItemAttrDefIdx
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrValue() uint32 {
	if m != nil {
		return m.RewardItemAttrValue
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardItemAttrRewardIdx() uint32 {
	if m != nil {
		return m.RewardItemAttrRewardIdx
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetRewardDropList() uint32 {
	if m != nil {
		return m.RewardDropList
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) GetTournamentTag() string {
	if m != nil {
		return m.TournamentTag
	}
	return ""
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientReserve struct {
	Serverid      uint64                                         `protobuf:"varint,1,opt,name=serverid" json:"serverid"`
	Reservationid uint64                                         `protobuf:"varint,4,opt,name=reservationid" json:"reservationid"`
	Reservation   *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,5,opt,name=reservation" json:"reservation,omitempty"`
	Map           string                                         `protobuf:"bytes,6,opt,name=map" json:"map"`
	ServerAddress string                                         `protobuf:"bytes,7,opt,name=server_address,json=serverAddress" json:"server_address"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{32}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) GetServerAddress() string {
	if m != nil {
		return m.ServerAddress
	}
	return ""
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats struct {
	Reservationid      uint64                                                  `protobuf:"varint,1,opt,name=reservationid" json:"reservationid"`
	Reservation        *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve          `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Map                string                                                  `protobuf:"bytes,3,opt,name=map" json:"map"`
	Round              int32                                                   `protobuf:"varint,4,opt,name=round" json:"round"`
	Kills              []int32                                                 `protobuf:"varint,5,rep,name=kills" json:"kills,omitempty"`
	Assists            []int32                                                 `protobuf:"varint,6,rep,name=assists" json:"assists,omitempty"`
	Deaths             []int32                                                 `protobuf:"varint,7,rep,name=deaths" json:"deaths,omitempty"`
	Scores             []int32                                                 `protobuf:"varint,8,rep,name=scores" json:"scores,omitempty"`
	Pings              []int32                                                 `protobuf:"varint,9,rep,name=pings" json:"pings,omitempty"`
	RoundResult        int32                                                   `protobuf:"varint,10,opt,name=round_result,json=roundResult" json:"round_result"`
	MatchResult        int32                                                   `protobuf:"varint,11,opt,name=match_result,json=matchResult" json:"match_result"`
	TeamScores         []int32                                                 `protobuf:"varint,12,rep,name=team_scores,json=teamScores" json:"team_scores,omitempty"`
	Confirm            *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm          `protobuf:"bytes,13,opt,name=confirm" json:"confirm,omitempty"`
	ReservationStage   int32                                                   `protobuf:"varint,14,opt,name=reservation_stage,json=reservationStage" json:"reservation_stage"`
	MatchDuration      int32                                                   `protobuf:"varint,15,opt,name=match_duration,json=matchDuration" json:"match_duration"`
	EnemyKills         []int32                                                 `protobuf:"varint,16,rep,name=enemy_kills,json=enemyKills" json:"enemy_kills,omitempty"`
	EnemyHeadshots     []int32                                                 `protobuf:"varint,17,rep,name=enemy_headshots,json=enemyHeadshots" json:"enemy_headshots,omitempty"`
	Enemy_3Ks          []int32                                                 `protobuf:"varint,18,rep,name=enemy_3ks,json=enemy3ks" json:"enemy_3ks,omitempty"`
	Enemy_4Ks          []int32                                                 `protobuf:"varint,19,rep,name=enemy_4ks,json=enemy4ks" json:"enemy_4ks,omitempty"`
	Enemy_5Ks          []int32                                                 `protobuf:"varint,20,rep,name=enemy_5ks,json=enemy5ks" json:"enemy_5ks,omitempty"`
	Mvps               []int32                                                 `protobuf:"varint,21,rep,name=mvps" json:"mvps,omitempty"`
	SpectatorsCount    uint32                                                  `protobuf:"varint,22,opt,name=spectators_count,json=spectatorsCount" json:"spectators_count"`
	SpectatorsCountTv  uint32                                                  `protobuf:"varint,23,opt,name=spectators_count_tv,json=spectatorsCountTv" json:"spectators_count_tv"`
	SpectatorsCountLnk uint32                                                  `protobuf:"varint,24,opt,name=spectators_count_lnk,json=spectatorsCountLnk" json:"spectators_count_lnk"`
	EnemyKillsAgg      []int32                                                 `protobuf:"varint,25,rep,name=enemy_kills_agg,json=enemyKillsAgg" json:"enemy_kills_agg,omitempty"`
	DropInfo           *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo `protobuf:"bytes,26,opt,name=drop_info,json=dropInfo" json:"drop_info,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{33}
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationid() uint64 {
	if m != nil {
		return m.Reservationid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRound() int32 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetKills() []int32 {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetAssists() []int32 {
	if m != nil {
		return m.Assists
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDeaths() []int32 {
	if m != nil {
		return m.Deaths
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetPings() []int32 {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetRoundResult() int32 {
	if m != nil {
		return m.RoundResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchResult() int32 {
	if m != nil {
		return m.MatchResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetTeamScores() []int32 {
	if m != nil {
		return m.TeamScores
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetReservationStage() int32 {
	if m != nil {
		return m.ReservationStage
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMatchDuration() int32 {
	if m != nil {
		return m.MatchDuration
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKills() []int32 {
	if m != nil {
		return m.EnemyKills
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyHeadshots() []int32 {
	if m != nil {
		return m.EnemyHeadshots
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_3Ks() []int32 {
	if m != nil {
		return m.Enemy_3Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_4Ks() []int32 {
	if m != nil {
		return m.Enemy_4Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemy_5Ks() []int32 {
	if m != nil {
		return m.Enemy_5Ks
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetMvps() []int32 {
	if m != nil {
		return m.Mvps
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCount() uint32 {
	if m != nil {
		return m.SpectatorsCount
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountTv() uint32 {
	if m != nil {
		return m.SpectatorsCountTv
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetSpectatorsCountLnk() uint32 {
	if m != nil {
		return m.SpectatorsCountLnk
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetEnemyKillsAgg() []int32 {
	if m != nil {
		return m.EnemyKillsAgg
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) GetDropInfo() *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo {
	if m != nil {
		return m.DropInfo
	}
	return nil
}

type CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo struct {
	AccountMvp uint32 `protobuf:"varint,1,opt,name=account_mvp,json=accountMvp" json:"account_mvp"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{33, 0}
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) GetAccountMvp() uint32 {
	if m != nil {
		return m.AccountMvp
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServerMatchEnd struct {
	Stats             *CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,1,opt,name=stats" json:"stats,omitempty"`
	Confirm           *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm `protobuf:"bytes,3,opt,name=confirm" json:"confirm,omitempty"`
	Rematch           uint64                                         `protobuf:"varint,4,opt,name=rematch" json:"rematch"`
	ReplayToken       uint32                                         `protobuf:"varint,5,opt,name=replay_token,json=replayToken" json:"replay_token"`
	ReplayClusterId   uint32                                         `protobuf:"varint,6,opt,name=replay_cluster_id,json=replayClusterId" json:"replay_cluster_id"`
	AbortedMatch      bool                                           `protobuf:"varint,7,opt,name=aborted_match,json=abortedMatch" json:"aborted_match"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                  `protobuf:"bytes,8,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
	ServerVersion     uint32                                         `protobuf:"varint,9,opt,name=server_version,json=serverVersion" json:"server_version"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServerMatchEnd{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{34}
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetStats() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetConfirm() *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetRematch() uint64 {
	if m != nil {
		return m.Rematch
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayToken() uint32 {
	if m != nil {
		return m.ReplayToken
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetReplayClusterId() uint32 {
	if m != nil {
		return m.ReplayClusterId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetAbortedMatch() bool {
	if m != nil {
		return m.AbortedMatch
	}
	return false
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if m != nil {
		return m.MatchEndQuestData
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) GetServerVersion() uint32 {
	if m != nil {
		return m.ServerVersion
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingClient2GCHello struct {
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingClient2GCHello{}
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingClient2GCHello) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{35}
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientHello struct {
	AccountId            uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Ongoingmatch         *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=ongoingmatch" json:"ongoingmatch,omitempty"`
	GlobalStats          *GlobalStatistics                              `protobuf:"bytes,3,opt,name=global_stats,json=globalStats" json:"global_stats,omitempty"`
	PenaltySeconds       uint32                                         `protobuf:"varint,4,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds"`
	PenaltyReason        uint32                                         `protobuf:"varint,5,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason"`
	VacBanned            int32                                          `protobuf:"varint,6,opt,name=vac_banned,json=vacBanned" json:"vac_banned"`
	Ranking              *PlayerRankingInfo                             `protobuf:"bytes,7,opt,name=ranking" json:"ranking,omitempty"`
	Commendation         *PlayerCommendationInfo                        `protobuf:"bytes,8,opt,name=commendation" json:"commendation,omitempty"`
	Medals               *PlayerMedalsInfo                              `protobuf:"bytes,9,opt,name=medals" json:"medals,omitempty"`
	MyCurrentEvent       *TournamentEvent                               `protobuf:"bytes,10,opt,name=my_current_event,json=myCurrentEvent" json:"my_current_event,omitempty"`
	MyCurrentEventTeams  []*TournamentTeam                              `protobuf:"bytes,11,rep,name=my_current_event_teams,json=myCurrentEventTeams" json:"my_current_event_teams,omitempty"`
	MyCurrentTeam        *TournamentTeam                                `protobuf:"bytes,12,opt,name=my_current_team,json=myCurrentTeam" json:"my_current_team,omitempty"`
	MyCurrentEventStages []*TournamentEvent                             `protobuf:"bytes,13,rep,name=my_current_event_stages,json=myCurrentEventStages" json:"my_current_event_stages,omitempty"`
	SurveyVote           uint32                                         `protobuf:"varint,14,opt,name=survey_vote,json=surveyVote" json:"survey_vote"`
	Activity             *AccountActivity                               `protobuf:"bytes,15,opt,name=activity" json:"activity,omitempty"`
	PlayerLevel          int32                                          `protobuf:"varint,17,opt,name=player_level,json=playerLevel" json:"player_level"`
	PlayerCurXp          int32                                          `protobuf:"varint,18,opt,name=player_cur_xp,json=playerCurXp" json:"player_cur_xp"`
	PlayerXpBonusFlags   int32                                          `protobuf:"varint,19,opt,name=player_xp_bonus_flags,json=playerXpBonusFlags" json:"player_xp_bonus_flags"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientHello{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{36}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetOngoingmatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Ongoingmatch
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetGlobalStats() *GlobalStatistics {
	if m != nil {
		return m.GlobalStats
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltySeconds() uint32 {
	if m != nil {
		return m.PenaltySeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPenaltyReason() uint32 {
	if m != nil {
		return m.PenaltyReason
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetVacBanned() int32 {
	if m != nil {
		return m.VacBanned
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetRanking() *PlayerRankingInfo {
	if m != nil {
		return m.Ranking
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMedals() *PlayerMedalsInfo {
	if m != nil {
		return m.Medals
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEvent() *TournamentEvent {
	if m != nil {
		return m.MyCurrentEvent
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventTeams() []*TournamentTeam {
	if m != nil {
		return m.MyCurrentEventTeams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentTeam() *TournamentTeam {
	if m != nil {
		return m.MyCurrentTeam
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetMyCurrentEventStages() []*TournamentEvent {
	if m != nil {
		return m.MyCurrentEventStages
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetSurveyVote() uint32 {
	if m != nil {
		return m.SurveyVote
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetActivity() *AccountActivity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerLevel() int32 {
	if m != nil {
		return m.PlayerLevel
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerCurXp() int32 {
	if m != nil {
		return m.PlayerCurXp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) GetPlayerXpBonusFlags() int32 {
	if m != nil {
		return m.PlayerXpBonusFlags
	}
	return 0
}

type CMsgGCCStrike15V2_AccountPrivacySettings struct {
	Settings []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting `protobuf:"bytes,1,rep,name=settings" json:"settings,omitempty"`
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Reset() {
	*m = CMsgGCCStrike15V2_AccountPrivacySettings{}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_AccountPrivacySettings) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_AccountPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{37}
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) GetSettings() []*CMsgGCCStrike15V2_AccountPrivacySettings_Setting {
	if m != nil {
		return m.Settings
	}
	return nil
}

type CMsgGCCStrike15V2_AccountPrivacySettings_Setting struct {
	SettingType  uint32 `protobuf:"varint,1,opt,name=setting_type,json=settingType" json:"setting_type"`
	SettingValue uint32 `protobuf:"varint,2,opt,name=setting_value,json=settingValue" json:"setting_value"`
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Reset() {
	*m = CMsgGCCStrike15V2_AccountPrivacySettings_Setting{}
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) ProtoMessage() {}
func (*CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{37, 0}
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingType() uint32 {
	if m != nil {
		return m.SettingType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) GetSettingValue() uint32 {
	if m != nil {
		return m.SettingValue
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon struct {
	AccountId      uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	AbandonedMatch *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,2,opt,name=abandoned_match,json=abandonedMatch" json:"abandoned_match,omitempty"`
	PenaltySeconds uint32                                         `protobuf:"varint,3,opt,name=penalty_seconds,json=penaltySeconds" json:"penalty_seconds"`
	PenaltyReason  uint32                                         `protobuf:"varint,4,opt,name=penalty_reason,json=penaltyReason" json:"penalty_reason"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{38}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetAbandonedMatch() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.AbandonedMatch
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltySeconds() uint32 {
	if m != nil {
		return m.PenaltySeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) GetPenaltyReason() uint32 {
	if m != nil {
		return m.PenaltyReason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingServer2GCKick struct {
	AccountId   uint32                                         `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Reservation *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve `protobuf:"bytes,2,opt,name=reservation" json:"reservation,omitempty"`
	Reason      uint32                                         `protobuf:"varint,3,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingServer2GCKick{}
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingServer2GCKick) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{39}
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReservation() *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve {
	if m != nil {
		return m.Reservation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate struct {
	Rankings []*PlayerRankingInfo `protobuf:"bytes,1,rep,name=rankings" json:"rankings,omitempty"`
	MatchId  uint64               `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id"`
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{40}
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetRankings() []*PlayerRankingInfo {
	if m != nil {
		return m.Rankings
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate struct {
	MainPostUrl string `protobuf:"bytes,1,opt,name=main_post_url,json=mainPostUrl" json:"main_post_url"`
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Reset() {
	*m = CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate{}
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{41}
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) GetMainPostUrl() string {
	if m != nil {
		return m.MainPostUrl
	}
	return ""
}

type CMsgGCCStrike15V2_ServerNotificationForUserPenalty struct {
	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Reason    uint32 `protobuf:"varint,2,opt,name=reason" json:"reason"`
	Seconds   uint32 `protobuf:"varint,3,opt,name=seconds" json:"seconds"`
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Reset() {
	*m = CMsgGCCStrike15V2_ServerNotificationForUserPenalty{}
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{42}
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) GetSeconds() uint32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportPlayer struct {
	AccountId     uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	RptAimbot     uint32 `protobuf:"varint,2,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot"`
	RptWallhack   uint32 `protobuf:"varint,3,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack"`
	RptSpeedhack  uint32 `protobuf:"varint,4,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack"`
	RptTeamharm   uint32 `protobuf:"varint,5,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm"`
	RptTextabuse  uint32 `protobuf:"varint,6,opt,name=rpt_textabuse,json=rptTextabuse" json:"rpt_textabuse"`
	RptVoiceabuse uint32 `protobuf:"varint,7,opt,name=rpt_voiceabuse,json=rptVoiceabuse" json:"rpt_voiceabuse"`
	MatchId       uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Reset()         { *m = CMsgGCCStrike15V2_ClientReportPlayer{} }
func (m *CMsgGCCStrike15V2_ClientReportPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportPlayer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{43}
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptAimbot() uint32 {
	if m != nil {
		return m.RptAimbot
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptWallhack() uint32 {
	if m != nil {
		return m.RptWallhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptSpeedhack() uint32 {
	if m != nil {
		return m.RptSpeedhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTeamharm() uint32 {
	if m != nil {
		return m.RptTeamharm
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptTextabuse() uint32 {
	if m != nil {
		return m.RptTextabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetRptVoiceabuse() uint32 {
	if m != nil {
		return m.RptVoiceabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientCommendPlayer struct {
	AccountId    uint32                  `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	MatchId      uint64                  `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
	Commendation *PlayerCommendationInfo `protobuf:"bytes,9,opt,name=commendation" json:"commendation,omitempty"`
	Tokens       uint32                  `protobuf:"varint,10,opt,name=tokens" json:"tokens"`
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Reset()         { *m = CMsgGCCStrike15V2_ClientCommendPlayer{} }
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientCommendPlayer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientCommendPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{44}
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) GetTokens() uint32 {
	if m != nil {
		return m.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportServer struct {
	RptPoorperf       uint32 `protobuf:"varint,1,opt,name=rpt_poorperf,json=rptPoorperf" json:"rpt_poorperf"`
	RptAbusivemodels  uint32 `protobuf:"varint,2,opt,name=rpt_abusivemodels,json=rptAbusivemodels" json:"rpt_abusivemodels"`
	RptBadmotd        uint32 `protobuf:"varint,3,opt,name=rpt_badmotd,json=rptBadmotd" json:"rpt_badmotd"`
	RptListingabuse   uint32 `protobuf:"varint,4,opt,name=rpt_listingabuse,json=rptListingabuse" json:"rpt_listingabuse"`
	RptInventoryabuse uint32 `protobuf:"varint,5,opt,name=rpt_inventoryabuse,json=rptInventoryabuse" json:"rpt_inventoryabuse"`
	MatchId           uint64 `protobuf:"varint,8,opt,name=match_id,json=matchId" json:"match_id"`
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Reset()         { *m = CMsgGCCStrike15V2_ClientReportServer{} }
func (m *CMsgGCCStrike15V2_ClientReportServer) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportServer) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportServer) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{45}
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptPoorperf() uint32 {
	if m != nil {
		return m.RptPoorperf
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptAbusivemodels() uint32 {
	if m != nil {
		return m.RptAbusivemodels
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptBadmotd() uint32 {
	if m != nil {
		return m.RptBadmotd
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptListingabuse() uint32 {
	if m != nil {
		return m.RptListingabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetRptInventoryabuse() uint32 {
	if m != nil {
		return m.RptInventoryabuse
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportServer) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientReportResponse struct {
	ConfirmationId uint64 `protobuf:"varint,1,opt,name=confirmation_id,json=confirmationId" json:"confirmation_id"`
	AccountId      uint32 `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	ServerIp       uint32 `protobuf:"varint,3,opt,name=server_ip,json=serverIp" json:"server_ip"`
	ResponseType   uint32 `protobuf:"varint,4,opt,name=response_type,json=responseType" json:"response_type"`
	ResponseResult uint32 `protobuf:"varint,5,opt,name=response_result,json=responseResult" json:"response_result"`
	Tokens         uint32 `protobuf:"varint,6,opt,name=tokens" json:"tokens"`
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Reset() {
	*m = CMsgGCCStrike15V2_ClientReportResponse{}
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientReportResponse) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{46}
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetConfirmationId() uint64 {
	if m != nil {
		return m.ConfirmationId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetResponseType() uint32 {
	if m != nil {
		return m.ResponseType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetResponseResult() uint32 {
	if m != nil {
		return m.ResponseResult
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) GetTokens() uint32 {
	if m != nil {
		return m.Tokens
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestWatchInfoFriends struct {
	RequestId  uint32   `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountIds []uint32 `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	Serverid   uint64   `protobuf:"varint,3,opt,name=serverid" json:"serverid"`
	Matchid    uint64   `protobuf:"varint,4,opt,name=matchid" json:"matchid"`
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestWatchInfoFriends{}
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{47}
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

type WatchableMatchInfo struct {
	ServerIp            uint32 `protobuf:"varint,1,opt,name=server_ip,json=serverIp" json:"server_ip"`
	TvPort              uint32 `protobuf:"varint,2,opt,name=tv_port,json=tvPort" json:"tv_port"`
	TvSpectators        uint32 `protobuf:"varint,3,opt,name=tv_spectators,json=tvSpectators" json:"tv_spectators"`
	TvTime              uint32 `protobuf:"varint,4,opt,name=tv_time,json=tvTime" json:"tv_time"`
	TvWatchPassword     []byte `protobuf:"bytes,5,opt,name=tv_watch_password,json=tvWatchPassword" json:"tv_watch_password"`
	ClDecryptdataKey    uint64 `protobuf:"varint,6,opt,name=cl_decryptdata_key,json=clDecryptdataKey" json:"cl_decryptdata_key"`
	ClDecryptdataKeyPub uint64 `protobuf:"varint,7,opt,name=cl_decryptdata_key_pub,json=clDecryptdataKeyPub" json:"cl_decryptdata_key_pub"`
	GameType            uint32 `protobuf:"varint,8,opt,name=game_type,json=gameType" json:"game_type"`
	GameMapgroup        string `protobuf:"bytes,9,opt,name=game_mapgroup,json=gameMapgroup" json:"game_mapgroup"`
	GameMap             string `protobuf:"bytes,10,opt,name=game_map,json=gameMap" json:"game_map"`
	ServerId            uint64 `protobuf:"varint,11,opt,name=server_id,json=serverId" json:"server_id"`
	MatchId             uint64 `protobuf:"varint,12,opt,name=match_id,json=matchId" json:"match_id"`
	ReservationId       uint64 `protobuf:"varint,13,opt,name=reservation_id,json=reservationId" json:"reservation_id"`
}

func (m *WatchableMatchInfo) Reset()         { *m = WatchableMatchInfo{} }
func (m *WatchableMatchInfo) String() string { return proto.CompactTextString(m) }
func (*WatchableMatchInfo) ProtoMessage()    {}
func (*WatchableMatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{48}
}

func (m *WatchableMatchInfo) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvPort() uint32 {
	if m != nil {
		return m.TvPort
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvSpectators() uint32 {
	if m != nil {
		return m.TvSpectators
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvTime() uint32 {
	if m != nil {
		return m.TvTime
	}
	return 0
}

func (m *WatchableMatchInfo) GetTvWatchPassword() []byte {
	if m != nil {
		return m.TvWatchPassword
	}
	return nil
}

func (m *WatchableMatchInfo) GetClDecryptdataKey() uint64 {
	if m != nil {
		return m.ClDecryptdataKey
	}
	return 0
}

func (m *WatchableMatchInfo) GetClDecryptdataKeyPub() uint64 {
	if m != nil {
		return m.ClDecryptdataKeyPub
	}
	return 0
}

func (m *WatchableMatchInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *WatchableMatchInfo) GetGameMapgroup() string {
	if m != nil {
		return m.GameMapgroup
	}
	return ""
}

func (m *WatchableMatchInfo) GetGameMap() string {
	if m != nil {
		return m.GameMap
	}
	return ""
}

func (m *WatchableMatchInfo) GetServerId() uint64 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *WatchableMatchInfo) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *WatchableMatchInfo) GetReservationId() uint64 {
	if m != nil {
		return m.ReservationId
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestJoinFriendData struct {
	Version   uint32                                         `protobuf:"varint,1,opt,name=version" json:"version"`
	AccountId uint32                                         `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	JoinToken uint32                                         `protobuf:"varint,3,opt,name=join_token,json=joinToken" json:"join_token"`
	JoinIpp   uint32                                         `protobuf:"varint,4,opt,name=join_ipp,json=joinIpp" json:"join_ipp"`
	Res       *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,5,opt,name=res" json:"res,omitempty"`
	Errormsg  string                                         `protobuf:"bytes,6,opt,name=errormsg" json:"errormsg"`
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestJoinFriendData{}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestJoinFriendData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{49}
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinToken() uint32 {
	if m != nil {
		return m.JoinToken
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetJoinIpp() uint32 {
	if m != nil {
		return m.JoinIpp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) GetErrormsg() string {
	if m != nil {
		return m.Errormsg
	}
	return ""
}

type CMsgGCCStrike15V2_ClientRequestJoinServerData struct {
	Version    uint32                                         `protobuf:"varint,1,opt,name=version" json:"version"`
	AccountId  uint32                                         `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	Serverid   uint64                                         `protobuf:"varint,3,opt,name=serverid" json:"serverid"`
	ServerIp   uint32                                         `protobuf:"varint,4,opt,name=server_ip,json=serverIp" json:"server_ip"`
	ServerPort uint32                                         `protobuf:"varint,5,opt,name=server_port,json=serverPort" json:"server_port"`
	Res        *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve `protobuf:"bytes,6,opt,name=res" json:"res,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestJoinServerData{}
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestJoinServerData) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{50}
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerid() uint64 {
	if m != nil {
		return m.Serverid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) GetRes() *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve {
	if m != nil {
		return m.Res
	}
	return nil
}

type CMsgGCCstrike15V2_ClientRequestNewMission struct {
	MissionId  uint32 `protobuf:"varint,2,opt,name=mission_id,json=missionId" json:"mission_id"`
	CampaignId uint32 `protobuf:"varint,3,opt,name=campaign_id,json=campaignId" json:"campaign_id"`
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Reset() {
	*m = CMsgGCCstrike15V2_ClientRequestNewMission{}
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCstrike15V2_ClientRequestNewMission) ProtoMessage()    {}
func (*CMsgGCCstrike15V2_ClientRequestNewMission) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{51}
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) GetMissionId() uint32 {
	if m != nil {
		return m.MissionId
	}
	return 0
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) GetCampaignId() uint32 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

type CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded struct {
	XpProgressData []*XpProgressData `protobuf:"bytes,1,rep,name=xp_progress_data,json=xpProgressData" json:"xp_progress_data,omitempty"`
	AccountId      uint32            `protobuf:"varint,2,opt,name=account_id,json=accountId" json:"account_id"`
	CurrentXp      uint32            `protobuf:"varint,3,opt,name=current_xp,json=currentXp" json:"current_xp"`
	CurrentLevel   uint32            `protobuf:"varint,4,opt,name=current_level,json=currentLevel" json:"current_level"`
	UpgradedDefidx uint32            `protobuf:"varint,5,opt,name=upgraded_defidx,json=upgradedDefidx" json:"upgraded_defidx"`
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Reset() {
	*m = CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded{}
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) ProtoMessage() {}
func (*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{52}
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetXpProgressData() []*XpProgressData {
	if m != nil {
		return m.XpProgressData
	}
	return nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentXp() uint32 {
	if m != nil {
		return m.CurrentXp
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetCurrentLevel() uint32 {
	if m != nil {
		return m.CurrentLevel
	}
	return 0
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) GetUpgradedDefidx() uint32 {
	if m != nil {
		return m.UpgradedDefidx
	}
	return 0
}

type CMsgGCCStrike15V2_WatchInfoUsers struct {
	RequestId           uint32                `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountIds          []uint32              `protobuf:"varint,2,rep,name=account_ids,json=accountIds" json:"account_ids,omitempty"`
	WatchableMatchInfos []*WatchableMatchInfo `protobuf:"bytes,3,rep,name=watchable_match_infos,json=watchableMatchInfos" json:"watchable_match_infos,omitempty"`
	ExtendedTimeout     uint32                `protobuf:"varint,5,opt,name=extended_timeout,json=extendedTimeout" json:"extended_timeout"`
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Reset()         { *m = CMsgGCCStrike15V2_WatchInfoUsers{} }
func (m *CMsgGCCStrike15V2_WatchInfoUsers) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_WatchInfoUsers) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_WatchInfoUsers) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{53}
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetAccountIds() []uint32 {
	if m != nil {
		return m.AccountIds
	}
	return nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetWatchableMatchInfos() []*WatchableMatchInfo {
	if m != nil {
		return m.WatchableMatchInfos
	}
	return nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) GetExtendedTimeout() uint32 {
	if m != nil {
		return m.ExtendedTimeout
	}
	return 0
}

type CMsgGCCStrike15V2_ClientRequestPlayersProfile struct {
	RequestId_Deprecated  uint32   `protobuf:"varint,1,opt,name=request_id__deprecated,json=requestIdDeprecated" json:"request_id__deprecated"`
	AccountIds_Deprecated []uint32 `protobuf:"varint,2,rep,name=account_ids__deprecated,json=accountIdsDeprecated" json:"account_ids__deprecated,omitempty"`
	AccountId             uint32   `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id"`
	RequestLevel          uint32   `protobuf:"varint,4,opt,name=request_level,json=requestLevel" json:"request_level"`
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Reset() {
	*m = CMsgGCCStrike15V2_ClientRequestPlayersProfile{}
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientRequestPlayersProfile) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{54}
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestId_Deprecated() uint32 {
	if m != nil {
		return m.RequestId_Deprecated
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountIds_Deprecated() []uint32 {
	if m != nil {
		return m.AccountIds_Deprecated
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) GetRequestLevel() uint32 {
	if m != nil {
		return m.RequestLevel
	}
	return 0
}

type CMsgGCCStrike15V2_PlayersProfile struct {
	RequestId       uint32                                         `protobuf:"varint,1,opt,name=request_id,json=requestId" json:"request_id"`
	AccountProfiles []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello `protobuf:"bytes,2,rep,name=account_profiles,json=accountProfiles" json:"account_profiles,omitempty"`
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Reset()         { *m = CMsgGCCStrike15V2_PlayersProfile{} }
func (m *CMsgGCCStrike15V2_PlayersProfile) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_PlayersProfile) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_PlayersProfile) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{55}
}

func (m *CMsgGCCStrike15V2_PlayersProfile) GetRequestId() uint32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayersProfile) GetAccountProfiles() []*CMsgGCCStrike15V2_MatchmakingGC2ClientHello {
	if m != nil {
		return m.AccountProfiles
	}
	return nil
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate struct {
	Caseid       uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Suspectid    uint32 `protobuf:"varint,3,opt,name=suspectid" json:"suspectid"`
	Fractionid   uint32 `protobuf:"varint,4,opt,name=fractionid" json:"fractionid"`
	RptAimbot    uint32 `protobuf:"varint,5,opt,name=rpt_aimbot,json=rptAimbot" json:"rpt_aimbot"`
	RptWallhack  uint32 `protobuf:"varint,6,opt,name=rpt_wallhack,json=rptWallhack" json:"rpt_wallhack"`
	RptSpeedhack uint32 `protobuf:"varint,7,opt,name=rpt_speedhack,json=rptSpeedhack" json:"rpt_speedhack"`
	RptTeamharm  uint32 `protobuf:"varint,8,opt,name=rpt_teamharm,json=rptTeamharm" json:"rpt_teamharm"`
	Reason       uint32 `protobuf:"varint,9,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{56}
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetSuspectid() uint32 {
	if m != nil {
		return m.Suspectid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetFractionid() uint32 {
	if m != nil {
		return m.Fractionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptAimbot() uint32 {
	if m != nil {
		return m.RptAimbot
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptWallhack() uint32 {
	if m != nil {
		return m.RptWallhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptSpeedhack() uint32 {
	if m != nil {
		return m.RptSpeedhack
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetRptTeamharm() uint32 {
	if m != nil {
		return m.RptTeamharm
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment struct {
	Caseid            uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Caseurl           string `protobuf:"bytes,2,opt,name=caseurl" json:"caseurl"`
	Verdict           uint32 `protobuf:"varint,3,opt,name=verdict" json:"verdict"`
	Timestamp         uint32 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp"`
	Throttleseconds   uint32 `protobuf:"varint,5,opt,name=throttleseconds" json:"throttleseconds"`
	Suspectid         uint32 `protobuf:"varint,6,opt,name=suspectid" json:"suspectid"`
	Fractionid        uint32 `protobuf:"varint,7,opt,name=fractionid" json:"fractionid"`
	Numrounds         uint32 `protobuf:"varint,8,opt,name=numrounds" json:"numrounds"`
	Fractionrounds    uint32 `protobuf:"varint,9,opt,name=fractionrounds" json:"fractionrounds"`
	Streakconvictions int32  `protobuf:"varint,10,opt,name=streakconvictions" json:"streakconvictions"`
	Reason            uint32 `protobuf:"varint,11,opt,name=reason" json:"reason"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{57}
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetCaseurl() string {
	if m != nil {
		return m.Caseurl
	}
	return ""
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetVerdict() uint32 {
	if m != nil {
		return m.Verdict
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetThrottleseconds() uint32 {
	if m != nil {
		return m.Throttleseconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetSuspectid() uint32 {
	if m != nil {
		return m.Suspectid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionid() uint32 {
	if m != nil {
		return m.Fractionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetNumrounds() uint32 {
	if m != nil {
		return m.Numrounds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetFractionrounds() uint32 {
	if m != nil {
		return m.Fractionrounds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetStreakconvictions() int32 {
	if m != nil {
		return m.Streakconvictions
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type CMsgGCCStrike15V2_PlayerOverwatchCaseStatus struct {
	Caseid   uint64 `protobuf:"varint,1,opt,name=caseid" json:"caseid"`
	Statusid uint32 `protobuf:"varint,2,opt,name=statusid" json:"statusid"`
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Reset() {
	*m = CMsgGCCStrike15V2_PlayerOverwatchCaseStatus{}
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) ProtoMessage() {}
func (*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{58}
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) GetStatusid() uint32 {
	if m != nil {
		return m.Statusid
	}
	return 0
}

type CClientHeaderOverwatchEvidence struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Caseid    uint64 `protobuf:"varint,2,opt,name=caseid" json:"caseid"`
}

func (m *CClientHeaderOverwatchEvidence) Reset()         { *m = CClientHeaderOverwatchEvidence{} }
func (m *CClientHeaderOverwatchEvidence) String() string { return proto.CompactTextString(m) }
func (*CClientHeaderOverwatchEvidence) ProtoMessage()    {}
func (*CClientHeaderOverwatchEvidence) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{59}
}

func (m *CClientHeaderOverwatchEvidence) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CClientHeaderOverwatchEvidence) GetCaseid() uint64 {
	if m != nil {
		return m.Caseid
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTextMsg struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id"`
	Type    uint32 `protobuf:"varint,2,opt,name=type" json:"type"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload" json:"payload"`
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Reset()         { *m = CMsgGCCStrike15V2_GC2ClientTextMsg{} }
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GC2ClientTextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{60}
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCTextMsg struct {
	Id   uint32   `protobuf:"varint,1,opt,name=id" json:"id"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Reset()         { *m = CMsgGCCStrike15V2_Client2GCTextMsg{} }
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Client2GCTextMsg) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Client2GCTextMsg) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{61}
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) GetArgs() [][]byte {
	if m != nil {
		return m.Args
	}
	return nil
}

type CMsgGCCStrike15V2_MatchEndRunRewardDrops struct {
	Serverinfo        *CMsgGCCStrike15V2_MatchmakingServerReservationResponse `protobuf:"bytes,3,opt,name=serverinfo" json:"serverinfo,omitempty"`
	MatchEndQuestData *CMsgGC_ServerQuestUpdateData                           `protobuf:"bytes,4,opt,name=match_end_quest_data,json=matchEndQuestData" json:"match_end_quest_data,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Reset() {
	*m = CMsgGCCStrike15V2_MatchEndRunRewardDrops{}
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchEndRunRewardDrops) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{62}
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetServerinfo() *CMsgGCCStrike15V2_MatchmakingServerReservationResponse {
	if m != nil {
		return m.Serverinfo
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) GetMatchEndQuestData() *CMsgGC_ServerQuestUpdateData {
	if m != nil {
		return m.MatchEndQuestData
	}
	return nil
}

type CEconItemPreviewDataBlock struct {
	Accountid          uint32                               `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Itemid             uint64                               `protobuf:"varint,2,opt,name=itemid" json:"itemid"`
	Defindex           uint32                               `protobuf:"varint,3,opt,name=defindex" json:"defindex"`
	Paintindex         uint32                               `protobuf:"varint,4,opt,name=paintindex" json:"paintindex"`
	Rarity             uint32                               `protobuf:"varint,5,opt,name=rarity" json:"rarity"`
	Quality            uint32                               `protobuf:"varint,6,opt,name=quality" json:"quality"`
	Paintwear          uint32                               `protobuf:"varint,7,opt,name=paintwear" json:"paintwear"`
	Paintseed          uint32                               `protobuf:"varint,8,opt,name=paintseed" json:"paintseed"`
	Killeaterscoretype uint32                               `protobuf:"varint,9,opt,name=killeaterscoretype" json:"killeaterscoretype"`
	Killeatervalue     uint32                               `protobuf:"varint,10,opt,name=killeatervalue" json:"killeatervalue"`
	Customname         string                               `protobuf:"bytes,11,opt,name=customname" json:"customname"`
	Stickers           []*CEconItemPreviewDataBlock_Sticker `protobuf:"bytes,12,rep,name=stickers" json:"stickers,omitempty"`
	Inventory          uint32                               `protobuf:"varint,13,opt,name=inventory" json:"inventory"`
	Origin             uint32                               `protobuf:"varint,14,opt,name=origin" json:"origin"`
	Questid            uint32                               `protobuf:"varint,15,opt,name=questid" json:"questid"`
	Dropreason         uint32                               `protobuf:"varint,16,opt,name=dropreason" json:"dropreason"`
}

func (m *CEconItemPreviewDataBlock) Reset()         { *m = CEconItemPreviewDataBlock{} }
func (m *CEconItemPreviewDataBlock) String() string { return proto.CompactTextString(m) }
func (*CEconItemPreviewDataBlock) ProtoMessage()    {}
func (*CEconItemPreviewDataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{63}
}

func (m *CEconItemPreviewDataBlock) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetDefindex() uint32 {
	if m != nil {
		return m.Defindex
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintindex() uint32 {
	if m != nil {
		return m.Paintindex
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetRarity() uint32 {
	if m != nil {
		return m.Rarity
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintwear() uint32 {
	if m != nil {
		return m.Paintwear
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetPaintseed() uint32 {
	if m != nil {
		return m.Paintseed
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetKilleaterscoretype() uint32 {
	if m != nil {
		return m.Killeaterscoretype
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetKilleatervalue() uint32 {
	if m != nil {
		return m.Killeatervalue
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetCustomname() string {
	if m != nil {
		return m.Customname
	}
	return ""
}

func (m *CEconItemPreviewDataBlock) GetStickers() []*CEconItemPreviewDataBlock_Sticker {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *CEconItemPreviewDataBlock) GetInventory() uint32 {
	if m != nil {
		return m.Inventory
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetQuestid() uint32 {
	if m != nil {
		return m.Questid
	}
	return 0
}

func (m *CEconItemPreviewDataBlock) GetDropreason() uint32 {
	if m != nil {
		return m.Dropreason
	}
	return 0
}

type CEconItemPreviewDataBlock_Sticker struct {
	Slot      uint32  `protobuf:"varint,1,opt,name=slot" json:"slot"`
	StickerId uint32  `protobuf:"varint,2,opt,name=sticker_id,json=stickerId" json:"sticker_id"`
	Wear      float32 `protobuf:"fixed32,3,opt,name=wear" json:"wear"`
	Scale     float32 `protobuf:"fixed32,4,opt,name=scale" json:"scale"`
	Rotation  float32 `protobuf:"fixed32,5,opt,name=rotation" json:"rotation"`
}

func (m *CEconItemPreviewDataBlock_Sticker) Reset()         { *m = CEconItemPreviewDataBlock_Sticker{} }
func (m *CEconItemPreviewDataBlock_Sticker) String() string { return proto.CompactTextString(m) }
func (*CEconItemPreviewDataBlock_Sticker) ProtoMessage()    {}
func (*CEconItemPreviewDataBlock_Sticker) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{63, 0}
}

func (m *CEconItemPreviewDataBlock_Sticker) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetStickerId() uint32 {
	if m != nil {
		return m.StickerId
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetWear() float32 {
	if m != nil {
		return m.Wear
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetScale() float32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *CEconItemPreviewDataBlock_Sticker) GetRotation() float32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

type CMsgGCCStrike15V2_MatchEndRewardDropsNotification struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,6,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Reset() {
	*m = CMsgGCCStrike15V2_MatchEndRewardDropsNotification{}
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{64}
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgItemAcknowledged struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgItemAcknowledged) Reset()         { *m = CMsgItemAcknowledged{} }
func (m *CMsgItemAcknowledged) String() string { return proto.CompactTextString(m) }
func (*CMsgItemAcknowledged) ProtoMessage()    {}
func (*CMsgItemAcknowledged) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{65}
}

func (m *CMsgItemAcknowledged) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest struct {
	ParamS uint64 `protobuf:"varint,1,opt,name=param_s,json=paramS" json:"param_s"`
	ParamA uint64 `protobuf:"varint,2,opt,name=param_a,json=paramA" json:"param_a"`
	ParamD uint64 `protobuf:"varint,3,opt,name=param_d,json=paramD" json:"param_d"`
	ParamM uint64 `protobuf:"varint,4,opt,name=param_m,json=paramM" json:"param_m"`
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest{}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{66}
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamS() uint64 {
	if m != nil {
		return m.ParamS
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamA() uint64 {
	if m != nil {
		return m.ParamA
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamD() uint64 {
	if m != nil {
		return m.ParamD
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) GetParamM() uint64 {
	if m != nil {
		return m.ParamM
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse struct {
	Iteminfo *CEconItemPreviewDataBlock `protobuf:"bytes,1,opt,name=iteminfo" json:"iteminfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse{}
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{67}
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) GetIteminfo() *CEconItemPreviewDataBlock {
	if m != nil {
		return m.Iteminfo
	}
	return nil
}

type CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification struct {
	MatchId    uint64   `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id"`
	Defindex   uint32   `protobuf:"varint,2,opt,name=defindex" json:"defindex"`
	Accountids []uint32 `protobuf:"varint,3,rep,name=accountids" json:"accountids,omitempty"`
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Reset() {
	*m = CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification{}
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) ProtoMessage() {}
func (*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{68}
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetDefindex() uint32 {
	if m != nil {
		return m.Defindex
	}
	return 0
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) GetAccountids() []uint32 {
	if m != nil {
		return m.Accountids
	}
	return nil
}

type CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames struct {
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{69}
}

type CMsgGCCStrike15V2_MatchListRequestLiveGameForUser struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestLiveGameForUser{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{70}
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestRecentUserGames struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestRecentUserGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{71}
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestTournamentGames struct {
	Eventid int32 `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestTournamentGames{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestTournamentGames) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{72}
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) GetEventid() int32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

type CMsgGCCStrike15V2_MatchListRequestFullGameInfo struct {
	Matchid   uint64 `protobuf:"varint,1,opt,name=matchid" json:"matchid"`
	Outcomeid uint64 `protobuf:"varint,2,opt,name=outcomeid" json:"outcomeid"`
	Token     uint32 `protobuf:"varint,3,opt,name=token" json:"token"`
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Reset() {
	*m = CMsgGCCStrike15V2_MatchListRequestFullGameInfo{}
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{73}
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetOutcomeid() uint64 {
	if m != nil {
		return m.Outcomeid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) GetToken() uint32 {
	if m != nil {
		return m.Token
	}
	return 0
}

type CDataGCCStrike15V2_MatchInfo struct {
	Matchid            uint64                                           `protobuf:"varint,1,opt,name=matchid" json:"matchid"`
	Matchtime          uint32                                           `protobuf:"varint,2,opt,name=matchtime" json:"matchtime"`
	Watchablematchinfo *WatchableMatchInfo                              `protobuf:"bytes,3,opt,name=watchablematchinfo" json:"watchablematchinfo,omitempty"`
	RoundstatsLegacy   *CMsgGCCStrike15V2_MatchmakingServerRoundStats   `protobuf:"bytes,4,opt,name=roundstats_legacy,json=roundstatsLegacy" json:"roundstats_legacy,omitempty"`
	Roundstatsall      []*CMsgGCCStrike15V2_MatchmakingServerRoundStats `protobuf:"bytes,5,rep,name=roundstatsall" json:"roundstatsall,omitempty"`
}

func (m *CDataGCCStrike15V2_MatchInfo) Reset()         { *m = CDataGCCStrike15V2_MatchInfo{} }
func (m *CDataGCCStrike15V2_MatchInfo) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_MatchInfo) ProtoMessage()    {}
func (*CDataGCCStrike15V2_MatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{74}
}

func (m *CDataGCCStrike15V2_MatchInfo) GetMatchid() uint64 {
	if m != nil {
		return m.Matchid
	}
	return 0
}

func (m *CDataGCCStrike15V2_MatchInfo) GetMatchtime() uint32 {
	if m != nil {
		return m.Matchtime
	}
	return 0
}

func (m *CDataGCCStrike15V2_MatchInfo) GetWatchablematchinfo() *WatchableMatchInfo {
	if m != nil {
		return m.Watchablematchinfo
	}
	return nil
}

func (m *CDataGCCStrike15V2_MatchInfo) GetRoundstatsLegacy() *CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.RoundstatsLegacy
	}
	return nil
}

func (m *CDataGCCStrike15V2_MatchInfo) GetRoundstatsall() []*CMsgGCCStrike15V2_MatchmakingServerRoundStats {
	if m != nil {
		return m.Roundstatsall
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroupTeam struct {
	TeamId      int32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id"`
	Score       int32 `protobuf:"varint,2,opt,name=score" json:"score"`
	Correctpick bool  `protobuf:"varint,3,opt,name=correctpick" json:"correctpick"`
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Reset() {
	*m = CDataGCCStrike15V2_TournamentGroupTeam{}
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroupTeam) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroupTeam) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{75}
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetTeamId() int32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) GetCorrectpick() bool {
	if m != nil {
		return m.Correctpick
	}
	return false
}

type CDataGCCStrike15V2_TournamentGroup struct {
	Groupid           uint32                                      `protobuf:"varint,1,opt,name=groupid" json:"groupid"`
	Name              string                                      `protobuf:"bytes,2,opt,name=name" json:"name"`
	Desc              string                                      `protobuf:"bytes,3,opt,name=desc" json:"desc"`
	Picks_Deprecated  uint32                                      `protobuf:"varint,4,opt,name=picks__deprecated,json=picksDeprecated" json:"picks__deprecated"`
	Teams             []*CDataGCCStrike15V2_TournamentGroupTeam   `protobuf:"bytes,5,rep,name=teams" json:"teams,omitempty"`
	StageIds          []int32                                     `protobuf:"varint,6,rep,name=stage_ids,json=stageIds" json:"stage_ids,omitempty"`
	Picklockuntiltime uint32                                      `protobuf:"varint,7,opt,name=picklockuntiltime" json:"picklockuntiltime"`
	Pickableteams     uint32                                      `protobuf:"varint,8,opt,name=pickableteams" json:"pickableteams"`
	PointsPerPick     uint32                                      `protobuf:"varint,9,opt,name=points_per_pick,json=pointsPerPick" json:"points_per_pick"`
	Picks             []*CDataGCCStrike15V2_TournamentGroup_Picks `protobuf:"bytes,10,rep,name=picks" json:"picks,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentGroup) Reset()         { *m = CDataGCCStrike15V2_TournamentGroup{} }
func (m *CDataGCCStrike15V2_TournamentGroup) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroup) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroup) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{76}
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetGroupid() uint32 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicks_Deprecated() uint32 {
	if m != nil {
		return m.Picks_Deprecated
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetTeams() []*CDataGCCStrike15V2_TournamentGroupTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetStageIds() []int32 {
	if m != nil {
		return m.StageIds
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicklockuntiltime() uint32 {
	if m != nil {
		return m.Picklockuntiltime
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPickableteams() uint32 {
	if m != nil {
		return m.Pickableteams
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPointsPerPick() uint32 {
	if m != nil {
		return m.PointsPerPick
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentGroup) GetPicks() []*CDataGCCStrike15V2_TournamentGroup_Picks {
	if m != nil {
		return m.Picks
	}
	return nil
}

type CDataGCCStrike15V2_TournamentGroup_Picks struct {
	Pickids []int32 `protobuf:"varint,1,rep,name=pickids" json:"pickids,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Reset() {
	*m = CDataGCCStrike15V2_TournamentGroup_Picks{}
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentGroup_Picks) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentGroup_Picks) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{76, 0}
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) GetPickids() []int32 {
	if m != nil {
		return m.Pickids
	}
	return nil
}

type CDataGCCStrike15V2_TournamentSection struct {
	Sectionid uint32                                `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Name      string                                `protobuf:"bytes,2,opt,name=name" json:"name"`
	Desc      string                                `protobuf:"bytes,3,opt,name=desc" json:"desc"`
	Groups    []*CDataGCCStrike15V2_TournamentGroup `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentSection) Reset()         { *m = CDataGCCStrike15V2_TournamentSection{} }
func (m *CDataGCCStrike15V2_TournamentSection) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentSection) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentSection) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{77}
}

func (m *CDataGCCStrike15V2_TournamentSection) GetSectionid() uint32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CDataGCCStrike15V2_TournamentSection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentSection) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CDataGCCStrike15V2_TournamentSection) GetGroups() []*CDataGCCStrike15V2_TournamentGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

type CDataGCCStrike15V2_TournamentInfo struct {
	Sections        []*CDataGCCStrike15V2_TournamentSection `protobuf:"bytes,1,rep,name=sections" json:"sections,omitempty"`
	TournamentEvent *TournamentEvent                        `protobuf:"bytes,2,opt,name=tournament_event,json=tournamentEvent" json:"tournament_event,omitempty"`
	TournamentTeams []*TournamentTeam                       `protobuf:"bytes,3,rep,name=tournament_teams,json=tournamentTeams" json:"tournament_teams,omitempty"`
}

func (m *CDataGCCStrike15V2_TournamentInfo) Reset()         { *m = CDataGCCStrike15V2_TournamentInfo{} }
func (m *CDataGCCStrike15V2_TournamentInfo) String() string { return proto.CompactTextString(m) }
func (*CDataGCCStrike15V2_TournamentInfo) ProtoMessage()    {}
func (*CDataGCCStrike15V2_TournamentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{78}
}

func (m *CDataGCCStrike15V2_TournamentInfo) GetSections() []*CDataGCCStrike15V2_TournamentSection {
	if m != nil {
		return m.Sections
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) GetTournamentEvent() *TournamentEvent {
	if m != nil {
		return m.TournamentEvent
	}
	return nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) GetTournamentTeams() []*TournamentTeam {
	if m != nil {
		return m.TournamentTeams
	}
	return nil
}

type CMsgGCCStrike15V2_MatchList struct {
	Msgrequestid   uint32                             `protobuf:"varint,1,opt,name=msgrequestid" json:"msgrequestid"`
	Accountid      uint32                             `protobuf:"varint,2,opt,name=accountid" json:"accountid"`
	Servertime     uint32                             `protobuf:"varint,3,opt,name=servertime" json:"servertime"`
	Matches        []*CDataGCCStrike15V2_MatchInfo    `protobuf:"bytes,4,rep,name=matches" json:"matches,omitempty"`
	Streams        []*TournamentTeam                  `protobuf:"bytes,5,rep,name=streams" json:"streams,omitempty"`
	Tournamentinfo *CDataGCCStrike15V2_TournamentInfo `protobuf:"bytes,6,opt,name=tournamentinfo" json:"tournamentinfo,omitempty"`
}

func (m *CMsgGCCStrike15V2_MatchList) Reset()         { *m = CMsgGCCStrike15V2_MatchList{} }
func (m *CMsgGCCStrike15V2_MatchList) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_MatchList) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_MatchList) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{79}
}

func (m *CMsgGCCStrike15V2_MatchList) GetMsgrequestid() uint32 {
	if m != nil {
		return m.Msgrequestid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetServertime() uint32 {
	if m != nil {
		return m.Servertime
	}
	return 0
}

func (m *CMsgGCCStrike15V2_MatchList) GetMatches() []*CDataGCCStrike15V2_MatchInfo {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchList) GetStreams() []*TournamentTeam {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *CMsgGCCStrike15V2_MatchList) GetTournamentinfo() *CDataGCCStrike15V2_TournamentInfo {
	if m != nil {
		return m.Tournamentinfo
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions struct {
	EventId             uint32                                              `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	GroupMatchTeamPicks []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick `protobuf:"bytes,2,rep,name=group_match_team_picks,json=groupMatchTeamPicks" json:"group_match_team_picks,omitempty"`
}

func (m *CMsgGCCStrike15V2_Predictions) Reset()         { *m = CMsgGCCStrike15V2_Predictions{} }
func (m *CMsgGCCStrike15V2_Predictions) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Predictions) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Predictions) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{80}
}

func (m *CMsgGCCStrike15V2_Predictions) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions) GetGroupMatchTeamPicks() []*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick {
	if m != nil {
		return m.GroupMatchTeamPicks
	}
	return nil
}

type CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick struct {
	Sectionid int32  `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Groupid   int32  `protobuf:"varint,2,opt,name=groupid" json:"groupid"`
	Index     int32  `protobuf:"varint,3,opt,name=index" json:"index"`
	Teamid    int32  `protobuf:"varint,4,opt,name=teamid" json:"teamid"`
	Itemid    uint64 `protobuf:"varint,5,opt,name=itemid" json:"itemid"`
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Reset() {
	*m = CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{}
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{80, 0}
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetSectionid() int32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetGroupid() int32 {
	if m != nil {
		return m.Groupid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetTeamid() int32 {
	if m != nil {
		return m.Teamid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy struct {
	EventId uint32                                   `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id"`
	Teams   []*CMsgGCCStrike15V2_Fantasy_FantasyTeam `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (m *CMsgGCCStrike15V2_Fantasy) Reset()         { *m = CMsgGCCStrike15V2_Fantasy{} }
func (m *CMsgGCCStrike15V2_Fantasy) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{81}
}

func (m *CMsgGCCStrike15V2_Fantasy) GetEventId() uint32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy) GetTeams() []*CMsgGCCStrike15V2_Fantasy_FantasyTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

type CMsgGCCStrike15V2_Fantasy_FantasySlot struct {
	Type   int32  `protobuf:"varint,1,opt,name=type" json:"type"`
	Pick   int32  `protobuf:"varint,2,opt,name=pick" json:"pick"`
	Itemid uint64 `protobuf:"varint,3,opt,name=itemid" json:"itemid"`
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Reset()         { *m = CMsgGCCStrike15V2_Fantasy_FantasySlot{} }
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy_FantasySlot) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{81, 0}
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetPick() int32 {
	if m != nil {
		return m.Pick
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) GetItemid() uint64 {
	if m != nil {
		return m.Itemid
	}
	return 0
}

type CMsgGCCStrike15V2_Fantasy_FantasyTeam struct {
	Sectionid int32                                    `protobuf:"varint,1,opt,name=sectionid" json:"sectionid"`
	Slots     []*CMsgGCCStrike15V2_Fantasy_FantasySlot `protobuf:"bytes,2,rep,name=slots" json:"slots,omitempty"`
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Reset()         { *m = CMsgGCCStrike15V2_Fantasy_FantasyTeam{} }
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Fantasy_FantasyTeam) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{81, 1}
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSectionid() int32 {
	if m != nil {
		return m.Sectionid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) GetSlots() []*CMsgGCCStrike15V2_Fantasy_FantasySlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type CAttribute_String struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value"`
}

func (m *CAttribute_String) Reset()         { *m = CAttribute_String{} }
func (m *CAttribute_String) String() string { return proto.CompactTextString(m) }
func (*CAttribute_String) ProtoMessage()    {}
func (*CAttribute_String) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{82}
}

func (m *CAttribute_String) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CMsgGCToGCReloadVersions struct {
}

func (m *CMsgGCToGCReloadVersions) Reset()         { *m = CMsgGCToGCReloadVersions{} }
func (m *CMsgGCToGCReloadVersions) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToGCReloadVersions) ProtoMessage()    {}
func (*CMsgGCToGCReloadVersions) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{83}
}

type CMsgCStrike15Welcome struct {
	StoreItemHash           uint32 `protobuf:"varint,5,opt,name=store_item_hash,json=storeItemHash" json:"store_item_hash"`
	Timeplayedconsecutively uint32 `protobuf:"varint,6,opt,name=timeplayedconsecutively" json:"timeplayedconsecutively"`
	TimeFirstPlayed         uint32 `protobuf:"varint,10,opt,name=time_first_played,json=timeFirstPlayed" json:"time_first_played"`
	LastTimePlayed          uint32 `protobuf:"varint,12,opt,name=last_time_played,json=lastTimePlayed" json:"last_time_played"`
	LastIpAddress           uint32 `protobuf:"varint,13,opt,name=last_ip_address,json=lastIpAddress" json:"last_ip_address"`
	Gscookieid              uint64 `protobuf:"varint,18,opt,name=gscookieid" json:"gscookieid"`
	Uniqueid                uint64 `protobuf:"varint,19,opt,name=uniqueid" json:"uniqueid"`
}

func (m *CMsgCStrike15Welcome) Reset()         { *m = CMsgCStrike15Welcome{} }
func (m *CMsgCStrike15Welcome) String() string { return proto.CompactTextString(m) }
func (*CMsgCStrike15Welcome) ProtoMessage()    {}
func (*CMsgCStrike15Welcome) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{84}
}

func (m *CMsgCStrike15Welcome) GetStoreItemHash() uint32 {
	if m != nil {
		return m.StoreItemHash
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetTimeplayedconsecutively() uint32 {
	if m != nil {
		return m.Timeplayedconsecutively
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetTimeFirstPlayed() uint32 {
	if m != nil {
		return m.TimeFirstPlayed
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetLastTimePlayed() uint32 {
	if m != nil {
		return m.LastTimePlayed
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetLastIpAddress() uint32 {
	if m != nil {
		return m.LastIpAddress
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetGscookieid() uint64 {
	if m != nil {
		return m.Gscookieid
	}
	return 0
}

func (m *CMsgCStrike15Welcome) GetUniqueid() uint64 {
	if m != nil {
		return m.Uniqueid
	}
	return 0
}

type CMsgGCCStrike15V2_ClientVarValueNotificationInfo struct {
	ValueName    string   `protobuf:"bytes,1,opt,name=value_name,json=valueName" json:"value_name"`
	ValueInt     int32    `protobuf:"varint,2,opt,name=value_int,json=valueInt" json:"value_int"`
	ServerAddr   uint32   `protobuf:"varint,3,opt,name=server_addr,json=serverAddr" json:"server_addr"`
	ServerPort   uint32   `protobuf:"varint,4,opt,name=server_port,json=serverPort" json:"server_port"`
	ChokedBlocks []string `protobuf:"bytes,5,rep,name=choked_blocks,json=chokedBlocks" json:"choked_blocks,omitempty"`
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Reset() {
	*m = CMsgGCCStrike15V2_ClientVarValueNotificationInfo{}
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{85}
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueName() string {
	if m != nil {
		return m.ValueName
	}
	return ""
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetValueInt() int32 {
	if m != nil {
		return m.ValueInt
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerAddr() uint32 {
	if m != nil {
		return m.ServerAddr
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) GetChokedBlocks() []string {
	if m != nil {
		return m.ChokedBlocks
	}
	return nil
}

type CMsgGCCStrike15V2_ServerVarValueNotificationInfo struct {
	Accountid  uint32   `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Viewangles []uint32 `protobuf:"varint,2,rep,name=viewangles" json:"viewangles,omitempty"`
	Type       uint32   `protobuf:"varint,3,opt,name=type" json:"type"`
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Reset() {
	*m = CMsgGCCStrike15V2_ServerVarValueNotificationInfo{}
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{86}
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetViewangles() []uint32 {
	if m != nil {
		return m.Viewangles
	}
	return nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CMsgGCCStrike15V2_GiftsLeaderboardRequest struct {
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardRequest{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{87}
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse struct {
	Servertime        uint32                                                             `protobuf:"varint,1,opt,name=servertime" json:"servertime"`
	TimePeriodSeconds uint32                                                             `protobuf:"varint,2,opt,name=time_period_seconds,json=timePeriodSeconds" json:"time_period_seconds"`
	TotalGiftsGiven   uint32                                                             `protobuf:"varint,3,opt,name=total_gifts_given,json=totalGiftsGiven" json:"total_gifts_given"`
	TotalGivers       uint32                                                             `protobuf:"varint,4,opt,name=total_givers,json=totalGivers" json:"total_givers"`
	Entries           []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardResponse{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{88}
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetServertime() uint32 {
	if m != nil {
		return m.Servertime
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTimePeriodSeconds() uint32 {
	if m != nil {
		return m.TimePeriodSeconds
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGiftsGiven() uint32 {
	if m != nil {
		return m.TotalGiftsGiven
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetTotalGivers() uint32 {
	if m != nil {
		return m.TotalGivers
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) GetEntries() []*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Gifts     uint32 `protobuf:"varint,2,opt,name=gifts" json:"gifts"`
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Reset() {
	*m = CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{}
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) ProtoMessage() {}
func (*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{88, 0}
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) GetGifts() uint32 {
	if m != nil {
		return m.Gifts
	}
	return 0
}

type CMsgGCCStrike15V2_ClientSubmitSurveyVote struct {
	SurveyId uint32 `protobuf:"varint,1,opt,name=survey_id,json=surveyId" json:"survey_id"`
	Vote     uint32 `protobuf:"varint,2,opt,name=vote" json:"vote"`
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Reset() {
	*m = CMsgGCCStrike15V2_ClientSubmitSurveyVote{}
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientSubmitSurveyVote) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{89}
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetSurveyId() uint32 {
	if m != nil {
		return m.SurveyId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) GetVote() uint32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCClientValidate struct {
	Accountid uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Reset() {
	*m = CMsgGCCStrike15V2_Server2GCClientValidate{}
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Server2GCClientValidate) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Server2GCClientValidate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{90}
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type CMsgGCCStrike15V2_Server2GCPureServerValidationFailure struct {
	Accountid  uint32 `protobuf:"varint,1,opt,name=accountid" json:"accountid"`
	Path       string `protobuf:"bytes,2,opt,name=path" json:"path"`
	File       string `protobuf:"bytes,3,opt,name=file" json:"file"`
	Crc        uint32 `protobuf:"varint,4,opt,name=crc" json:"crc"`
	Hash       int32  `protobuf:"varint,5,opt,name=hash" json:"hash"`
	Len        int32  `protobuf:"varint,6,opt,name=len" json:"len"`
	PackNumber int32  `protobuf:"varint,7,opt,name=pack_number,json=packNumber" json:"pack_number"`
	PackFileId int32  `protobuf:"varint,8,opt,name=pack_file_id,json=packFileId" json:"pack_file_id"`
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Reset() {
	*m = CMsgGCCStrike15V2_Server2GCPureServerValidationFailure{}
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{91}
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetAccountid() uint32 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackNumber() int32 {
	if m != nil {
		return m.PackNumber
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) GetPackFileId() int32 {
	if m != nil {
		return m.PackFileId
	}
	return 0
}

type CMsgGCCStrike15V2_GC2ClientTournamentInfo struct {
	Eventid  uint32   `protobuf:"varint,1,opt,name=eventid" json:"eventid"`
	Stageid  uint32   `protobuf:"varint,2,opt,name=stageid" json:"stageid"`
	GameType uint32   `protobuf:"varint,3,opt,name=game_type,json=gameType" json:"game_type"`
	Teamids  []uint32 `protobuf:"varint,4,rep,name=teamids" json:"teamids,omitempty"`
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Reset() {
	*m = CMsgGCCStrike15V2_GC2ClientTournamentInfo{}
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GC2ClientTournamentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{92}
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetEventid() uint32 {
	if m != nil {
		return m.Eventid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetStageid() uint32 {
	if m != nil {
		return m.Stageid
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetGameType() uint32 {
	if m != nil {
		return m.GameType
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) GetTeamids() []uint32 {
	if m != nil {
		return m.Teamids
	}
	return nil
}

type CSOEconCoupon struct {
	Entryid        uint32 `protobuf:"varint,1,opt,name=entryid" json:"entryid"`
	Defidx         uint32 `protobuf:"varint,2,opt,name=defidx" json:"defidx"`
	ExpirationDate uint32 `protobuf:"fixed32,3,opt,name=expiration_date,json=expirationDate" json:"expiration_date"`
}

func (m *CSOEconCoupon) Reset()         { *m = CSOEconCoupon{} }
func (m *CSOEconCoupon) String() string { return proto.CompactTextString(m) }
func (*CSOEconCoupon) ProtoMessage()    {}
func (*CSOEconCoupon) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{93}
}

func (m *CSOEconCoupon) GetEntryid() uint32 {
	if m != nil {
		return m.Entryid
	}
	return 0
}

func (m *CSOEconCoupon) GetDefidx() uint32 {
	if m != nil {
		return m.Defidx
	}
	return 0
}

func (m *CSOEconCoupon) GetExpirationDate() uint32 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

type CSOQuestProgress struct {
	Questid         uint32 `protobuf:"varint,1,opt,name=questid" json:"questid"`
	PointsRemaining uint32 `protobuf:"varint,2,opt,name=points_remaining,json=pointsRemaining" json:"points_remaining"`
	BonusPoints     uint32 `protobuf:"varint,3,opt,name=bonus_points,json=bonusPoints" json:"bonus_points"`
}

func (m *CSOQuestProgress) Reset()         { *m = CSOQuestProgress{} }
func (m *CSOQuestProgress) String() string { return proto.CompactTextString(m) }
func (*CSOQuestProgress) ProtoMessage()    {}
func (*CSOQuestProgress) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{94}
}

func (m *CSOQuestProgress) GetQuestid() uint32 {
	if m != nil {
		return m.Questid
	}
	return 0
}

func (m *CSOQuestProgress) GetPointsRemaining() uint32 {
	if m != nil {
		return m.PointsRemaining
	}
	return 0
}

func (m *CSOQuestProgress) GetBonusPoints() uint32 {
	if m != nil {
		return m.BonusPoints
	}
	return 0
}

type CSOPersonaDataPublic struct {
	PlayerLevel   int32                   `protobuf:"varint,1,opt,name=player_level,json=playerLevel" json:"player_level"`
	Commendation  *PlayerCommendationInfo `protobuf:"bytes,2,opt,name=commendation" json:"commendation,omitempty"`
	ElevatedState bool                    `protobuf:"varint,3,opt,name=elevated_state,json=elevatedState" json:"elevated_state"`
}

func (m *CSOPersonaDataPublic) Reset()         { *m = CSOPersonaDataPublic{} }
func (m *CSOPersonaDataPublic) String() string { return proto.CompactTextString(m) }
func (*CSOPersonaDataPublic) ProtoMessage()    {}
func (*CSOPersonaDataPublic) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{95}
}

func (m *CSOPersonaDataPublic) GetPlayerLevel() int32 {
	if m != nil {
		return m.PlayerLevel
	}
	return 0
}

func (m *CSOPersonaDataPublic) GetCommendation() *PlayerCommendationInfo {
	if m != nil {
		return m.Commendation
	}
	return nil
}

func (m *CSOPersonaDataPublic) GetElevatedState() bool {
	if m != nil {
		return m.ElevatedState
	}
	return false
}

type CMsgGC_GlobalGame_Subscribe struct {
	Ticket uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
}

func (m *CMsgGC_GlobalGame_Subscribe) Reset()         { *m = CMsgGC_GlobalGame_Subscribe{} }
func (m *CMsgGC_GlobalGame_Subscribe) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Subscribe) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{96}
}

func (m *CMsgGC_GlobalGame_Subscribe) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

type CMsgGC_GlobalGame_Unsubscribe struct {
	Timeleft int32 `protobuf:"varint,1,opt,name=timeleft" json:"timeleft"`
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Reset()         { *m = CMsgGC_GlobalGame_Unsubscribe{} }
func (m *CMsgGC_GlobalGame_Unsubscribe) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Unsubscribe) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Unsubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{97}
}

func (m *CMsgGC_GlobalGame_Unsubscribe) GetTimeleft() int32 {
	if m != nil {
		return m.Timeleft
	}
	return 0
}

type CMsgGC_GlobalGame_Play struct {
	Ticket     uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
	Gametimems uint32 `protobuf:"varint,2,opt,name=gametimems" json:"gametimems"`
	Msperpoint uint32 `protobuf:"varint,3,opt,name=msperpoint" json:"msperpoint"`
}

func (m *CMsgGC_GlobalGame_Play) Reset()         { *m = CMsgGC_GlobalGame_Play{} }
func (m *CMsgGC_GlobalGame_Play) String() string { return proto.CompactTextString(m) }
func (*CMsgGC_GlobalGame_Play) ProtoMessage()    {}
func (*CMsgGC_GlobalGame_Play) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{98}
}

func (m *CMsgGC_GlobalGame_Play) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

func (m *CMsgGC_GlobalGame_Play) GetGametimems() uint32 {
	if m != nil {
		return m.Gametimems
	}
	return 0
}

func (m *CMsgGC_GlobalGame_Play) GetMsperpoint() uint32 {
	if m != nil {
		return m.Msperpoint
	}
	return 0
}

type CMsgGCCStrike15V2_AcknowledgePenalty struct {
	Acknowledged int32 `protobuf:"varint,1,opt,name=acknowledged" json:"acknowledged"`
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Reset()         { *m = CMsgGCCStrike15V2_AcknowledgePenalty{} }
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_AcknowledgePenalty) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_AcknowledgePenalty) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{99}
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) GetAcknowledged() int32 {
	if m != nil {
		return m.Acknowledged
	}
	return 0
}

type CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin struct {
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin{}
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) ProtoMessage() {}
func (*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{100}
}

type CMsgGCCStrike15V2_Client2GCStreamUnlock struct {
	Ticket uint64 `protobuf:"varint,1,opt,name=ticket" json:"ticket"`
	Os     int32  `protobuf:"varint,2,opt,name=os" json:"os"`
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Reset() {
	*m = CMsgGCCStrike15V2_Client2GCStreamUnlock{}
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_Client2GCStreamUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{101}
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetTicket() uint64 {
	if m != nil {
		return m.Ticket
	}
	return 0
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) GetOs() int32 {
	if m != nil {
		return m.Os
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCRequestElevate struct {
	Stage uint32 `protobuf:"varint,1,opt,name=stage" json:"stage"`
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Reset() {
	*m = CMsgGCCStrike15V2_ClientToGCRequestElevate{}
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) ProtoMessage() {}
func (*CMsgGCCStrike15V2_ClientToGCRequestElevate) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{102}
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) GetStage() uint32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type CMsgGCCStrike15V2_ClientToGCChat struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id"`
	Text    string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Reset()         { *m = CMsgGCCStrike15V2_ClientToGCChat{} }
func (m *CMsgGCCStrike15V2_ClientToGCChat) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_ClientToGCChat) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_ClientToGCChat) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{103}
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type CMsgGCCStrike15V2_GCToClientChat struct {
	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id"`
	Text      string `protobuf:"bytes,2,opt,name=text" json:"text"`
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Reset()         { *m = CMsgGCCStrike15V2_GCToClientChat{} }
func (m *CMsgGCCStrike15V2_GCToClientChat) String() string { return proto.CompactTextString(m) }
func (*CMsgGCCStrike15V2_GCToClientChat) ProtoMessage()    {}
func (*CMsgGCCStrike15V2_GCToClientChat) Descriptor() ([]byte, []int) {
	return fileDescriptorCstrike15Gcmessages, []int{104}
}

func (m *CMsgGCCStrike15V2_GCToClientChat) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *CMsgGCCStrike15V2_GCToClientChat) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*GameServerPing)(nil), "GameServerPing")
	proto.RegisterType((*DetailedSearchStatistic)(nil), "DetailedSearchStatistic")
	proto.RegisterType((*TournamentPlayer)(nil), "TournamentPlayer")
	proto.RegisterType((*TournamentTeam)(nil), "TournamentTeam")
	proto.RegisterType((*TournamentEvent)(nil), "TournamentEvent")
	proto.RegisterType((*GlobalStatistics)(nil), "GlobalStatistics")
	proto.RegisterType((*OperationalStatisticDescription)(nil), "OperationalStatisticDescription")
	proto.RegisterType((*OperationalStatisticElement)(nil), "OperationalStatisticElement")
	proto.RegisterType((*OperationalStatisticsPacket)(nil), "OperationalStatisticsPacket")
	proto.RegisterType((*PlayerRankingInfo)(nil), "PlayerRankingInfo")
	proto.RegisterType((*PlayerCommendationInfo)(nil), "PlayerCommendationInfo")
	proto.RegisterType((*PlayerMedalsInfo)(nil), "PlayerMedalsInfo")
	proto.RegisterType((*AccountActivity)(nil), "AccountActivity")
	proto.RegisterType((*TournamentMatchSetup)(nil), "TournamentMatchSetup")
	proto.RegisterType((*ServerHltvInfo)(nil), "ServerHltvInfo")
	proto.RegisterType((*IpAddressMask)(nil), "IpAddressMask")
	proto.RegisterType((*XpProgressData)(nil), "XpProgressData")
	proto.RegisterType((*MatchEndItemUpdates)(nil), "MatchEndItemUpdates")
	proto.RegisterType((*ScoreLeaderboardData)(nil), "ScoreLeaderboardData")
	proto.RegisterType((*ScoreLeaderboardData_Entry)(nil), "ScoreLeaderboardData.Entry")
	proto.RegisterType((*ScoreLeaderboardData_AccountEntries)(nil), "ScoreLeaderboardData.AccountEntries")
	proto.RegisterType((*PlayerQuestData)(nil), "PlayerQuestData")
	proto.RegisterType((*PlayerQuestData_QuestItemData)(nil), "PlayerQuestData.QuestItemData")
	proto.RegisterType((*CMsgGC_ServerQuestUpdateData)(nil), "CMsgGC_ServerQuestUpdateData")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGCOperationalStats)(nil), "CMsgGCCStrike15_v2_MatchmakingGCOperationalStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ServerReservationUpdate)(nil), "CMsgGCCStrike15_v2_GC2ServerReservationUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingStart)(nil), "CMsgGCCStrike15_v2_MatchmakingStart")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingStop)(nil), "CMsgGCCStrike15_v2_MatchmakingStop")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingClient2ServerPing)(nil), "CMsgGCCStrike15_v2_MatchmakingClient2ServerPing")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Note")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentMatchDraft)(nil), "CDataGCCStrike15_v2_TournamentMatchDraft")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentMatchDraft_Entry)(nil), "CDataGCCStrike15_v2_TournamentMatchDraft.Entry")
	proto.RegisterType((*CPreMatchInfoData)(nil), "CPreMatchInfoData")
	proto.RegisterType((*CPreMatchInfoData_TeamStats)(nil), "CPreMatchInfoData.TeamStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerReserve)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerReservationResponse)(nil), "CMsgGCCStrike15_v2_MatchmakingServerReservationResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientReserve)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerRoundStats)(nil), "CMsgGCCStrike15_v2_MatchmakingServerRoundStats")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo)(nil), "CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DropInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServerMatchEnd)(nil), "CMsgGCCStrike15_v2_MatchmakingServerMatchEnd")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingClient2GCHello)(nil), "CMsgGCCStrike15_v2_MatchmakingClient2GCHello")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientHello)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientHello")
	proto.RegisterType((*CMsgGCCStrike15V2_AccountPrivacySettings)(nil), "CMsgGCCStrike15_v2_AccountPrivacySettings")
	proto.RegisterType((*CMsgGCCStrike15V2_AccountPrivacySettings_Setting)(nil), "CMsgGCCStrike15_v2_AccountPrivacySettings.Setting")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingServer2GCKick)(nil), "CMsgGCCStrike15_v2_MatchmakingServer2GCKick")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate)(nil), "CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_ServerNotificationForUserPenalty)(nil), "CMsgGCCStrike15_v2_ServerNotificationForUserPenalty")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportPlayer)(nil), "CMsgGCCStrike15_v2_ClientReportPlayer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientCommendPlayer)(nil), "CMsgGCCStrike15_v2_ClientCommendPlayer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportServer)(nil), "CMsgGCCStrike15_v2_ClientReportServer")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientReportResponse)(nil), "CMsgGCCStrike15_v2_ClientReportResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestWatchInfoFriends)(nil), "CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends")
	proto.RegisterType((*WatchableMatchInfo)(nil), "WatchableMatchInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestJoinFriendData)(nil), "CMsgGCCStrike15_v2_ClientRequestJoinFriendData")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestJoinServerData)(nil), "CMsgGCCStrike15_v2_ClientRequestJoinServerData")
	proto.RegisterType((*CMsgGCCstrike15V2_ClientRequestNewMission)(nil), "CMsgGCCstrike15_v2_ClientRequestNewMission")
	proto.RegisterType((*CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded)(nil), "CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded")
	proto.RegisterType((*CMsgGCCStrike15V2_WatchInfoUsers)(nil), "CMsgGCCStrike15_v2_WatchInfoUsers")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientRequestPlayersProfile)(nil), "CMsgGCCStrike15_v2_ClientRequestPlayersProfile")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayersProfile)(nil), "CMsgGCCStrike15_v2_PlayersProfile")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment")
	proto.RegisterType((*CMsgGCCStrike15V2_PlayerOverwatchCaseStatus)(nil), "CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus")
	proto.RegisterType((*CClientHeaderOverwatchEvidence)(nil), "CClientHeaderOverwatchEvidence")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientTextMsg)(nil), "CMsgGCCStrike15_v2_GC2ClientTextMsg")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCTextMsg)(nil), "CMsgGCCStrike15_v2_Client2GCTextMsg")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchEndRunRewardDrops)(nil), "CMsgGCCStrike15_v2_MatchEndRunRewardDrops")
	proto.RegisterType((*CEconItemPreviewDataBlock)(nil), "CEconItemPreviewDataBlock")
	proto.RegisterType((*CEconItemPreviewDataBlock_Sticker)(nil), "CEconItemPreviewDataBlock.Sticker")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchEndRewardDropsNotification)(nil), "CMsgGCCStrike15_v2_MatchEndRewardDropsNotification")
	proto.RegisterType((*CMsgItemAcknowledged)(nil), "CMsgItemAcknowledged")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest)(nil), "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse)(nil), "CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification)(nil), "CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestLiveGameForUser)(nil), "CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestRecentUserGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestRecentUserGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestTournamentGames)(nil), "CMsgGCCStrike15_v2_MatchListRequestTournamentGames")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchListRequestFullGameInfo)(nil), "CMsgGCCStrike15_v2_MatchListRequestFullGameInfo")
	proto.RegisterType((*CDataGCCStrike15V2_MatchInfo)(nil), "CDataGCCStrike15_v2_MatchInfo")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroupTeam)(nil), "CDataGCCStrike15_v2_TournamentGroupTeam")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroup)(nil), "CDataGCCStrike15_v2_TournamentGroup")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentGroup_Picks)(nil), "CDataGCCStrike15_v2_TournamentGroup.Picks")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentSection)(nil), "CDataGCCStrike15_v2_TournamentSection")
	proto.RegisterType((*CDataGCCStrike15V2_TournamentInfo)(nil), "CDataGCCStrike15_v2_TournamentInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_MatchList)(nil), "CMsgGCCStrike15_v2_MatchList")
	proto.RegisterType((*CMsgGCCStrike15V2_Predictions)(nil), "CMsgGCCStrike15_v2_Predictions")
	proto.RegisterType((*CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick)(nil), "CMsgGCCStrike15_v2_Predictions.GroupMatchTeamPick")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy)(nil), "CMsgGCCStrike15_v2_Fantasy")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy_FantasySlot)(nil), "CMsgGCCStrike15_v2_Fantasy.FantasySlot")
	proto.RegisterType((*CMsgGCCStrike15V2_Fantasy_FantasyTeam)(nil), "CMsgGCCStrike15_v2_Fantasy.FantasyTeam")
	proto.RegisterType((*CAttribute_String)(nil), "CAttribute_String")
	proto.RegisterType((*CMsgGCToGCReloadVersions)(nil), "CMsgGCToGCReloadVersions")
	proto.RegisterType((*CMsgCStrike15Welcome)(nil), "CMsgCStrike15Welcome")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientVarValueNotificationInfo)(nil), "CMsgGCCStrike15_v2_ClientVarValueNotificationInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_ServerVarValueNotificationInfo)(nil), "CMsgGCCStrike15_v2_ServerVarValueNotificationInfo")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardRequest)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardRequest")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardResponse)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardResponse")
	proto.RegisterType((*CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry)(nil), "CMsgGCCStrike15_v2_GiftsLeaderboardResponse.GiftLeaderboardEntry")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientSubmitSurveyVote)(nil), "CMsgGCCStrike15_v2_ClientSubmitSurveyVote")
	proto.RegisterType((*CMsgGCCStrike15V2_Server2GCClientValidate)(nil), "CMsgGCCStrike15_v2_Server2GCClientValidate")
	proto.RegisterType((*CMsgGCCStrike15V2_Server2GCPureServerValidationFailure)(nil), "CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure")
	proto.RegisterType((*CMsgGCCStrike15V2_GC2ClientTournamentInfo)(nil), "CMsgGCCStrike15_v2_GC2ClientTournamentInfo")
	proto.RegisterType((*CSOEconCoupon)(nil), "CSOEconCoupon")
	proto.RegisterType((*CSOQuestProgress)(nil), "CSOQuestProgress")
	proto.RegisterType((*CSOPersonaDataPublic)(nil), "CSOPersonaDataPublic")
	proto.RegisterType((*CMsgGC_GlobalGame_Subscribe)(nil), "CMsgGC_GlobalGame_Subscribe")
	proto.RegisterType((*CMsgGC_GlobalGame_Unsubscribe)(nil), "CMsgGC_GlobalGame_Unsubscribe")
	proto.RegisterType((*CMsgGC_GlobalGame_Play)(nil), "CMsgGC_GlobalGame_Play")
	proto.RegisterType((*CMsgGCCStrike15V2_AcknowledgePenalty)(nil), "CMsgGCCStrike15_v2_AcknowledgePenalty")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin)(nil), "CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin")
	proto.RegisterType((*CMsgGCCStrike15V2_Client2GCStreamUnlock)(nil), "CMsgGCCStrike15_v2_Client2GCStreamUnlock")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientToGCRequestElevate)(nil), "CMsgGCCStrike15_v2_ClientToGCRequestElevate")
	proto.RegisterType((*CMsgGCCStrike15V2_ClientToGCChat)(nil), "CMsgGCCStrike15_v2_ClientToGCChat")
	proto.RegisterType((*CMsgGCCStrike15V2_GCToClientChat)(nil), "CMsgGCCStrike15_v2_GCToClientChat")
	proto.RegisterEnum("ECsgoGCMsg", ECsgoGCMsg_name, ECsgoGCMsg_value)
}
func (m *GameServerPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameServerPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameserverId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ping))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ip))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Port))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Instances))
	return i, nil
}

func (m *DetailedSearchStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetailedSearchStatistic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SearchTimeAvg))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersSearching))
	return i, nil
}

func (m *TournamentPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerNick)))
	i += copy(dAtA[i:], m.PlayerNick)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerName)))
	i += copy(dAtA[i:], m.PlayerName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerDob))
	dAtA[i] = 0x2a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerFlag)))
	i += copy(dAtA[i:], m.PlayerFlag)
	dAtA[i] = 0x32
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerLocation)))
	i += copy(dAtA[i:], m.PlayerLocation)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.PlayerDesc)))
	i += copy(dAtA[i:], m.PlayerDesc)
	return i, nil
}

func (m *TournamentTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamTag)))
	i += copy(dAtA[i:], m.TeamTag)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamFlag)))
	i += copy(dAtA[i:], m.TeamFlag)
	dAtA[i] = 0x22
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TeamName)))
	i += copy(dAtA[i:], m.TeamName)
	if len(m.Players) > 0 {
		for _, msg := range m.Players {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TournamentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventTag)))
	i += copy(dAtA[i:], m.EventTag)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventName)))
	i += copy(dAtA[i:], m.EventName)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventTimeStart))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventTimeEnd))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventPublic))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	dAtA[i] = 0x42
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.EventStageName)))
	i += copy(dAtA[i:], m.EventStageName)
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveSectionId))
	return i, nil
}

func (m *GlobalStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalStatistics) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersOnline))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServersOnline))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayersSearching))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServersAvailable))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OngoingMatches))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SearchTimeAvg))
	if len(m.SearchStatistics) > 0 {
		for _, msg := range m.SearchStatistics {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x42
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MainPostUrl)))
	i += copy(dAtA[i:], m.MainPostUrl)
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequiredAppidVersion))
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PricesheetVersion))
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TwitchStreamsVersion))
	dAtA[i] = 0x60
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveTournamentEventid))
	dAtA[i] = 0x68
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ActiveSurveyId))
	return i, nil
}

func (m *OperationalStatisticDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Idkey))
	return i, nil
}

func (m *OperationalStatisticElement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticElement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Idkey))
	if len(m.Values) > 0 {
		for _, num := range m.Values {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *OperationalStatisticsPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationalStatisticsPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Packetid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mstimestamp))
	if len(m.Values) > 0 {
		for _, msg := range m.Values {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerRankingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerRankingInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RankId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Wins))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.RankChange))))
	return i, nil
}

func (m *PlayerCommendationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerCommendationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdFriendly))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdTeaching))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CmdLeader))
	return i, nil
}

func (m *PlayerMedalsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerMedalsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MedalTeam))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MedalCombat))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MedalWeapon))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MedalGlobal))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MedalArms))
	if len(m.DisplayItemsDefidx) > 0 {
		for _, num := range m.DisplayItemsDefidx {
			dAtA[i] = 0x38
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FeaturedDisplayItemDefidx))
	return i, nil
}

func (m *AccountActivity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountActivity) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Activity))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mode))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Map))
	return i, nil
}

func (m *TournamentMatchSetup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TournamentMatchSetup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdCt))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdT))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	return i, nil
}

func (m *ServerHltvInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerHltvInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvUdpPort))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvWatchKey))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvSlots))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvClients))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvProxies))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvTime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMapgroup)))
	i += copy(dAtA[i:], m.GameMapgroup)
	dAtA[i] = 0x52
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMap)))
	i += copy(dAtA[i:], m.GameMap)
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvMasterSteamid))
	dAtA[i] = 0x60
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalSlots))
	dAtA[i] = 0x68
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalClients))
	dAtA[i] = 0x70
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvLocalProxies))
	dAtA[i] = 0x78
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySlots))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayClients))
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayProxies))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayAddress))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelayPort))
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySteamid))
	return i, nil
}

func (m *IpAddressMask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IpAddressMask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.A))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.B))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.C))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.D))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Bits))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	return i, nil
}

func (m *XpProgressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XpProgressData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.XpPoints))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.XpCategory))
	return i, nil
}

func (m *MatchEndItemUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchEndItemUpdates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemAttrDefidx))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ItemAttrDeltaValue))
	return i, nil
}

func (m *ScoreLeaderboardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Score))
	if len(m.Accountentries) > 0 {
		for _, msg := range m.Accountentries {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Matchentries) > 0 {
		for _, msg := range m.Matchentries {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ScoreLeaderboardData_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData_Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tag))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Val))
	return i, nil
}

func (m *ScoreLeaderboardData_AccountEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreLeaderboardData_AccountEntries) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerQuestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerQuestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuesterAccountId))
	if len(m.QuestItemData) > 0 {
		for _, msg := range m.QuestItemData {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.XpProgressData) > 0 {
		for _, msg := range m.XpProgressData {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimePlayed))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MmGameMode))
	if len(m.ItemUpdates) > 0 {
		for _, msg := range m.ItemUpdates {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PlayerQuestData_QuestItemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerQuestData_QuestItemData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestNormalPointsEarned))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.QuestBonusPointsEarned))
	return i, nil
}

func (m *CMsgGC_ServerQuestUpdateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_ServerQuestUpdateData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PlayerQuestData) > 0 {
		for _, msg := range m.PlayerQuestData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BinaryData != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.BinaryData)))
		i += copy(dAtA[i:], m.BinaryData)
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MmGameMode))
	if m.Missionlbsdata != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Missionlbsdata.Size()))
		n1, err := m.Missionlbsdata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Packetid))
	if len(m.Namekeys) > 0 {
		for _, msg := range m.Namekeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Packets) > 0 {
		for _, msg := range m.Packets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stamp))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Exchange))
	return i, nil
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ViewersExternalTotal))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ViewersExternalSteam))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, num := range m.AccountIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TicketData)))
	i += copy(dAtA[i:], m.TicketData)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClientVersion))
	if m.TournamentMatch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TournamentMatch.Size()))
		n2, err := m.TournamentMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Abandon))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gameserverpings) > 0 {
		for _, msg := range m.Gameserverpings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.OffsetIndex))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.FinalBatch))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchmaking))
	if len(m.WaitingAccountIdSessions) > 0 {
		for _, num := range m.WaitingAccountIdSessions {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Error)))
	i += copy(dAtA[i:], m.Error)
	if len(m.OngoingmatchAccountIdSessions) > 0 {
		for _, num := range m.OngoingmatchAccountIdSessions {
			dAtA[i] = 0x30
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if m.GlobalStats != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GlobalStats.Size()))
		n3, err := m.GlobalStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.FailpingAccountIdSessions) > 0 {
		for _, num := range m.FailpingAccountIdSessions {
			dAtA[i] = 0x40
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.PenaltyAccountIdSessions) > 0 {
		for _, num := range m.PenaltyAccountIdSessions {
			dAtA[i] = 0x48
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.FailreadyAccountIdSessions) > 0 {
		for _, num := range m.FailreadyAccountIdSessions {
			dAtA[i] = 0x50
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.VacbannedAccountIdSessions) > 0 {
		for _, num := range m.VacbannedAccountIdSessions {
			dAtA[i] = 0x58
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if m.ServerIpaddressMask != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIpaddressMask.Size()))
		n4, err := m.ServerIpaddressMask.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Notes) > 0 {
		for _, msg := range m.Notes {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.PenaltyAccountIdSessionsGreen) > 0 {
		for _, num := range m.PenaltyAccountIdSessionsGreen {
			dAtA[i] = 0x70
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.InsufficientlevelSessions) > 0 {
		for _, num := range m.InsufficientlevelSessions {
			dAtA[i] = 0x78
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RegionId))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.RegionR))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Distance))))
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventStageId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId_0))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId_1))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MapsCount))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MapsCurrent))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdStart))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdVeto1))
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdPickn))
	if len(m.Drafts) > 0 {
		for _, msg := range m.Drafts {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Mapid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamIdCt))
	return i, nil
}

func (m *CPreMatchInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPreMatchInfoData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PredictionsPct))
	if m.Draft != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Draft.Size()))
		n5, err := m.Draft.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Stats) > 0 {
		for _, msg := range m.Stats {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CPreMatchInfoData_TeamStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPreMatchInfoData_TeamStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchInfoIdxtxt))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MatchInfoTxt)))
	i += copy(dAtA[i:], m.MatchInfoTxt)
	if len(m.MatchInfoTeams) > 0 {
		for _, s := range m.MatchInfoTeams {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, num := range m.AccountIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	if len(m.Rankings) > 0 {
		for _, msg := range m.Rankings {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EncryptionKey))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EncryptionKeyPub))
	if len(m.PartyIds) > 0 {
		for _, num := range m.PartyIds {
			dAtA[i] = 0x40
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Whitelist) > 0 {
		for _, msg := range m.Whitelist {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvMasterSteamid))
	if m.TournamentEvent != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TournamentEvent.Size()))
		n6, err := m.TournamentEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.TournamentTeams) > 0 {
		for _, msg := range m.TournamentTeams {
			dAtA[i] = 0x62
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TournamentCastersAccountIds) > 0 {
		for _, num := range m.TournamentCastersAccountIds {
			dAtA[i] = 0x68
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x70
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvRelaySteamid))
	if m.PreMatchData != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PreMatchData.Size()))
		n7, err := m.PreMatchData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	if m.Reservation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservation.Size()))
		n8, err := m.Reservation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i += copy(dAtA[i:], m.Map)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GcReservationSent))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	if m.TvInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvInfo.Size()))
		n9, err := m.TvInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.RewardPlayerAccounts) > 0 {
		for _, num := range m.RewardPlayerAccounts {
			dAtA[i] = 0x38
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.IdlePlayerAccounts) > 0 {
		for _, num := range m.IdlePlayerAccounts {
			dAtA[i] = 0x40
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrDefIdx))
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrValue))
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardItemAttrRewardIdx))
	dAtA[i] = 0x60
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RewardDropList))
	dAtA[i] = 0x6a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TournamentTag)))
	i += copy(dAtA[i:], m.TournamentTag)
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	if m.Reservation != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservation.Size()))
		n10, err := m.Reservation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i += copy(dAtA[i:], m.Map)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.ServerAddress)))
	i += copy(dAtA[i:], m.ServerAddress)
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservationid))
	if m.Reservation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservation.Size()))
		n11, err := m.Reservation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Map)))
	i += copy(dAtA[i:], m.Map)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Round))
	if len(m.Kills) > 0 {
		for _, num := range m.Kills {
			dAtA[i] = 0x28
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Assists) > 0 {
		for _, num := range m.Assists {
			dAtA[i] = 0x30
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Deaths) > 0 {
		for _, num := range m.Deaths {
			dAtA[i] = 0x38
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Scores) > 0 {
		for _, num := range m.Scores {
			dAtA[i] = 0x40
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Pings) > 0 {
		for _, num := range m.Pings {
			dAtA[i] = 0x48
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RoundResult))
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchResult))
	if len(m.TeamScores) > 0 {
		for _, num := range m.TeamScores {
			dAtA[i] = 0x60
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if m.Confirm != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Confirm.Size()))
		n12, err := m.Confirm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	dAtA[i] = 0x70
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReservationStage))
	dAtA[i] = 0x78
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchDuration))
	if len(m.EnemyKills) > 0 {
		for _, num := range m.EnemyKills {
			dAtA[i] = 0x80
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.EnemyHeadshots) > 0 {
		for _, num := range m.EnemyHeadshots {
			dAtA[i] = 0x88
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Enemy_3Ks) > 0 {
		for _, num := range m.Enemy_3Ks {
			dAtA[i] = 0x90
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Enemy_4Ks) > 0 {
		for _, num := range m.Enemy_4Ks {
			dAtA[i] = 0x98
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Enemy_5Ks) > 0 {
		for _, num := range m.Enemy_5Ks {
			dAtA[i] = 0xa0
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.Mvps) > 0 {
		for _, num := range m.Mvps {
			dAtA[i] = 0xa8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCount))
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCountTv))
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SpectatorsCountLnk))
	if len(m.EnemyKillsAgg) > 0 {
		for _, num := range m.EnemyKillsAgg {
			dAtA[i] = 0xc8
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if m.DropInfo != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.DropInfo.Size()))
		n13, err := m.DropInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountMvp))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stats.Size()))
		n14, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Confirm != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Confirm.Size()))
		n15, err := m.Confirm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rematch))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReplayToken))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReplayClusterId))
	dAtA[i] = 0x38
	i++
	if m.AbortedMatch {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.MatchEndQuestData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchEndQuestData.Size()))
		n16, err := m.MatchEndQuestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerVersion))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	if m.Ongoingmatch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ongoingmatch.Size()))
		n17, err := m.Ongoingmatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.GlobalStats != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GlobalStats.Size()))
		n18, err := m.GlobalStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltySeconds))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyReason))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.VacBanned))
	if m.Ranking != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ranking.Size()))
		n19, err := m.Ranking.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Commendation != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Commendation.Size()))
		n20, err := m.Commendation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Medals != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Medals.Size()))
		n21, err := m.Medals.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.MyCurrentEvent != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MyCurrentEvent.Size()))
		n22, err := m.MyCurrentEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.MyCurrentEventTeams) > 0 {
		for _, msg := range m.MyCurrentEventTeams {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MyCurrentTeam != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MyCurrentTeam.Size()))
		n23, err := m.MyCurrentTeam.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.MyCurrentEventStages) > 0 {
		for _, msg := range m.MyCurrentEventStages {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x70
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SurveyVote))
	if m.Activity != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Activity.Size()))
		n24, err := m.Activity.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerLevel))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerCurXp))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerXpBonusFlags))
	return i, nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, msg := range m.Settings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SettingType))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SettingValue))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	if m.AbandonedMatch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AbandonedMatch.Size()))
		n25, err := m.AbandonedMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltySeconds))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PenaltyReason))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	if m.Reservation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reservation.Size()))
		n26, err := m.Reservation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, msg := range m.Rankings {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.MainPostUrl)))
	i += copy(dAtA[i:], m.MainPostUrl)
	return i, nil
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Seconds))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAimbot))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptWallhack))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptSpeedhack))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTeamharm))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTextabuse))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptVoiceabuse))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	if m.Commendation != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Commendation.Size()))
		n27, err := m.Commendation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tokens))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptPoorperf))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAbusivemodels))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptBadmotd))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptListingabuse))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptInventoryabuse))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ConfirmationId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ResponseType))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ResponseResult))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tokens))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, num := range m.AccountIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	return i, nil
}

func (m *WatchableMatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchableMatchInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvPort))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvSpectators))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TvTime))
	if m.TvWatchPassword != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.TvWatchPassword)))
		i += copy(dAtA[i:], m.TvWatchPassword)
	}
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClDecryptdataKey))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ClDecryptdataKeyPub))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	dAtA[i] = 0x4a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMapgroup)))
	i += copy(dAtA[i:], m.GameMapgroup)
	dAtA[i] = 0x52
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.GameMap)))
	i += copy(dAtA[i:], m.GameMap)
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerId))
	dAtA[i] = 0x60
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x68
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ReservationId))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.JoinToken))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.JoinIpp))
	if m.Res != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Res.Size()))
		n28, err := m.Res.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Errormsg)))
	i += copy(dAtA[i:], m.Errormsg)
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Version))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverid))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerIp))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerPort))
	if m.Res != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Res.Size()))
		n29, err := m.Res.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MissionId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CampaignId))
	return i, nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XpProgressData) > 0 {
		for _, msg := range m.XpProgressData {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CurrentXp))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.CurrentLevel))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.UpgradedDefidx))
	return i, nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, num := range m.AccountIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	if len(m.WatchableMatchInfos) > 0 {
		for _, msg := range m.WatchableMatchInfos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ExtendedTimeout))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId_Deprecated))
	if len(m.AccountIds_Deprecated) > 0 {
		for _, num := range m.AccountIds_Deprecated {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestLevel))
	return i, nil
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayersProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RequestId))
	if len(m.AccountProfiles) > 0 {
		for _, msg := range m.AccountProfiles {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Suspectid))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionid))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptAimbot))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptWallhack))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptSpeedhack))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RptTeamharm))
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	return i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Caseurl)))
	i += copy(dAtA[i:], m.Caseurl)
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Verdict))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timestamp))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Throttleseconds))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Suspectid))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionid))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Numrounds))
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Fractionrounds))
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Streakconvictions))
	dAtA[i] = 0x58
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Reason))
	return i, nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Statusid))
	return i, nil
}

func (m *CClientHeaderOverwatchEvidence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CClientHeaderOverwatchEvidence) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Caseid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	if m.Payload != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Id))
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Serverinfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Serverinfo.Size()))
		n30, err := m.Serverinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.MatchEndQuestData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchEndQuestData.Size()))
		n31, err := m.MatchEndQuestData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *CEconItemPreviewDataBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEconItemPreviewDataBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defindex))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintindex))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Rarity))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Quality))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintwear))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Paintseed))
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Killeaterscoretype))
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Killeatervalue))
	dAtA[i] = 0x5a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Customname)))
	i += copy(dAtA[i:], m.Customname)
	if len(m.Stickers) > 0 {
		for _, msg := range m.Stickers {
			dAtA[i] = 0x62
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x68
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Inventory))
	dAtA[i] = 0x70
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Origin))
	dAtA[i] = 0x78
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Questid))
	dAtA[i] = 0x80
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Dropreason))
	return i, nil
}

func (m *CEconItemPreviewDataBlock_Sticker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CEconItemPreviewDataBlock_Sticker) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Slot))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.StickerId))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Wear))))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Scale))))
	dAtA[i] = 0x2d
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(math.Float32bits(float32(m.Rotation))))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Iteminfo.Size()))
		n32, err := m.Iteminfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *CMsgItemAcknowledged) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgItemAcknowledged) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Iteminfo.Size()))
		n33, err := m.Iteminfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamS))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamA))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamD))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ParamM))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iteminfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Iteminfo.Size()))
		n34, err := m.Iteminfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defindex))
	if len(m.Accountids) > 0 {
		for _, num := range m.Accountids {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Outcomeid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Token))
	return i, nil
}

func (m *CDataGCCStrike15V2_MatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_MatchInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Matchtime))
	if m.Watchablematchinfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Watchablematchinfo.Size()))
		n35, err := m.Watchablematchinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.RoundstatsLegacy != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.RoundstatsLegacy.Size()))
		n36, err := m.RoundstatsLegacy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.Roundstatsall) > 0 {
		for _, msg := range m.Roundstatsall {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TeamId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Score))
	dAtA[i] = 0x18
	i++
	if m.Correctpick {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Groupid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Picks_Deprecated))
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StageIds) > 0 {
		for _, num := range m.StageIds {
			dAtA[i] = 0x30
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Picklockuntiltime))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pickableteams))
	dAtA[i] = 0x48
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PointsPerPick))
	if len(m.Picks) > 0 {
		for _, msg := range m.Picks {
			dAtA[i] = 0x52
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pickids) > 0 {
		for _, num := range m.Pickids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentSection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentSection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Desc)))
	i += copy(dAtA[i:], m.Desc)
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDataGCCStrike15V2_TournamentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TournamentEvent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TournamentEvent.Size()))
		n37, err := m.TournamentEvent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.TournamentTeams) > 0 {
		for _, msg := range m.TournamentTeams {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_MatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_MatchList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Msgrequestid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Servertime))
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Streams) > 0 {
		for _, msg := range m.Streams {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Tournamentinfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Tournamentinfo.Size()))
		n38, err := m.Tournamentinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_Predictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Predictions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	if len(m.GroupMatchTeamPicks) > 0 {
		for _, msg := range m.GroupMatchTeamPicks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Groupid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Index))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Teamid))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.EventId))
	if len(m.Teams) > 0 {
		for _, msg := range m.Teams {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Pick))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Itemid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Sectionid))
	if len(m.Slots) > 0 {
		for _, msg := range m.Slots {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CAttribute_String) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAttribute_String) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Value)))
	i += copy(dAtA[i:], m.Value)
	return i, nil
}

func (m *CMsgGCToGCReloadVersions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCToGCReloadVersions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CMsgCStrike15Welcome) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgCStrike15Welcome) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.StoreItemHash))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timeplayedconsecutively))
	dAtA[i] = 0x50
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimeFirstPlayed))
	dAtA[i] = 0x60
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LastTimePlayed))
	dAtA[i] = 0x68
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.LastIpAddress))
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gscookieid))
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Uniqueid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.ValueName)))
	i += copy(dAtA[i:], m.ValueName)
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ValueInt))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerAddr))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.ServerPort))
	if len(m.ChokedBlocks) > 0 {
		for _, s := range m.ChokedBlocks {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	if len(m.Viewangles) > 0 {
		for _, num := range m.Viewangles {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Type))
	return i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Servertime))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TimePeriodSeconds))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TotalGiftsGiven))
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.TotalGivers))
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gifts))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.SurveyId))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Vote))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Accountid))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.File)))
	i += copy(dAtA[i:], m.File)
	dAtA[i] = 0x20
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Crc))
	dAtA[i] = 0x28
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Hash))
	dAtA[i] = 0x30
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Len))
	dAtA[i] = 0x38
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PackNumber))
	dAtA[i] = 0x40
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PackFileId))
	return i, nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Eventid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stageid))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.GameType))
	if len(m.Teamids) > 0 {
		for _, num := range m.Teamids {
			dAtA[i] = 0x20
			i++
			i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CSOEconCoupon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOEconCoupon) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Entryid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Defidx))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32Cstrike15Gcmessages(dAtA, i, uint32(m.ExpirationDate))
	return i, nil
}

func (m *CSOQuestProgress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOQuestProgress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Questid))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PointsRemaining))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.BonusPoints))
	return i, nil
}

func (m *CSOPersonaDataPublic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSOPersonaDataPublic) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.PlayerLevel))
	if m.Commendation != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Commendation.Size()))
		n39, err := m.Commendation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	dAtA[i] = 0x18
	i++
	if m.ElevatedState {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *CMsgGC_GlobalGame_Subscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Subscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	return i, nil
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Unsubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Timeleft))
	return i, nil
}

func (m *CMsgGC_GlobalGame_Play) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGC_GlobalGame_Play) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Gametimems))
	dAtA[i] = 0x18
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Msperpoint))
	return i, nil
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Acknowledged))
	return i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Ticket))
	dAtA[i] = 0x10
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Os))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.Stage))
	return i, nil
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.MatchId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CMsgGCCStrike15V2_GCToClientChat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(m.AccountId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintCstrike15Gcmessages(dAtA, i, uint64(len(m.Text)))
	i += copy(dAtA[i:], m.Text)
	return i, nil
}

func encodeFixed64Cstrike15Gcmessages(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Cstrike15Gcmessages(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCstrike15Gcmessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GameServerPing) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameserverId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ping))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ip))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Port))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Instances))
	return n
}

func (m *DetailedSearchStatistic) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SearchTimeAvg))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersSearching))
	return n
}

func (m *TournamentPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	l = len(m.PlayerNick)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayerDob))
	l = len(m.PlayerFlag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerLocation)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.PlayerDesc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *TournamentTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId))
	l = len(m.TeamTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.TeamFlag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.TeamName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *TournamentEvent) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	l = len(m.EventTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.EventName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventTimeStart))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventTimeEnd))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventPublic))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	l = len(m.EventStageName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveSectionId))
	return n
}

func (m *GlobalStatistics) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersOnline))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServersOnline))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayersSearching))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServersAvailable))
	n += 1 + sovCstrike15Gcmessages(uint64(m.OngoingMatches))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SearchTimeAvg))
	if len(m.SearchStatistics) > 0 {
		for _, e := range m.SearchStatistics {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	l = len(m.MainPostUrl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequiredAppidVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PricesheetVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TwitchStreamsVersion))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveTournamentEventid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ActiveSurveyId))
	return n
}

func (m *OperationalStatisticDescription) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Idkey))
	return n
}

func (m *OperationalStatisticElement) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Idkey))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *OperationalStatisticsPacket) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Packetid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mstimestamp))
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerRankingInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RankId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Wins))
	n += 5
	return n
}

func (m *PlayerCommendationInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdFriendly))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdTeaching))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CmdLeader))
	return n
}

func (m *PlayerMedalsInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MedalTeam))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MedalCombat))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MedalWeapon))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MedalGlobal))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MedalArms))
	if len(m.DisplayItemsDefidx) > 0 {
		for _, e := range m.DisplayItemsDefidx {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.FeaturedDisplayItemDefidx))
	return n
}

func (m *AccountActivity) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Activity))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mode))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Map))
	return n
}

func (m *TournamentMatchSetup) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdCt))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdT))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	return n
}

func (m *ServerHltvInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvUdpPort))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvWatchKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvSlots))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvClients))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvProxies))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvTime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.GameMapgroup)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.GameMap)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvMasterSteamid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalSlots))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalClients))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvLocalProxies))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvRelaySlots))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayClients))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayProxies))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayAddress))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelayPort))
	n += 2 + sovCstrike15Gcmessages(uint64(m.TvRelaySteamid))
	return n
}

func (m *IpAddressMask) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.A))
	n += 1 + sovCstrike15Gcmessages(uint64(m.B))
	n += 1 + sovCstrike15Gcmessages(uint64(m.C))
	n += 1 + sovCstrike15Gcmessages(uint64(m.D))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Bits))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	return n
}

func (m *XpProgressData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.XpPoints))
	n += 1 + sovCstrike15Gcmessages(uint64(m.XpCategory))
	return n
}

func (m *MatchEndItemUpdates) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemAttrDefidx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ItemAttrDeltaValue))
	return n
}

func (m *ScoreLeaderboardData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Score))
	if len(m.Accountentries) > 0 {
		for _, e := range m.Accountentries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Matchentries) > 0 {
		for _, e := range m.Matchentries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *ScoreLeaderboardData_Entry) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tag))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Val))
	return n
}

func (m *ScoreLeaderboardData_AccountEntries) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerQuestData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuesterAccountId))
	if len(m.QuestItemData) > 0 {
		for _, e := range m.QuestItemData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.XpProgressData) > 0 {
		for _, e := range m.XpProgressData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimePlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MmGameMode))
	if len(m.ItemUpdates) > 0 {
		for _, e := range m.ItemUpdates {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *PlayerQuestData_QuestItemData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestNormalPointsEarned))
	n += 1 + sovCstrike15Gcmessages(uint64(m.QuestBonusPointsEarned))
	return n
}

func (m *CMsgGC_ServerQuestUpdateData) Size() (n int) {
	var l int
	_ = l
	if len(m.PlayerQuestData) > 0 {
		for _, e := range m.PlayerQuestData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.BinaryData != nil {
		l = len(m.BinaryData)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.MmGameMode))
	if m.Missionlbsdata != nil {
		l = m.Missionlbsdata.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Packetid))
	if len(m.Namekeys) > 0 {
		for _, e := range m.Namekeys {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Packets) > 0 {
		for _, e := range m.Packets {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stamp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Exchange))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ViewersExternalTotal))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ViewersExternalSteam))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingStart) Size() (n int) {
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.TicketData)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClientVersion))
	if m.TournamentMatch != nil {
		l = m.TournamentMatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingStop) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Abandon))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Size() (n int) {
	var l int
	_ = l
	if len(m.Gameserverpings) > 0 {
		for _, e := range m.Gameserverpings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.OffsetIndex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.FinalBatch))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchmaking))
	if len(m.WaitingAccountIdSessions) > 0 {
		for _, e := range m.WaitingAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	l = len(m.Error)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.OngoingmatchAccountIdSessions) > 0 {
		for _, e := range m.OngoingmatchAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.GlobalStats != nil {
		l = m.GlobalStats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.FailpingAccountIdSessions) > 0 {
		for _, e := range m.FailpingAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.PenaltyAccountIdSessions) > 0 {
		for _, e := range m.PenaltyAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.FailreadyAccountIdSessions) > 0 {
		for _, e := range m.FailreadyAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.VacbannedAccountIdSessions) > 0 {
		for _, e := range m.VacbannedAccountIdSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.ServerIpaddressMask != nil {
		l = m.ServerIpaddressMask.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Notes) > 0 {
		for _, e := range m.Notes {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.PenaltyAccountIdSessionsGreen) > 0 {
		for _, e := range m.PenaltyAccountIdSessionsGreen {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.InsufficientlevelSessions) > 0 {
		for _, e := range m.InsufficientlevelSessions {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RegionId))
	n += 5
	n += 5
	return n
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventStageId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId_0))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId_1))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MapsCount))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MapsCurrent))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdStart))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdVeto1))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdPickn))
	if len(m.Drafts) > 0 {
		for _, e := range m.Drafts {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Mapid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamIdCt))
	return n
}

func (m *CPreMatchInfoData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PredictionsPct))
	if m.Draft != nil {
		l = m.Draft.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CPreMatchInfoData_TeamStats) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchInfoIdxtxt))
	l = len(m.MatchInfoTxt)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.MatchInfoTeams) > 0 {
		for _, s := range m.MatchInfoTeams {
			l = len(s)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Size() (n int) {
	var l int
	_ = l
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.EncryptionKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.EncryptionKeyPub))
	if len(m.PartyIds) > 0 {
		for _, e := range m.PartyIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvMasterSteamid))
	if m.TournamentEvent != nil {
		l = m.TournamentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.TournamentCastersAccountIds) > 0 {
		for _, e := range m.TournamentCastersAccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvRelaySteamid))
	if m.PreMatchData != nil {
		l = m.PreMatchData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GcReservationSent))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	if m.TvInfo != nil {
		l = m.TvInfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.RewardPlayerAccounts) > 0 {
		for _, e := range m.RewardPlayerAccounts {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.IdlePlayerAccounts) > 0 {
		for _, e := range m.IdlePlayerAccounts {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrDefIdx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrValue))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardItemAttrRewardIdx))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RewardDropList))
	l = len(m.TournamentTag)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.ServerAddress)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reservationid))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Map)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Round))
	if len(m.Kills) > 0 {
		for _, e := range m.Kills {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Assists) > 0 {
		for _, e := range m.Assists {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Deaths) > 0 {
		for _, e := range m.Deaths {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Pings) > 0 {
		for _, e := range m.Pings {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.RoundResult))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchResult))
	if len(m.TeamScores) > 0 {
		for _, e := range m.TeamScores {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReservationStage))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchDuration))
	if len(m.EnemyKills) > 0 {
		for _, e := range m.EnemyKills {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.EnemyHeadshots) > 0 {
		for _, e := range m.EnemyHeadshots {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_3Ks) > 0 {
		for _, e := range m.Enemy_3Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_4Ks) > 0 {
		for _, e := range m.Enemy_4Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Enemy_5Ks) > 0 {
		for _, e := range m.Enemy_5Ks {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.Mvps) > 0 {
		for _, e := range m.Mvps {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCount))
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCountTv))
	n += 2 + sovCstrike15Gcmessages(uint64(m.SpectatorsCountLnk))
	if len(m.EnemyKillsAgg) > 0 {
		for _, e := range m.EnemyKillsAgg {
			n += 2 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if m.DropInfo != nil {
		l = m.DropInfo.Size()
		n += 2 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountMvp))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Size() (n int) {
	var l int
	_ = l
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rematch))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReplayToken))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReplayClusterId))
	n += 2
	if m.MatchEndQuestData != nil {
		l = m.MatchEndQuestData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerVersion))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.Ongoingmatch != nil {
		l = m.Ongoingmatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.GlobalStats != nil {
		l = m.GlobalStats.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltySeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltyReason))
	n += 1 + sovCstrike15Gcmessages(uint64(m.VacBanned))
	if m.Ranking != nil {
		l = m.Ranking.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.Medals != nil {
		l = m.Medals.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.MyCurrentEvent != nil {
		l = m.MyCurrentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.MyCurrentEventTeams) > 0 {
		for _, e := range m.MyCurrentEventTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.MyCurrentTeam != nil {
		l = m.MyCurrentTeam.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.MyCurrentEventStages) > 0 {
		for _, e := range m.MyCurrentEventStages {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.SurveyVote))
	if m.Activity != nil {
		l = m.Activity.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerLevel))
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerCurXp))
	n += 2 + sovCstrike15Gcmessages(uint64(m.PlayerXpBonusFlags))
	return n
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Size() (n int) {
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.SettingType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.SettingValue))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.AbandonedMatch != nil {
		l = m.AbandonedMatch.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltySeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PenaltyReason))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	if m.Reservation != nil {
		l = m.Reservation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Size() (n int) {
	var l int
	_ = l
	if len(m.Rankings) > 0 {
		for _, e := range m.Rankings {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	return n
}

func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Size() (n int) {
	var l int
	_ = l
	l = len(m.MainPostUrl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Seconds))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAimbot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptWallhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptSpeedhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTeamharm))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTextabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptVoiceabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tokens))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportServer) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptPoorperf))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAbusivemodels))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptBadmotd))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptListingabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptInventoryabuse))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientReportResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ConfirmationId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ResponseType))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ResponseResult))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Tokens))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	return n
}

func (m *WatchableMatchInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvPort))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvSpectators))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TvTime))
	if m.TvWatchPassword != nil {
		l = len(m.TvWatchPassword)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClDecryptdataKey))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ClDecryptdataKeyPub))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	l = len(m.GameMapgroup)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.GameMap)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ReservationId))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Version))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.JoinToken))
	n += 1 + sovCstrike15Gcmessages(uint64(m.JoinIpp))
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	l = len(m.Errormsg)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Version))
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Serverid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerIp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerPort))
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MissionId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CampaignId))
	return n
}

func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Size() (n int) {
	var l int
	_ = l
	if len(m.XpProgressData) > 0 {
		for _, e := range m.XpProgressData {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CurrentXp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.CurrentLevel))
	n += 1 + sovCstrike15Gcmessages(uint64(m.UpgradedDefidx))
	return n
}

func (m *CMsgGCCStrike15V2_WatchInfoUsers) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountIds) > 0 {
		for _, e := range m.AccountIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	if len(m.WatchableMatchInfos) > 0 {
		for _, e := range m.WatchableMatchInfos {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.ExtendedTimeout))
	return n
}

func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId_Deprecated))
	if len(m.AccountIds_Deprecated) > 0 {
		for _, e := range m.AccountIds_Deprecated {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestLevel))
	return n
}

func (m *CMsgGCCStrike15V2_PlayersProfile) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.RequestId))
	if len(m.AccountProfiles) > 0 {
		for _, e := range m.AccountProfiles {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Suspectid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptAimbot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptWallhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptSpeedhack))
	n += 1 + sovCstrike15Gcmessages(uint64(m.RptTeamharm))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	l = len(m.Caseurl)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Verdict))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timestamp))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Throttleseconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Suspectid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Numrounds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Fractionrounds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Streakconvictions))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Reason))
	return n
}

func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Statusid))
	return n
}

func (m *CClientHeaderOverwatchEvidence) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Caseid))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	if m.Payload != nil {
		l = len(m.Payload)
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Id))
	if len(m.Args) > 0 {
		for _, b := range m.Args {
			l = len(b)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Size() (n int) {
	var l int
	_ = l
	if m.Serverinfo != nil {
		l = m.Serverinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.MatchEndQuestData != nil {
		l = m.MatchEndQuestData.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CEconItemPreviewDataBlock) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintindex))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Rarity))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Quality))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintwear))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Paintseed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Killeaterscoretype))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Killeatervalue))
	l = len(m.Customname)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Inventory))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Origin))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Questid))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Dropreason))
	return n
}

func (m *CEconItemPreviewDataBlock_Sticker) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Slot))
	n += 1 + sovCstrike15Gcmessages(uint64(m.StickerId))
	n += 5
	n += 5
	n += 5
	return n
}

func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Size() (n int) {
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgItemAcknowledged) Size() (n int) {
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamS))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamA))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamD))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ParamM))
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Size() (n int) {
	var l int
	_ = l
	if m.Iteminfo != nil {
		l = m.Iteminfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defindex))
	if len(m.Accountids) > 0 {
		for _, e := range m.Accountids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	return n
}

func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Outcomeid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Token))
	return n
}

func (m *CDataGCCStrike15V2_MatchInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Matchtime))
	if m.Watchablematchinfo != nil {
		l = m.Watchablematchinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if m.RoundstatsLegacy != nil {
		l = m.RoundstatsLegacy.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.Roundstatsall) > 0 {
		for _, e := range m.Roundstatsall {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroupTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.TeamId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Score))
	n += 2
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroup) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Groupid))
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Picks_Deprecated))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.StageIds) > 0 {
		for _, e := range m.StageIds {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Picklockuntiltime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Pickableteams))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PointsPerPick))
	if len(m.Picks) > 0 {
		for _, e := range m.Picks {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Size() (n int) {
	var l int
	_ = l
	if len(m.Pickids) > 0 {
		for _, e := range m.Pickids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentSection) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	l = len(m.Name)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.Desc)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CDataGCCStrike15V2_TournamentInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.TournamentEvent != nil {
		l = m.TournamentEvent.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	if len(m.TournamentTeams) > 0 {
		for _, e := range m.TournamentTeams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_MatchList) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Msgrequestid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Servertime))
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	if m.Tournamentinfo != nil {
		l = m.Tournamentinfo.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	return n
}

func (m *CMsgGCCStrike15V2_Predictions) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	if len(m.GroupMatchTeamPicks) > 0 {
		for _, e := range m.GroupMatchTeamPicks {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Groupid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Index))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Teamid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.EventId))
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Pick))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Itemid))
	return n
}

func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Sectionid))
	if len(m.Slots) > 0 {
		for _, e := range m.Slots {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CAttribute_String) Size() (n int) {
	var l int
	_ = l
	l = len(m.Value)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCToGCReloadVersions) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CMsgCStrike15Welcome) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.StoreItemHash))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timeplayedconsecutively))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimeFirstPlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.LastTimePlayed))
	n += 1 + sovCstrike15Gcmessages(uint64(m.LastIpAddress))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Gscookieid))
	n += 2 + sovCstrike15Gcmessages(uint64(m.Uniqueid))
	return n
}

func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.ValueName)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ValueInt))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerAddr))
	n += 1 + sovCstrike15Gcmessages(uint64(m.ServerPort))
	if len(m.ChokedBlocks) > 0 {
		for _, s := range m.ChokedBlocks {
			l = len(s)
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	if len(m.Viewangles) > 0 {
		for _, e := range m.Viewangles {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	n += 1 + sovCstrike15Gcmessages(uint64(m.Type))
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Servertime))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TimePeriodSeconds))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TotalGiftsGiven))
	n += 1 + sovCstrike15Gcmessages(uint64(m.TotalGivers))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovCstrike15Gcmessages(uint64(l))
		}
	}
	return n
}

func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Gifts))
	return n
}

func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.SurveyId))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Vote))
	return n
}

func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	return n
}

func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Accountid))
	l = len(m.Path)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	l = len(m.File)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Crc))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Hash))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Len))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PackNumber))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PackFileId))
	return n
}

func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Eventid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stageid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.GameType))
	if len(m.Teamids) > 0 {
		for _, e := range m.Teamids {
			n += 1 + sovCstrike15Gcmessages(uint64(e))
		}
	}
	return n
}

func (m *CSOEconCoupon) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Entryid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Defidx))
	n += 5
	return n
}

func (m *CSOQuestProgress) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Questid))
	n += 1 + sovCstrike15Gcmessages(uint64(m.PointsRemaining))
	n += 1 + sovCstrike15Gcmessages(uint64(m.BonusPoints))
	return n
}

func (m *CSOPersonaDataPublic) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.PlayerLevel))
	if m.Commendation != nil {
		l = m.Commendation.Size()
		n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	}
	n += 2
	return n
}

func (m *CMsgGC_GlobalGame_Subscribe) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	return n
}

func (m *CMsgGC_GlobalGame_Unsubscribe) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Timeleft))
	return n
}

func (m *CMsgGC_GlobalGame_Play) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Gametimems))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Msperpoint))
	return n
}

func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Acknowledged))
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Ticket))
	n += 1 + sovCstrike15Gcmessages(uint64(m.Os))
	return n
}

func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.Stage))
	return n
}

func (m *CMsgGCCStrike15V2_ClientToGCChat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.MatchId))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func (m *CMsgGCCStrike15V2_GCToClientChat) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovCstrike15Gcmessages(uint64(m.AccountId))
	l = len(m.Text)
	n += 1 + l + sovCstrike15Gcmessages(uint64(l))
	return n
}

func sovCstrike15Gcmessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCstrike15Gcmessages(x uint64) (n int) {
	return sovCstrike15Gcmessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameServerPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameServerPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameServerPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameserverId", wireType)
			}
			m.GameserverId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameserverId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			m.Ping = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ping |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			m.Ip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ip |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			m.Instances = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Instances |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetailedSearchStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetailedSearchStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetailedSearchStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTimeAvg", wireType)
			}
			m.SearchTimeAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchTimeAvg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersSearching", wireType)
			}
			m.PlayersSearching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersSearching |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerNick", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerNick = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDob", wireType)
			}
			m.PlayerDob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerDob |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &TournamentPlayer{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimeStart", wireType)
			}
			m.EventTimeStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTimeStart |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventTimeEnd", wireType)
			}
			m.EventTimeEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventTimeEnd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPublic", wireType)
			}
			m.EventPublic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventPublic |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventStageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSectionId", wireType)
			}
			m.ActiveSectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSectionId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersOnline", wireType)
			}
			m.PlayersOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersOnline |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServersOnline", wireType)
			}
			m.ServersOnline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServersOnline |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayersSearching", wireType)
			}
			m.PlayersSearching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayersSearching |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServersAvailable", wireType)
			}
			m.ServersAvailable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServersAvailable |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OngoingMatches", wireType)
			}
			m.OngoingMatches = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OngoingMatches |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchTimeAvg", wireType)
			}
			m.SearchTimeAvg = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SearchTimeAvg |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchStatistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchStatistics = append(m.SearchStatistics, &DetailedSearchStatistic{})
			if err := m.SearchStatistics[len(m.SearchStatistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPostUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainPostUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredAppidVersion", wireType)
			}
			m.RequiredAppidVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredAppidVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricesheetVersion", wireType)
			}
			m.PricesheetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PricesheetVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitchStreamsVersion", wireType)
			}
			m.TwitchStreamsVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwitchStreamsVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveTournamentEventid", wireType)
			}
			m.ActiveTournamentEventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveTournamentEventid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveSurveyId", wireType)
			}
			m.ActiveSurveyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveSurveyId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idkey", wireType)
			}
			m.Idkey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idkey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticElement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticElement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticElement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idkey", wireType)
			}
			m.Idkey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idkey |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Values = append(m.Values, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Values = append(m.Values, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationalStatisticsPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationalStatisticsPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationalStatisticsPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packetid", wireType)
			}
			m.Packetid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packetid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mstimestamp", wireType)
			}
			m.Mstimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mstimestamp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &OperationalStatisticElement{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerRankingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerRankingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerRankingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankId", wireType)
			}
			m.RankId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wins", wireType)
			}
			m.Wins = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wins |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankChange", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RankChange = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerCommendationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerCommendationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerCommendationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdFriendly", wireType)
			}
			m.CmdFriendly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdFriendly |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdTeaching", wireType)
			}
			m.CmdTeaching = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdTeaching |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdLeader", wireType)
			}
			m.CmdLeader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdLeader |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerMedalsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerMedalsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerMedalsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalTeam", wireType)
			}
			m.MedalTeam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalTeam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalCombat", wireType)
			}
			m.MedalCombat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalCombat |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalWeapon", wireType)
			}
			m.MedalWeapon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalWeapon |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalGlobal", wireType)
			}
			m.MedalGlobal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalGlobal |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalArms", wireType)
			}
			m.MedalArms = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalArms |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DisplayItemsDefidx = append(m.DisplayItemsDefidx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DisplayItemsDefidx = append(m.DisplayItemsDefidx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayItemsDefidx", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeaturedDisplayItemDefidx", wireType)
			}
			m.FeaturedDisplayItemDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeaturedDisplayItemDefidx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountActivity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountActivity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountActivity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			m.Map = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Map |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TournamentMatchSetup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TournamentMatchSetup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TournamentMatchSetup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdCt", wireType)
			}
			m.TeamIdCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdCt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdT", wireType)
			}
			m.TeamIdT = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdT |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerHltvInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerHltvInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerHltvInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvUdpPort", wireType)
			}
			m.TvUdpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvUdpPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvWatchKey", wireType)
			}
			m.TvWatchKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvWatchKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvSlots", wireType)
			}
			m.TvSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvSlots |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvClients", wireType)
			}
			m.TvClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvClients |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvProxies", wireType)
			}
			m.TvProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvProxies |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvTime", wireType)
			}
			m.TvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMapgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMapgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvMasterSteamid", wireType)
			}
			m.TvMasterSteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvMasterSteamid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalSlots", wireType)
			}
			m.TvLocalSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalSlots |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalClients", wireType)
			}
			m.TvLocalClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalClients |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvLocalProxies", wireType)
			}
			m.TvLocalProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvLocalProxies |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySlots", wireType)
			}
			m.TvRelaySlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySlots |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayClients", wireType)
			}
			m.TvRelayClients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayClients |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayProxies", wireType)
			}
			m.TvRelayProxies = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayProxies |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayAddress", wireType)
			}
			m.TvRelayAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayAddress |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelayPort", wireType)
			}
			m.TvRelayPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelayPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySteamid", wireType)
			}
			m.TvRelaySteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySteamid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IpAddressMask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IpAddressMask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IpAddressMask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			m.A = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			m.C = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.C |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field D", wireType)
			}
			m.D = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.D |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XpProgressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XpProgressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XpProgressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpPoints", wireType)
			}
			m.XpPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XpPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpCategory", wireType)
			}
			m.XpCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XpCategory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchEndItemUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchEndItemUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchEndItemUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemAttrDefidx", wireType)
			}
			m.ItemAttrDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemAttrDefidx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemAttrDeltaValue", wireType)
			}
			m.ItemAttrDeltaValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemAttrDeltaValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreLeaderboardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreLeaderboardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountentries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountentries = append(m.Accountentries, &ScoreLeaderboardData_AccountEntries{})
			if err := m.Accountentries[len(m.Accountentries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchentries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matchentries = append(m.Matchentries, &ScoreLeaderboardData_Entry{})
			if err := m.Matchentries[len(m.Matchentries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreLeaderboardData_AccountEntries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &ScoreLeaderboardData_Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerQuestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerQuestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerQuestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuesterAccountId", wireType)
			}
			m.QuesterAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuesterAccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestItemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestItemData = append(m.QuestItemData, &PlayerQuestData_QuestItemData{})
			if err := m.QuestItemData[len(m.QuestItemData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpProgressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XpProgressData = append(m.XpProgressData, &XpProgressData{})
			if err := m.XpProgressData[len(m.XpProgressData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePlayed", wireType)
			}
			m.TimePlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimePlayed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MmGameMode", wireType)
			}
			m.MmGameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MmGameMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemUpdates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemUpdates = append(m.ItemUpdates, &MatchEndItemUpdates{})
			if err := m.ItemUpdates[len(m.ItemUpdates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerQuestData_QuestItemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestItemData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestItemData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestId", wireType)
			}
			m.QuestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestNormalPointsEarned", wireType)
			}
			m.QuestNormalPointsEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestNormalPointsEarned |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestBonusPointsEarned", wireType)
			}
			m.QuestBonusPointsEarned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestBonusPointsEarned |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_ServerQuestUpdateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_ServerQuestUpdateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_ServerQuestUpdateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerQuestData = append(m.PlayerQuestData, &PlayerQuestData{})
			if err := m.PlayerQuestData[len(m.PlayerQuestData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinaryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BinaryData = append(m.BinaryData[:0], dAtA[iNdEx:postIndex]...)
			if m.BinaryData == nil {
				m.BinaryData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MmGameMode", wireType)
			}
			m.MmGameMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MmGameMode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missionlbsdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Missionlbsdata == nil {
				m.Missionlbsdata = &ScoreLeaderboardData{}
			}
			if err := m.Missionlbsdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGCOperationalStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGCOperationalStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packetid", wireType)
			}
			m.Packetid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Packetid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namekeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namekeys = append(m.Namekeys, &OperationalStatisticDescription{})
			if err := m.Namekeys[len(m.Namekeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Packets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Packets = append(m.Packets, &OperationalStatisticsPacket{})
			if err := m.Packets[len(m.Packets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stamp", wireType)
			}
			m.Stamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exchange", wireType)
			}
			m.Exchange = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exchange |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ServerReservationUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ServerReservationUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ServerReservationUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewersExternalTotal", wireType)
			}
			m.ViewersExternalTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewersExternalTotal |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewersExternalSteam", wireType)
			}
			m.ViewersExternalSteam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewersExternalSteam |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			m.ClientVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentMatch == nil {
				m.TournamentMatch = &TournamentMatchSetup{}
			}
			if err := m.TournamentMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingStop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingStop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abandon", wireType)
			}
			m.Abandon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Abandon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2ServerPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2ServerPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gameserverpings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gameserverpings = append(m.Gameserverpings, &GameServerPing{})
			if err := m.Gameserverpings[len(m.Gameserverpings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetIndex", wireType)
			}
			m.OffsetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalBatch", wireType)
			}
			m.FinalBatch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalBatch |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchmaking", wireType)
			}
			m.Matchmaking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchmaking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WaitingAccountIdSessions = append(m.WaitingAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WaitingAccountIdSessions = append(m.WaitingAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingAccountIdSessions", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OngoingmatchAccountIdSessions = append(m.OngoingmatchAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OngoingmatchAccountIdSessions = append(m.OngoingmatchAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OngoingmatchAccountIdSessions", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalStats == nil {
				m.GlobalStats = &GlobalStatistics{}
			}
			if err := m.GlobalStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailpingAccountIdSessions = append(m.FailpingAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailpingAccountIdSessions = append(m.FailpingAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailpingAccountIdSessions", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PenaltyAccountIdSessions = append(m.PenaltyAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PenaltyAccountIdSessions = append(m.PenaltyAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyAccountIdSessions", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FailreadyAccountIdSessions = append(m.FailreadyAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FailreadyAccountIdSessions = append(m.FailreadyAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FailreadyAccountIdSessions", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VacbannedAccountIdSessions = append(m.VacbannedAccountIdSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VacbannedAccountIdSessions = append(m.VacbannedAccountIdSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VacbannedAccountIdSessions", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIpaddressMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIpaddressMask == nil {
				m.ServerIpaddressMask = &IpAddressMask{}
			}
			if err := m.ServerIpaddressMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes, &CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note{})
			if err := m.Notes[len(m.Notes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PenaltyAccountIdSessionsGreen = append(m.PenaltyAccountIdSessionsGreen, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PenaltyAccountIdSessionsGreen = append(m.PenaltyAccountIdSessionsGreen, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyAccountIdSessionsGreen", wireType)
			}
		case 15:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InsufficientlevelSessions = append(m.InsufficientlevelSessions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InsufficientlevelSessions = append(m.InsufficientlevelSessions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InsufficientlevelSessions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientUpdate_Note) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Note: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Note: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionR", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.RegionR = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Distance = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentMatchDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentMatchDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStageId", wireType)
			}
			m.EventStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId_0", wireType)
			}
			m.TeamId_0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId_0 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId_1", wireType)
			}
			m.TeamId_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId_1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapsCount", wireType)
			}
			m.MapsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapsCurrent", wireType)
			}
			m.MapsCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapsCurrent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdStart", wireType)
			}
			m.TeamIdStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdStart |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdVeto1", wireType)
			}
			m.TeamIdVeto1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdVeto1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdPickn", wireType)
			}
			m.TeamIdPickn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdPickn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drafts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Drafts = append(m.Drafts, &CDataGCCStrike15V2_TournamentMatchDraft_Entry{})
			if err := m.Drafts[len(m.Drafts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentMatchDraft_Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamIdCt", wireType)
			}
			m.TeamIdCt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamIdCt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPreMatchInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPreMatchInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPreMatchInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PredictionsPct", wireType)
			}
			m.PredictionsPct = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PredictionsPct |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Draft == nil {
				m.Draft = &CDataGCCStrike15V2_TournamentMatchDraft{}
			}
			if err := m.Draft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &CPreMatchInfoData_TeamStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPreMatchInfoData_TeamStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoIdxtxt", wireType)
			}
			m.MatchInfoIdxtxt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchInfoIdxtxt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoTxt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchInfoTxt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchInfoTeams", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchInfoTeams = append(m.MatchInfoTeams, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKey", wireType)
			}
			m.EncryptionKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKeyPub", wireType)
			}
			m.EncryptionKeyPub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptionKeyPub |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PartyIds = append(m.PartyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PartyIds = append(m.PartyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PartyIds", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, &IpAddressMask{})
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvMasterSteamid", wireType)
			}
			m.TvMasterSteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvMasterSteamid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentEvent == nil {
				m.TournamentEvent = &TournamentEvent{}
			}
			if err := m.TournamentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TournamentCastersAccountIds = append(m.TournamentCastersAccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TournamentCastersAccountIds = append(m.TournamentCastersAccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentCastersAccountIds", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvRelaySteamid", wireType)
			}
			m.TvRelaySteamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvRelaySteamid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreMatchData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreMatchData == nil {
				m.PreMatchData = &CPreMatchInfoData{}
			}
			if err := m.PreMatchData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerReservationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerReservationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcReservationSent", wireType)
			}
			m.GcReservationSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GcReservationSent |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TvInfo == nil {
				m.TvInfo = &ServerHltvInfo{}
			}
			if err := m.TvInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RewardPlayerAccounts = append(m.RewardPlayerAccounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RewardPlayerAccounts = append(m.RewardPlayerAccounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPlayerAccounts", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IdlePlayerAccounts = append(m.IdlePlayerAccounts, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IdlePlayerAccounts = append(m.IdlePlayerAccounts, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IdlePlayerAccounts", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrDefIdx", wireType)
			}
			m.RewardItemAttrDefIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrDefIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrValue", wireType)
			}
			m.RewardItemAttrValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardItemAttrRewardIdx", wireType)
			}
			m.RewardItemAttrRewardIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardItemAttrRewardIdx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDropList", wireType)
			}
			m.RewardDropList = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardDropList |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientReserve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerRoundStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerRoundStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservationid", wireType)
			}
			m.Reservationid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reservationid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Kills = append(m.Kills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Kills = append(m.Kills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Assists = append(m.Assists, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Assists = append(m.Assists, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Assists", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Deaths = append(m.Deaths, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Deaths = append(m.Deaths, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Deaths", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scores = append(m.Scores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scores = append(m.Scores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pings = append(m.Pings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pings = append(m.Pings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pings", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundResult", wireType)
			}
			m.RoundResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundResult |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchResult", wireType)
			}
			m.MatchResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchResult |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamScores = append(m.TeamScores, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamScores = append(m.TeamScores, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamScores", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationStage", wireType)
			}
			m.ReservationStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationStage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchDuration", wireType)
			}
			m.MatchDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyKills = append(m.EnemyKills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyKills = append(m.EnemyKills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyKills", wireType)
			}
		case 17:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyHeadshots = append(m.EnemyHeadshots, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyHeadshots = append(m.EnemyHeadshots, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyHeadshots", wireType)
			}
		case 18:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_3Ks = append(m.Enemy_3Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_3Ks = append(m.Enemy_3Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_3Ks", wireType)
			}
		case 19:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_4Ks = append(m.Enemy_4Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_4Ks = append(m.Enemy_4Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_4Ks", wireType)
			}
		case 20:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Enemy_5Ks = append(m.Enemy_5Ks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Enemy_5Ks = append(m.Enemy_5Ks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Enemy_5Ks", wireType)
			}
		case 21:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mvps = append(m.Mvps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mvps = append(m.Mvps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mvps", wireType)
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCount", wireType)
			}
			m.SpectatorsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCountTv", wireType)
			}
			m.SpectatorsCountTv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCountTv |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpectatorsCountLnk", wireType)
			}
			m.SpectatorsCountLnk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpectatorsCountLnk |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnemyKillsAgg = append(m.EnemyKillsAgg, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnemyKillsAgg = append(m.EnemyKillsAgg, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyKillsAgg", wireType)
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropInfo == nil {
				m.DropInfo = &CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo{}
			}
			if err := m.DropInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerRoundStats_DropInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountMvp", wireType)
			}
			m.AccountMvp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountMvp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServerMatchEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServerMatchEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &CMsgGCCStrike15V2_MatchmakingGC2ServerConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rematch", wireType)
			}
			m.Rematch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rematch |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayToken", wireType)
			}
			m.ReplayToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayToken |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayClusterId", wireType)
			}
			m.ReplayClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplayClusterId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedMatch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AbortedMatch = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEndQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchEndQuestData == nil {
				m.MatchEndQuestData = &CMsgGC_ServerQuestUpdateData{}
			}
			if err := m.MatchEndQuestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerVersion", wireType)
			}
			m.ServerVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerVersion |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingClient2GCHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2GCHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingClient2GCHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientHello) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientHello: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ongoingmatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ongoingmatch == nil {
				m.Ongoingmatch = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Ongoingmatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GlobalStats == nil {
				m.GlobalStats = &GlobalStatistics{}
			}
			if err := m.GlobalStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltySeconds", wireType)
			}
			m.PenaltySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltySeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyReason", wireType)
			}
			m.PenaltyReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VacBanned", wireType)
			}
			m.VacBanned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VacBanned |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ranking == nil {
				m.Ranking = &PlayerRankingInfo{}
			}
			if err := m.Ranking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Medals == nil {
				m.Medals = &PlayerMedalsInfo{}
			}
			if err := m.Medals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyCurrentEvent == nil {
				m.MyCurrentEvent = &TournamentEvent{}
			}
			if err := m.MyCurrentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEventTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyCurrentEventTeams = append(m.MyCurrentEventTeams, &TournamentTeam{})
			if err := m.MyCurrentEventTeams[len(m.MyCurrentEventTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyCurrentTeam == nil {
				m.MyCurrentTeam = &TournamentTeam{}
			}
			if err := m.MyCurrentTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCurrentEventStages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyCurrentEventStages = append(m.MyCurrentEventStages, &TournamentEvent{})
			if err := m.MyCurrentEventStages[len(m.MyCurrentEventStages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurveyVote", wireType)
			}
			m.SurveyVote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurveyVote |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activity == nil {
				m.Activity = &AccountActivity{}
			}
			if err := m.Activity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerCurXp", wireType)
			}
			m.PlayerCurXp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerCurXp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerXpBonusFlags", wireType)
			}
			m.PlayerXpBonusFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerXpBonusFlags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AccountPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AccountPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &CMsgGCCStrike15V2_AccountPrivacySettings_Setting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AccountPrivacySettings_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			m.SettingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingValue", wireType)
			}
			m.SettingValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingValue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ClientAbandon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbandonedMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AbandonedMatch == nil {
				m.AbandonedMatch = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.AbandonedMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltySeconds", wireType)
			}
			m.PenaltySeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltySeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyReason", wireType)
			}
			m.PenaltyReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PenaltyReason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingServer2GCKick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServer2GCKick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingServer2GCKick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reservation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reservation == nil {
				m.Reservation = &CMsgGCCStrike15V2_MatchmakingGC2ServerReserve{}
			}
			if err := m.Reservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingGC2ServerRankUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rankings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rankings = append(m.Rankings, &PlayerRankingInfo{})
			if err := m.Rankings[len(m.Rankings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchmakingOperator2GCBlogUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainPostUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainPostUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ServerNotificationForUserPenalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerNotificationForUserPenalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAimbot", wireType)
			}
			m.RptAimbot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAimbot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptWallhack", wireType)
			}
			m.RptWallhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptWallhack |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptSpeedhack", wireType)
			}
			m.RptSpeedhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptSpeedhack |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTeamharm", wireType)
			}
			m.RptTeamharm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTeamharm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTextabuse", wireType)
			}
			m.RptTextabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTextabuse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptVoiceabuse", wireType)
			}
			m.RptVoiceabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptVoiceabuse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientCommendPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientCommendPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientCommendPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			m.Tokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokens |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptPoorperf", wireType)
			}
			m.RptPoorperf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptPoorperf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAbusivemodels", wireType)
			}
			m.RptAbusivemodels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAbusivemodels |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptBadmotd", wireType)
			}
			m.RptBadmotd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptBadmotd |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptListingabuse", wireType)
			}
			m.RptListingabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptListingabuse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptInventoryabuse", wireType)
			}
			m.RptInventoryabuse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptInventoryabuse |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmationId", wireType)
			}
			m.ConfirmationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfirmationId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseType", wireType)
			}
			m.ResponseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseResult", wireType)
			}
			m.ResponseResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponseResult |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			m.Tokens = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tokens |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestWatchInfoFriends) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchableMatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchableMatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchableMatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvPort", wireType)
			}
			m.TvPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvSpectators", wireType)
			}
			m.TvSpectators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvSpectators |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvTime", wireType)
			}
			m.TvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TvTime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TvWatchPassword", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TvWatchPassword = append(m.TvWatchPassword[:0], dAtA[iNdEx:postIndex]...)
			if m.TvWatchPassword == nil {
				m.TvWatchPassword = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClDecryptdataKey", wireType)
			}
			m.ClDecryptdataKey = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClDecryptdataKey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClDecryptdataKeyPub", wireType)
			}
			m.ClDecryptdataKeyPub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClDecryptdataKeyPub |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMapgroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMapgroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameMap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameMap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservationId", wireType)
			}
			m.ReservationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReservationId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinFriendData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinFriendData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinFriendData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinToken", wireType)
			}
			m.JoinToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinToken |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinIpp", wireType)
			}
			m.JoinIpp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinIpp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errormsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errormsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestJoinServerData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinServerData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestJoinServerData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverid", wireType)
			}
			m.Serverid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Serverid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIp", wireType)
			}
			m.ServerIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &CMsgGCCStrike15V2_MatchmakingGC2ClientReserve{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCstrike15V2_ClientRequestNewMission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_ClientRequestNewMission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_ClientRequestNewMission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissionId", wireType)
			}
			m.MissionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissionId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCstrike15V2_GC2ServerNotifyXPRewarded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCstrike15_v2_GC2ServerNotifyXPRewarded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XpProgressData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XpProgressData = append(m.XpProgressData, &XpProgressData{})
			if err := m.XpProgressData[len(m.XpProgressData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentXp", wireType)
			}
			m.CurrentXp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentXp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLevel", wireType)
			}
			m.CurrentLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradedDefidx", wireType)
			}
			m.UpgradedDefidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradedDefidx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_WatchInfoUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_WatchInfoUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_WatchInfoUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds = append(m.AccountIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds = append(m.AccountIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WatchableMatchInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WatchableMatchInfos = append(m.WatchableMatchInfos, &WatchableMatchInfo{})
			if err := m.WatchableMatchInfos[len(m.WatchableMatchInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedTimeout", wireType)
			}
			m.ExtendedTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedTimeout |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientRequestPlayersProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestPlayersProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientRequestPlayersProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId_Deprecated", wireType)
			}
			m.RequestId_Deprecated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId_Deprecated |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AccountIds_Deprecated = append(m.AccountIds_Deprecated, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AccountIds_Deprecated = append(m.AccountIds_Deprecated, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountIds_Deprecated", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestLevel", wireType)
			}
			m.RequestLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestLevel |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayersProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayersProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayersProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountProfiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountProfiles = append(m.AccountProfiles, &CMsgGCCStrike15V2_MatchmakingGC2ClientHello{})
			if err := m.AccountProfiles[len(m.AccountProfiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspectid", wireType)
			}
			m.Suspectid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suspectid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionid", wireType)
			}
			m.Fractionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptAimbot", wireType)
			}
			m.RptAimbot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptAimbot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptWallhack", wireType)
			}
			m.RptWallhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptWallhack |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptSpeedhack", wireType)
			}
			m.RptSpeedhack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptSpeedhack |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptTeamharm", wireType)
			}
			m.RptTeamharm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptTeamharm |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseAssignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caseurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verdict", wireType)
			}
			m.Verdict = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verdict |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Throttleseconds", wireType)
			}
			m.Throttleseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Throttleseconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspectid", wireType)
			}
			m.Suspectid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Suspectid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionid", wireType)
			}
			m.Fractionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numrounds", wireType)
			}
			m.Numrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Numrounds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fractionrounds", wireType)
			}
			m.Fractionrounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fractionrounds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streakconvictions", wireType)
			}
			m.Streakconvictions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Streakconvictions |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_PlayerOverwatchCaseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statusid", wireType)
			}
			m.Statusid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Statusid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CClientHeaderOverwatchEvidence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CClientHeaderOverwatchEvidence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CClientHeaderOverwatchEvidence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caseid", wireType)
			}
			m.Caseid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Caseid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientTextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCTextMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCTextMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCTextMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, make([]byte, postIndex-iNdEx))
			copy(m.Args[len(m.Args)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchEndRunRewardDrops) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRunRewardDrops: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRunRewardDrops: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serverinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Serverinfo == nil {
				m.Serverinfo = &CMsgGCCStrike15V2_MatchmakingServerReservationResponse{}
			}
			if err := m.Serverinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchEndQuestData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MatchEndQuestData == nil {
				m.MatchEndQuestData = &CMsgGC_ServerQuestUpdateData{}
			}
			if err := m.MatchEndQuestData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEconItemPreviewDataBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CEconItemPreviewDataBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CEconItemPreviewDataBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defindex", wireType)
			}
			m.Defindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintindex", wireType)
			}
			m.Paintindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rarity", wireType)
			}
			m.Rarity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rarity |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintwear", wireType)
			}
			m.Paintwear = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintwear |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paintseed", wireType)
			}
			m.Paintseed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paintseed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killeaterscoretype", wireType)
			}
			m.Killeaterscoretype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killeaterscoretype |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Killeatervalue", wireType)
			}
			m.Killeatervalue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Killeatervalue |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Customname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &CEconItemPreviewDataBlock_Sticker{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			m.Inventory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inventory |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questid", wireType)
			}
			m.Questid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dropreason", wireType)
			}
			m.Dropreason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dropreason |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CEconItemPreviewDataBlock_Sticker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sticker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sticker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StickerId", wireType)
			}
			m.StickerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StickerId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wear", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Wear = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Scale = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Rotation = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchEndRewardDropsNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchEndRewardDropsNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgItemAcknowledged) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgItemAcknowledged: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgItemAcknowledged: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamS", wireType)
			}
			m.ParamS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamS |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamA", wireType)
			}
			m.ParamA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamA |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamD", wireType)
			}
			m.ParamD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamD |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamM", wireType)
			}
			m.ParamM = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamM |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCEconPreviewDataBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iteminfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Iteminfo == nil {
				m.Iteminfo = &CEconItemPreviewDataBlock{}
			}
			if err := m.Iteminfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_TournamentMatchRewardDropsNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defindex", wireType)
			}
			m.Defindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defindex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Accountids = append(m.Accountids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Accountids = append(m.Accountids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestCurrentLiveGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestLiveGameForUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestRecentUserGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestRecentUserGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestTournamentGames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestTournamentGames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestTournamentGames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchListRequestFullGameInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchListRequestFullGameInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outcomeid", wireType)
			}
			m.Outcomeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Outcomeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_MatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_MatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_MatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchid", wireType)
			}
			m.Matchid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matchtime", wireType)
			}
			m.Matchtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Matchtime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watchablematchinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Watchablematchinfo == nil {
				m.Watchablematchinfo = &WatchableMatchInfo{}
			}
			if err := m.Watchablematchinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundstatsLegacy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundstatsLegacy == nil {
				m.RoundstatsLegacy = &CMsgGCCStrike15V2_MatchmakingServerRoundStats{}
			}
			if err := m.RoundstatsLegacy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roundstatsall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roundstatsall = append(m.Roundstatsall, &CMsgGCCStrike15V2_MatchmakingServerRoundStats{})
			if err := m.Roundstatsall[len(m.Roundstatsall)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroupTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroupTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroupTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correctpick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correctpick = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks_Deprecated", wireType)
			}
			m.Picks_Deprecated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Picks_Deprecated |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &CDataGCCStrike15V2_TournamentGroupTeam{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StageIds = append(m.StageIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StageIds = append(m.StageIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StageIds", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picklockuntiltime", wireType)
			}
			m.Picklockuntiltime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Picklockuntiltime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickableteams", wireType)
			}
			m.Pickableteams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pickableteams |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsPerPick", wireType)
			}
			m.PointsPerPick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointsPerPick |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Picks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Picks = append(m.Picks, &CDataGCCStrike15V2_TournamentGroup_Picks{})
			if err := m.Picks[len(m.Picks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentGroup_Picks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Picks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Picks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pickids = append(m.Pickids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pickids = append(m.Pickids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pickids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentSection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentSection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentSection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &CDataGCCStrike15V2_TournamentGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CDataGCCStrike15V2_TournamentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDataGCCStrike15_v2_TournamentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &CDataGCCStrike15V2_TournamentSection{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TournamentEvent == nil {
				m.TournamentEvent = &TournamentEvent{}
			}
			if err := m.TournamentEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TournamentTeams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TournamentTeams = append(m.TournamentTeams, &TournamentTeam{})
			if err := m.TournamentTeams[len(m.TournamentTeams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_MatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_MatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgrequestid", wireType)
			}
			m.Msgrequestid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgrequestid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servertime", wireType)
			}
			m.Servertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Servertime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &CDataGCCStrike15V2_MatchInfo{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, &TournamentTeam{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tournamentinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tournamentinfo == nil {
				m.Tournamentinfo = &CDataGCCStrike15V2_TournamentInfo{}
			}
			if err := m.Tournamentinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Predictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Predictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Predictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMatchTeamPicks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMatchTeamPicks = append(m.GroupMatchTeamPicks, &CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick{})
			if err := m.GroupMatchTeamPicks[len(m.GroupMatchTeamPicks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Predictions_GroupMatchTeamPick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMatchTeamPick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMatchTeamPick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groupid", wireType)
			}
			m.Groupid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Groupid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamid", wireType)
			}
			m.Teamid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teamid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Fantasy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Fantasy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &CMsgGCCStrike15V2_Fantasy_FantasyTeam{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasySlot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FantasySlot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FantasySlot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pick", wireType)
			}
			m.Pick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pick |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemid", wireType)
			}
			m.Itemid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Itemid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Fantasy_FantasyTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FantasyTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FantasyTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sectionid", wireType)
			}
			m.Sectionid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sectionid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slots = append(m.Slots, &CMsgGCCStrike15V2_Fantasy_FantasySlot{})
			if err := m.Slots[len(m.Slots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAttribute_String) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAttribute_String: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAttribute_String: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCToGCReloadVersions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCToGCReloadVersions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCToGCReloadVersions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgCStrike15Welcome) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgCStrike15Welcome: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgCStrike15Welcome: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreItemHash", wireType)
			}
			m.StoreItemHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreItemHash |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeplayedconsecutively", wireType)
			}
			m.Timeplayedconsecutively = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeplayedconsecutively |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeFirstPlayed", wireType)
			}
			m.TimeFirstPlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeFirstPlayed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimePlayed", wireType)
			}
			m.LastTimePlayed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimePlayed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIpAddress", wireType)
			}
			m.LastIpAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIpAddress |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gscookieid", wireType)
			}
			m.Gscookieid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gscookieid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uniqueid", wireType)
			}
			m.Uniqueid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uniqueid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientVarValueNotificationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientVarValueNotificationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueInt", wireType)
			}
			m.ValueInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueInt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			m.ServerAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerPort", wireType)
			}
			m.ServerPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChokedBlocks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChokedBlocks = append(m.ChokedBlocks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ServerVarValueNotificationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ServerVarValueNotificationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Viewangles = append(m.Viewangles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Viewangles = append(m.Viewangles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Viewangles", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GiftsLeaderboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servertime", wireType)
			}
			m.Servertime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Servertime |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimePeriodSeconds", wireType)
			}
			m.TimePeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimePeriodSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGiftsGiven", wireType)
			}
			m.TotalGiftsGiven = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGiftsGiven |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalGivers", wireType)
			}
			m.TotalGivers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalGivers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GiftsLeaderboardResponse_GiftLeaderboardEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftLeaderboardEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftLeaderboardEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			m.Gifts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gifts |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientSubmitSurveyVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientSubmitSurveyVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientSubmitSurveyVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurveyId", wireType)
			}
			m.SurveyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurveyId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			m.Vote = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vote |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Server2GCClientValidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCClientValidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCClientValidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Server2GCPureServerValidationFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crc", wireType)
			}
			m.Crc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Crc |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackNumber", wireType)
			}
			m.PackNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackFileId", wireType)
			}
			m.PackFileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackFileId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GC2ClientTournamentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTournamentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GC2ClientTournamentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eventid", wireType)
			}
			m.Eventid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eventid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stageid", wireType)
			}
			m.Stageid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stageid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Teamids = append(m.Teamids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCstrike15Gcmessages
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCstrike15Gcmessages
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Teamids = append(m.Teamids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Teamids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOEconCoupon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOEconCoupon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOEconCoupon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entryid", wireType)
			}
			m.Entryid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Entryid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defidx", wireType)
			}
			m.Defidx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Defidx |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			m.ExpirationDate = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.ExpirationDate = uint32(dAtA[iNdEx-4])
			m.ExpirationDate |= uint32(dAtA[iNdEx-3]) << 8
			m.ExpirationDate |= uint32(dAtA[iNdEx-2]) << 16
			m.ExpirationDate |= uint32(dAtA[iNdEx-1]) << 24
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOQuestProgress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOQuestProgress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOQuestProgress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questid", wireType)
			}
			m.Questid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Questid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PointsRemaining", wireType)
			}
			m.PointsRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PointsRemaining |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusPoints", wireType)
			}
			m.BonusPoints = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BonusPoints |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSOPersonaDataPublic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSOPersonaDataPublic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSOPersonaDataPublic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerLevel", wireType)
			}
			m.PlayerLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayerLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commendation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commendation == nil {
				m.Commendation = &PlayerCommendationInfo{}
			}
			if err := m.Commendation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElevatedState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ElevatedState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Subscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Subscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Subscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Unsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Unsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Unsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeleft", wireType)
			}
			m.Timeleft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeleft |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGC_GlobalGame_Play) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Play: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGC_GlobalGame_Play: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gametimems", wireType)
			}
			m.Gametimems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gametimems |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msperpoint", wireType)
			}
			m.Msperpoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msperpoint |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_AcknowledgePenalty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AcknowledgePenalty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_AcknowledgePenalty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			m.Acknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Acknowledged |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCRequestPrestigeCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCRequestPrestigeCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_Client2GCStreamUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCStreamUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_Client2GCStreamUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			m.Ticket = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ticket |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			m.Os = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Os |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientToGCRequestElevate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestElevate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCRequestElevate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_ClientToGCChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_ClientToGCChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CMsgGCCStrike15V2_GCToClientChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GCToClientChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CMsgGCCStrike15_v2_GCToClientChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			m.AccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCstrike15Gcmessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCstrike15Gcmessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCstrike15Gcmessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCstrike15Gcmessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCstrike15Gcmessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCstrike15Gcmessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCstrike15Gcmessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCstrike15Gcmessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCstrike15Gcmessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCstrike15Gcmessages   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cstrike15_gcmessages.proto", fileDescriptorCstrike15Gcmessages) }

var fileDescriptorCstrike15Gcmessages = []byte{
	// 8811 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0x5b, 0x90, 0x1d, 0x49,
	0x76, 0xd0, 0xde, 0xdb, 0xef, 0xd3, 0xaf, 0x52, 0x4a, 0xa3, 0xe9, 0xe9, 0x19, 0xb5, 0x34, 0xa5,
	0x19, 0x49, 0x33, 0x23, 0xdd, 0x91, 0x34, 0x9a, 0x9d, 0xc7, 0xee, 0xec, 0x6e, 0xab, 0x25, 0xdd,
	0x69, 0x46, 0x9a, 0xe9, 0xb9, 0xad, 0x79, 0x04, 0x0f, 0x57, 0x64, 0x57, 0x65, 0xdf, 0x2e, 0xba,
	0x5e, 0x53, 0x55, 0xf7, 0xaa, 0xfb, 0x6f, 0x83, 0x20, 0x80, 0x00, 0x2f, 0x5e, 0x63, 0x6c, 0x76,
	0x01, 0x9b, 0xb5, 0x71, 0x78, 0x59, 0xcc, 0xc3, 0x06, 0x9b, 0xc0, 0xc6, 0xc6, 0xc0, 0x1a, 0x58,
	0x1b, 0x8c, 0x17, 0x83, 0x8d, 0x59, 0x6c, 0x03, 0xbb, 0x1f, 0x44, 0xf0, 0xc1, 0x07, 0x5f, 0x44,
	0x10, 0x04, 0x44, 0x9e, 0xcc, 0xac, 0xca, 0xac, 0x5b, 0xd5, 0x7d, 0x7b, 0xbc, 0x10, 0x7c, 0x75,
	0xdf, 0xf3, 0xc8, 0xca, 0xc7, 0x39, 0x27, 0xcf, 0x39, 0x79, 0x32, 0x61, 0xd5, 0xcd, 0xf2, 0xd4,
	0xdf, 0x67, 0x37, 0x5e, 0x76, 0xfa, 0x6e, 0xc8, 0xb2, 0x8c, 0xf6, 0x59, 0xd6, 0x49, 0xd2, 0x38,
	0x8f, 0x57, 0x4f, 0x67, 0x39, 0xa3, 0xa1, 0x09, 0xb4, 0xbf, 0xd6, 0x82, 0xa5, 0x2e, 0x0d, 0xd9,
	0x36, 0x4b, 0x87, 0x2c, 0xdd, 0xf2, 0xa3, 0x3e, 0x79, 0x0e, 0x16, 0xfb, 0x34, 0x64, 0x19, 0x42,
	0x1c, 0xdf, 0x5b, 0x69, 0x5d, 0x68, 0x5d, 0x99, 0xbc, 0x3d, 0xf9, 0x8d, 0xdf, 0x3b, 0xff, 0x89,
	0xde, 0x42, 0x89, 0xda, 0xf4, 0xc8, 0x0a, 0x4c, 0x26, 0x7e, 0xd4, 0x5f, 0x69, 0x5f, 0x68, 0x5d,
	0x99, 0x92, 0x14, 0x08, 0x21, 0x67, 0xa0, 0xed, 0x27, 0x2b, 0x13, 0x17, 0x5a, 0x57, 0x16, 0x25,
	0xbc, 0xed, 0x27, 0x48, 0x1f, 0xa7, 0xf9, 0xca, 0xa4, 0x06, 0x47, 0x08, 0xb1, 0x61, 0xce, 0x8f,
	0xb2, 0x9c, 0x46, 0x2e, 0xcb, 0x56, 0xa6, 0x34, 0x74, 0x09, 0xb6, 0x7f, 0xb8, 0x05, 0x8f, 0xdf,
	0x61, 0x39, 0xf5, 0x03, 0xe6, 0x6d, 0x33, 0x9a, 0xba, 0x7b, 0xdb, 0x39, 0xcd, 0xfd, 0x2c, 0xf7,
	0x5d, 0xf2, 0x34, 0xcc, 0xf1, 0x9e, 0x39, 0xf9, 0x61, 0xc2, 0xb0, 0xc3, 0x8a, 0x7f, 0x96, 0x83,
	0x1f, 0x1e, 0x26, 0x8c, 0x5c, 0x85, 0xe5, 0x0c, 0xb9, 0x9c, 0xdc, 0x0f, 0x99, 0x43, 0x87, 0xa2,
	0xdf, 0x8a, 0x70, 0x51, 0x20, 0x1f, 0xfa, 0x21, 0x5b, 0x1f, 0xf6, 0xc9, 0x0d, 0x38, 0x95, 0x04,
	0xf4, 0x90, 0xa5, 0x99, 0x23, 0x10, 0x7c, 0x9c, 0x7a, 0xbf, 0x2d, 0x89, 0xde, 0x56, 0x58, 0xfb,
	0xab, 0x6d, 0xb0, 0x1e, 0xc6, 0x83, 0x34, 0xa2, 0x21, 0x8b, 0xf2, 0x2d, 0x44, 0x93, 0x8b, 0x00,
	0xd4, 0x75, 0xe3, 0x41, 0x94, 0xab, 0xa9, 0x2c, 0x46, 0x26, 0xe1, 0x9b, 0x1e, 0x79, 0x16, 0xe6,
	0x45, 0x6b, 0x4e, 0xe4, 0xbb, 0xfb, 0xd8, 0xad, 0x39, 0x49, 0x05, 0x02, 0xf1, 0xb6, 0xef, 0xee,
	0xeb, 0x64, 0x34, 0x64, 0x38, 0xbb, 0x55, 0x32, 0x1a, 0x32, 0xfe, 0x49, 0x49, 0xe6, 0xc5, 0x3b,
	0x46, 0x9f, 0xe7, 0x04, 0xfc, 0x4e, 0xbc, 0xa3, 0xb5, 0xb5, 0x1b, 0xd0, 0x3e, 0x4e, 0x79, 0xa5,
	0xad, 0x7b, 0x01, 0xed, 0x93, 0x6b, 0xb0, 0x2c, 0xc9, 0x82, 0xd8, 0xa5, 0xb9, 0x1f, 0x47, 0x2b,
	0xd3, 0x1a, 0xe9, 0x92, 0x40, 0xde, 0x97, 0x38, 0xad, 0x55, 0x8f, 0x65, 0xee, 0xca, 0xcc, 0x68,
	0xab, 0x77, 0x58, 0xe6, 0xda, 0x5f, 0x6f, 0xc1, 0x52, 0x39, 0x53, 0x0f, 0x19, 0x0d, 0xc9, 0x39,
	0x98, 0xe1, 0xe2, 0xa9, 0x26, 0x49, 0x49, 0xd3, 0x34, 0x07, 0x6e, 0x7a, 0xe4, 0x3c, 0xcc, 0x22,
	0x3a, 0xa7, 0x7d, 0x63, 0x7a, 0x90, 0xe9, 0x21, 0xed, 0x73, 0x01, 0x40, 0x02, 0x1c, 0x8d, 0x3e,
	0x33, 0xc8, 0x87, 0x63, 0x51, 0x24, 0x38, 0x79, 0x93, 0x55, 0x12, 0x9c, 0xba, 0x17, 0x60, 0x46,
	0x2e, 0xeb, 0xca, 0xd4, 0x85, 0x89, 0x2b, 0xf3, 0x37, 0x4f, 0x75, 0xaa, 0x2b, 0xda, 0x53, 0x14,
	0xf6, 0x17, 0x26, 0x60, 0xb9, 0xc4, 0xde, 0x1d, 0xb2, 0x28, 0xe7, 0xfd, 0x64, 0xfc, 0x9f, 0xea,
	0x38, 0x66, 0x10, 0xba, 0xe9, 0xf1, 0x4e, 0x08, 0x82, 0xea, 0x48, 0x04, 0x1f, 0x1f, 0xca, 0x45,
	0x00, 0x41, 0x32, 0xb2, 0xca, 0x82, 0x15, 0x7b, 0xda, 0x01, 0x4b, 0xb6, 0xc3, 0x85, 0x39, 0xcb,
	0x69, 0x45, 0xad, 0x96, 0x44, 0x73, 0x7e, 0xc8, 0xb6, 0x39, 0x8e, 0x3c, 0x0f, 0x4b, 0x1a, 0x3d,
	0x8b, 0x3c, 0x43, 0xcb, 0x16, 0x0a, 0xea, 0xbb, 0x91, 0x47, 0x2e, 0x83, 0xf8, 0xed, 0x24, 0x83,
	0x9d, 0xc0, 0x77, 0x71, 0xc5, 0xd5, 0x40, 0xe6, 0x11, 0xb3, 0x85, 0x88, 0xb2, 0xd1, 0x2c, 0xa7,
	0x7d, 0xc6, 0xc7, 0x3c, 0xa3, 0x91, 0x8a, 0x46, 0xb6, 0x39, 0x6a, 0xd3, 0x2b, 0x3b, 0x2c, 0x68,
	0x71, 0x6c, 0xb3, 0xba, 0x28, 0x95, 0xd4, 0x38, 0xc0, 0xeb, 0x70, 0x8a, 0xba, 0xb9, 0x3f, 0x64,
	0x4e, 0xc6, 0x5c, 0x2e, 0x5c, 0xbc, 0xf9, 0x39, 0xad, 0xcf, 0xcb, 0x02, 0xbd, 0x2d, 0xb0, 0x9b,
	0x9e, 0xfd, 0x4b, 0x53, 0x60, 0x75, 0x83, 0x78, 0x87, 0x06, 0x85, 0x5d, 0xc8, 0xc8, 0x0b, 0xb0,
	0xa4, 0xf4, 0x38, 0x8e, 0x02, 0x3f, 0x32, 0xad, 0xc3, 0xa2, 0xc4, 0xbd, 0x83, 0x28, 0x4e, 0x2c,
	0x6c, 0x5b, 0x41, 0x5c, 0xb1, 0x10, 0x88, 0x93, 0xc4, 0xb5, 0x16, 0x62, 0xe2, 0x28, 0x0b, 0xc1,
	0x59, 0x54, 0xfb, 0x74, 0x48, 0xfd, 0x80, 0xee, 0x04, 0xcc, 0x34, 0x2a, 0x12, 0xbd, 0xae, 0xb0,
	0x5c, 0x01, 0xe3, 0xa8, 0x1f, 0xfb, 0x51, 0xdf, 0x09, 0x69, 0xee, 0xee, 0x55, 0xcc, 0xe3, 0x92,
	0x44, 0x3e, 0x10, 0xb8, 0x3a, 0x23, 0x37, 0xdd, 0x6c, 0xe4, 0xee, 0xf2, 0xfe, 0x20, 0x75, 0x56,
	0xcc, 0xd8, 0xca, 0x0c, 0x0a, 0xfe, 0x4a, 0xa7, 0xc1, 0xd4, 0xf2, 0x3e, 0x1a, 0x80, 0x8c, 0x5c,
	0x81, 0xc5, 0x90, 0xfa, 0x91, 0x93, 0xc4, 0x59, 0xee, 0x0c, 0xd2, 0xc0, 0x58, 0xd7, 0x79, 0x8e,
	0xda, 0x8a, 0xb3, 0xfc, 0xbd, 0x34, 0x20, 0xaf, 0xc3, 0xd9, 0x94, 0x7d, 0x34, 0xf0, 0x53, 0xe6,
	0x39, 0x34, 0x49, 0x7c, 0xcf, 0xe1, 0xa3, 0xe5, 0x56, 0x45, 0x5f, 0xd9, 0x33, 0x8a, 0x66, 0x9d,
	0x93, 0xbc, 0x2f, 0x28, 0xc8, 0x4b, 0x40, 0x92, 0xd4, 0x77, 0x59, 0xb6, 0xc7, 0x58, 0x5e, 0xf0,
	0x81, 0xc6, 0x77, 0xaa, 0xc4, 0x2b, 0xa6, 0xd7, 0xe1, 0x6c, 0xfe, 0xc8, 0xcf, 0x71, 0x84, 0x29,
	0xa3, 0x61, 0x56, 0x30, 0xce, 0xeb, 0x1f, 0x14, 0x34, 0xdb, 0x82, 0x44, 0xf1, 0x7e, 0x0e, 0x9e,
	0x90, 0x12, 0x98, 0x17, 0x5a, 0xee, 0xa0, 0x94, 0xfa, 0xde, 0xca, 0x82, 0xc6, 0xfe, 0xb8, 0x20,
	0xab, 0xd8, 0x02, 0x1f, 0x65, 0x5e, 0xc9, 0xf0, 0x20, 0x1d, 0xb2, 0x43, 0x2e, 0xc2, 0x8b, 0xfa,
	0xea, 0x49, 0x11, 0x46, 0xe4, 0xa6, 0x67, 0x7f, 0x00, 0xe7, 0xdf, 0x49, 0x58, 0x8a, 0xb6, 0x54,
	0x93, 0x62, 0x6e, 0x33, 0x53, 0x3f, 0x41, 0x0b, 0xbb, 0x02, 0x93, 0xa8, 0x3a, 0x2d, 0x6d, 0x8a,
	0x11, 0x42, 0x56, 0x61, 0xca, 0xf7, 0xf6, 0xd9, 0xa1, 0x21, 0xb3, 0x02, 0x64, 0xbf, 0x0b, 0x4f,
	0xd6, 0x35, 0x7c, 0x37, 0x60, 0xbc, 0xbb, 0x25, 0x6b, 0x6b, 0x84, 0x95, 0x9c, 0x85, 0xe9, 0x21,
	0x0d, 0x06, 0x2c, 0x5b, 0x69, 0x5f, 0x98, 0xb8, 0x32, 0xd5, 0x93, 0xbf, 0xf8, 0x6e, 0x5c, 0xdb,
	0x66, 0xb6, 0x45, 0xdd, 0x7d, 0x96, 0x93, 0x0b, 0x30, 0x9b, 0xe0, 0x7f, 0x15, 0x4b, 0x58, 0x40,
	0xc9, 0x25, 0x98, 0x0f, 0x33, 0x2e, 0xa6, 0x59, 0x4e, 0xc3, 0xc4, 0x70, 0x22, 0x74, 0x04, 0xb9,
	0x55, 0xf4, 0x60, 0x02, 0x45, 0xf3, 0xa9, 0xce, 0x11, 0x63, 0x29, 0xfa, 0xf7, 0xa5, 0x16, 0x9c,
	0x92, 0x16, 0x9b, 0x46, 0xfb, 0x7e, 0xd4, 0xdf, 0x8c, 0x76, 0xe3, 0xf1, 0xb6, 0xe3, 0x73, 0x30,
	0x93, 0xd2, 0x68, 0x9f, 0x53, 0xe8, 0x73, 0x39, 0xcd, 0x81, 0xc2, 0xeb, 0x79, 0xe4, 0x47, 0x99,
	0xa1, 0xeb, 0x08, 0xe1, 0xdb, 0x1f, 0x32, 0xba, 0x7b, 0x34, 0xea, 0x0b, 0xcd, 0x6e, 0xab, 0xed,
	0x8f, 0x23, 0x36, 0x10, 0x6e, 0x7f, 0x5f, 0x0b, 0xce, 0x8a, 0xae, 0x6d, 0xc4, 0x61, 0xc8, 0x22,
	0x0f, 0xc7, 0x82, 0xfd, 0xbb, 0x0c, 0x0b, 0x6e, 0xe8, 0x39, 0xbb, 0xa9, 0xcf, 0x22, 0x2f, 0x30,
	0x17, 0x64, 0xde, 0x0d, 0xbd, 0x7b, 0x12, 0xa1, 0x08, 0x73, 0x46, 0x85, 0xe1, 0x69, 0x57, 0x08,
	0x1f, 0x4a, 0x04, 0x1f, 0x31, 0x27, 0x0c, 0x18, 0xf5, 0x58, 0x6a, 0x7a, 0x03, 0x6e, 0xe8, 0xdd,
	0x47, 0xb0, 0xfd, 0xcd, 0x36, 0x58, 0xa2, 0x47, 0x0f, 0x98, 0x47, 0x83, 0x4c, 0xcd, 0x55, 0xc8,
	0x7f, 0xf1, 0x8f, 0x84, 0xe6, 0x5c, 0x21, 0x1c, 0xf7, 0xed, 0xcb, 0xb0, 0x20, 0x88, 0xdc, 0x38,
	0xdc, 0xa1, 0xb9, 0xd9, 0x0f, 0xc4, 0x6c, 0x20, 0xa2, 0x24, 0x7c, 0xc4, 0x68, 0x12, 0x47, 0xc6,
	0xec, 0x09, 0xc2, 0x0f, 0x10, 0x51, 0x12, 0xf6, 0xd1, 0x96, 0x1b, 0x5d, 0x16, 0x84, 0xc2, 0xc8,
	0x97, 0xfd, 0xa3, 0x69, 0x58, 0x71, 0x1a, 0x11, 0xbe, 0x9e, 0x86, 0x19, 0xb9, 0x0e, 0x67, 0x3c,
	0x3f, 0xe3, 0x96, 0xd8, 0xf1, 0x73, 0x16, 0x66, 0x8e, 0xc7, 0x76, 0x7d, 0xef, 0x00, 0xad, 0xdc,
	0x62, 0x8f, 0x48, 0xdc, 0x26, 0x47, 0xdd, 0x41, 0x0c, 0xb9, 0x0b, 0x4f, 0xed, 0x32, 0x9a, 0x0f,
	0xb8, 0x8d, 0xd2, 0x59, 0x15, 0xe7, 0xac, 0xf6, 0xa1, 0x27, 0x14, 0xe5, 0x9d, 0xb2, 0x1d, 0xd1,
	0x8c, 0xcd, 0x60, 0x79, 0x5d, 0x48, 0xd4, 0x3a, 0x57, 0x72, 0x3f, 0x3f, 0xe4, 0x2a, 0x41, 0xe5,
	0xff, 0xa6, 0x8f, 0xaa, 0xa0, 0x5c, 0xb4, 0xc2, 0xd8, 0x33, 0xb7, 0x1d, 0x84, 0x90, 0xb3, 0x30,
	0x11, 0x52, 0xd3, 0xa3, 0xe6, 0x00, 0xee, 0xc0, 0x9f, 0x29, 0x0d, 0x0f, 0x6e, 0x03, 0xdb, 0x2c,
	0x1f, 0x24, 0xc7, 0x7b, 0x22, 0x36, 0x80, 0xf4, 0xb8, 0x1c, 0x37, 0x37, 0xb4, 0x6f, 0x56, 0x38,
	0x5d, 0x1b, 0x5c, 0x89, 0xe7, 0x14, 0x4d, 0x8e, 0xdf, 0x9e, 0xd2, 0xfd, 0xae, 0x4d, 0xef, 0x61,
	0x8d, 0x0b, 0x30, 0xd9, 0xe4, 0x02, 0xd8, 0x3f, 0x39, 0x0d, 0x4b, 0x22, 0xd0, 0x78, 0x33, 0xc8,
	0x87, 0x28, 0x63, 0xcf, 0xc0, 0x7c, 0x3e, 0x74, 0x06, 0x5e, 0xe2, 0x60, 0x60, 0x60, 0x08, 0x59,
	0x3e, 0x7c, 0xcf, 0x4b, 0xb6, 0x78, 0x74, 0x70, 0x09, 0x16, 0xf2, 0xa1, 0xf3, 0x88, 0x0f, 0xce,
	0x51, 0x16, 0x4e, 0x45, 0x24, 0x90, 0x0f, 0x3f, 0xe0, 0x88, 0xb7, 0xd8, 0x21, 0x7a, 0x89, 0x43,
	0x27, 0x0b, 0xe2, 0xdc, 0xd4, 0xce, 0x99, 0x7c, 0xb8, 0xcd, 0x81, 0x5c, 0x64, 0xf2, 0xa1, 0xe3,
	0x06, 0x3e, 0x8b, 0xf2, 0xcc, 0x54, 0x86, 0x7c, 0xb8, 0x21, 0xc0, 0x92, 0x28, 0x49, 0xe3, 0x03,
	0xbf, 0x1a, 0x8c, 0xe4, 0xc3, 0x2d, 0x01, 0x46, 0x7f, 0x75, 0x88, 0x9b, 0xac, 0xb1, 0xc1, 0x4e,
	0xe7, 0x43, 0xbe, 0xb9, 0x9a, 0xf1, 0xc8, 0x6c, 0x6d, 0x3c, 0x22, 0xe3, 0x2c, 0x27, 0xa4, 0x49,
	0x3f, 0x8d, 0x07, 0x09, 0x6e, 0x81, 0x73, 0x7a, 0x9c, 0xf5, 0x40, 0x62, 0xf8, 0xb8, 0x14, 0x29,
	0x6e, 0x78, 0x85, 0xf7, 0x2b, 0xa9, 0xb8, 0xb3, 0x94, 0x0f, 0x9d, 0x90, 0x66, 0x39, 0x4b, 0x1d,
	0x8c, 0xf3, 0x7c, 0x0f, 0x77, 0x38, 0x35, 0x4b, 0xcb, 0xf9, 0xf0, 0x01, 0x62, 0xb7, 0x05, 0x92,
	0xaf, 0x5b, 0x3e, 0x44, 0xa7, 0x3e, 0x90, 0x13, 0xa6, 0xef, 0x68, 0x0b, 0xf9, 0x90, 0xfb, 0xf4,
	0x81, 0x98, 0xb5, 0x0e, 0x58, 0x05, 0xad, 0x9a, 0x3b, 0x63, 0x1b, 0x93, 0xd4, 0x6a, 0x02, 0x75,
	0x7a, 0x35, 0x8d, 0x4b, 0x35, 0xf4, 0x6a, 0x2e, 0x45, 0x5f, 0x52, 0xc6, 0x35, 0x4d, 0xf4, 0x65,
	0xd9, 0xec, 0x4b, 0x8f, 0xa3, 0xf4, 0xbe, 0x08, 0x5a, 0xd5, 0x17, 0xcb, 0x6c, 0x1b, 0xa9, 0xcd,
	0xbe, 0x08, 0x7a, 0xd5, 0x97, 0x53, 0x35, 0xf4, 0xaa, 0x2f, 0x3a, 0x3d, 0xf5, 0xbc, 0x94, 0x65,
	0xd9, 0x0a, 0xa9, 0xa1, 0x5f, 0x17, 0x38, 0xee, 0xfb, 0x94, 0xed, 0x73, 0x11, 0x3e, 0xad, 0x9b,
	0x2b, 0xd5, 0x38, 0x17, 0x62, 0xbd, 0x65, 0xb5, 0x44, 0x67, 0xb4, 0x25, 0x52, 0x2d, 0xcb, 0x15,
	0xb2, 0x7f, 0xb0, 0x05, 0x8b, 0x9b, 0x89, 0xfc, 0xce, 0x03, 0x9a, 0xed, 0x13, 0x02, 0x2d, 0x6a,
	0xa8, 0x48, 0x8b, 0x72, 0xd8, 0x8e, 0x61, 0x2e, 0x5a, 0x3b, 0x1c, 0xe6, 0x1a, 0xf2, 0xdf, 0x72,
	0x39, 0xcc, 0x33, 0x04, 0xbe, 0x85, 0x1b, 0xd9, 0x8e, 0x9f, 0x9b, 0x22, 0x8e, 0x10, 0xee, 0x10,
	0xe4, 0xf1, 0x3e, 0x8b, 0x0c, 0xd9, 0x16, 0x20, 0xfb, 0x0f, 0xc2, 0xd2, 0x87, 0xc9, 0x56, 0x1a,
	0xf7, 0x79, 0xbf, 0xee, 0xd0, 0x9c, 0x72, 0x61, 0x3f, 0xe0, 0x0a, 0xec, 0xf3, 0xc5, 0x30, 0x0c,
	0xdb, 0x41, 0xb2, 0x85, 0x50, 0xbe, 0x33, 0x1e, 0x24, 0x8e, 0x4b, 0x73, 0xd6, 0x8f, 0xd3, 0x43,
	0xc3, 0xda, 0xc0, 0x41, 0xb2, 0x21, 0xe1, 0xdc, 0xa9, 0x38, 0x8d, 0x36, 0xec, 0x6e, 0xe4, 0x71,
	0x5b, 0xfa, 0x5e, 0xe2, 0xd1, 0x5c, 0x68, 0x1b, 0x9a, 0xe0, 0x4a, 0x36, 0x62, 0x9a, 0x03, 0x45,
	0x6c, 0x81, 0x68, 0x9a, 0xe7, 0xa9, 0x32, 0xd3, 0xfa, 0x9c, 0x2c, 0x71, 0xec, 0x7a, 0x9e, 0xa7,
	0xd2, 0xc4, 0xbf, 0x02, 0x8f, 0xe9, 0xf4, 0x41, 0x4e, 0x1d, 0xf4, 0x1a, 0x8c, 0x49, 0x23, 0x25,
	0x53, 0x90, 0xd3, 0xf7, 0x39, 0xde, 0xfe, 0x53, 0x13, 0x70, 0x66, 0xdb, 0x8d, 0x53, 0x26, 0xf6,
	0xcd, 0x9d, 0x98, 0xa6, 0x1e, 0x4e, 0xc1, 0x79, 0x98, 0xfd, 0x68, 0xc0, 0xb2, 0xbc, 0xda, 0xc3,
	0x19, 0x84, 0x6e, 0x7a, 0x7c, 0x46, 0x33, 0xce, 0x68, 0x7a, 0x67, 0x08, 0x22, 0xf7, 0x61, 0x49,
	0x3a, 0x1f, 0x2c, 0xca, 0x53, 0xbf, 0x70, 0x74, 0x9e, 0xe9, 0xd4, 0x7d, 0xab, 0x23, 0xb7, 0x95,
	0xbb, 0x82, 0xb6, 0x57, 0xe1, 0x25, 0x9f, 0x85, 0x05, 0x11, 0x29, 0xc8, 0xb6, 0x44, 0x20, 0xfb,
	0x64, 0x7d, 0x5b, 0xbc, 0x91, 0xc3, 0x9e, 0xc1, 0xb0, 0xfa, 0x0a, 0x4c, 0x21, 0x98, 0xef, 0x39,
	0x3c, 0x4a, 0xd5, 0x57, 0x94, 0x03, 0x38, 0x7c, 0x48, 0x03, 0x63, 0x24, 0x1c, 0xb0, 0xba, 0x0f,
	0x4b, 0x66, 0xdf, 0x88, 0x0d, 0xca, 0xad, 0x6a, 0xf0, 0xb6, 0x7c, 0x8f, 0xbc, 0x0c, 0x33, 0xaa,
	0xab, 0xed, 0xe3, 0xbb, 0xaa, 0x68, 0xed, 0x3f, 0x39, 0x09, 0xcb, 0xc2, 0x65, 0x79, 0x97, 0x4f,
	0x31, 0xae, 0xc2, 0x4d, 0x20, 0x38, 0xdf, 0x2c, 0x75, 0x1a, 0xbc, 0x3c, 0x4b, 0xe2, 0xd7, 0x0b,
	0x67, 0xef, 0x1e, 0x2c, 0xcb, 0x95, 0xc3, 0x3d, 0x9e, 0xe6, 0x54, 0x76, 0x63, 0xad, 0x53, 0x69,
	0xbe, 0x83, 0xff, 0xe1, 0x16, 0x4f, 0x73, 0xda, 0x5b, 0xfc, 0x48, 0xff, 0x49, 0x5e, 0x03, 0x8b,
	0x2b, 0x81, 0xd4, 0x0b, 0xd1, 0x90, 0x58, 0xc6, 0xe5, 0x8e, 0xa9, 0x2f, 0xbd, 0xa5, 0x03, 0x53,
	0x7f, 0x9e, 0x85, 0x79, 0x8c, 0xd6, 0x30, 0x5e, 0x34, 0xb5, 0x14, 0x38, 0x02, 0xfb, 0xc1, 0xfd,
	0xe5, 0x85, 0x30, 0x74, 0xc4, 0x46, 0xc0, 0x9d, 0x04, 0x5d, 0x6d, 0x21, 0x0c, 0xbb, 0x7c, 0x2f,
	0xe0, 0xae, 0xc2, 0x2b, 0xb0, 0x80, 0x63, 0x19, 0x08, 0xe5, 0x59, 0x99, 0xc6, 0x5e, 0x9c, 0xe9,
	0xd4, 0x28, 0x56, 0x6f, 0xde, 0x2f, 0x7f, 0xac, 0xfe, 0x4c, 0x0b, 0x16, 0x8d, 0x31, 0x1e, 0x2f,
	0xd6, 0xeb, 0xb0, 0x2a, 0x08, 0xa2, 0x38, 0x0d, 0xb9, 0xb9, 0x47, 0x75, 0x77, 0x18, 0x4d, 0x23,
	0xe6, 0x19, 0x6a, 0xfe, 0x38, 0xd2, 0xbd, 0x8d, 0x64, 0xc2, 0x28, 0xdc, 0x45, 0x22, 0xf2, 0x59,
	0x78, 0x42, 0x34, 0xb1, 0x13, 0x47, 0x83, 0xac, 0xd2, 0x82, 0xee, 0x73, 0x9c, 0x45, 0xb2, 0xdb,
	0x9c, 0x4a, 0x6f, 0xc0, 0xfe, 0xaf, 0x2d, 0x78, 0x6a, 0xe3, 0x41, 0xd6, 0xef, 0x6e, 0x38, 0xc2,
	0xbb, 0xc0, 0x31, 0x88, 0x41, 0xe1, 0x28, 0x3e, 0xad, 0x22, 0x75, 0x47, 0x7c, 0x08, 0xd7, 0xa6,
	0x85, 0xb3, 0x62, 0x55, 0x17, 0xb9, 0x27, 0xf3, 0x5d, 0xa5, 0x50, 0x3d, 0x0b, 0xf3, 0x3b, 0x7e,
	0x44, 0xd3, 0x43, 0x25, 0x1c, 0xad, 0x2b, 0x0b, 0x6a, 0xd6, 0x05, 0x02, 0xc9, 0xaa, 0xab, 0x33,
	0xd1, 0xb0, 0x3a, 0x6f, 0xc0, 0x52, 0xe8, 0x67, 0x3c, 0xc0, 0x0c, 0x76, 0x32, 0x6c, 0x91, 0xaf,
	0xf7, 0xfc, 0xcd, 0xc7, 0x6a, 0xa5, 0xbe, 0x57, 0x21, 0xb6, 0x7f, 0xb5, 0x05, 0xd7, 0xc5, 0x60,
	0x37, 0xb6, 0x55, 0xaa, 0x77, 0x78, 0xd3, 0xc1, 0xb5, 0x0d, 0x29, 0x8f, 0x73, 0xba, 0x1b, 0x95,
	0xf0, 0x28, 0x1b, 0x23, 0x16, 0xfb, 0x34, 0xcc, 0x72, 0x0f, 0x72, 0x9f, 0x1d, 0x2a, 0x2d, 0xbc,
	0xd0, 0x39, 0x26, 0x14, 0xed, 0x15, 0x1c, 0xe4, 0x93, 0x30, 0x23, 0x5a, 0x3a, 0x3a, 0x44, 0x93,
	0xa1, 0x61, 0x4f, 0x11, 0xdb, 0x7f, 0xba, 0x05, 0x9d, 0xe3, 0x06, 0x73, 0x53, 0xac, 0xe9, 0x46,
	0x1c, 0xed, 0xfa, 0x69, 0x58, 0xee, 0x4c, 0xad, 0x91, 0x9d, 0x09, 0x6d, 0x6c, 0x11, 0x4a, 0x96,
	0x36, 0x16, 0x83, 0xc8, 0x0b, 0x30, 0xcb, 0x0e, 0x64, 0x5c, 0x36, 0xa1, 0x49, 0x72, 0x01, 0xb5,
	0xbf, 0xda, 0x82, 0x6b, 0x35, 0x9d, 0x29, 0x7a, 0xd0, 0xc3, 0xbc, 0x37, 0x8e, 0x49, 0xc8, 0x16,
	0x79, 0x1d, 0xce, 0x0e, 0x7d, 0xf6, 0x88, 0xa5, 0x99, 0xc3, 0x0e, 0x72, 0x96, 0x46, 0x3c, 0x56,
	0x8a, 0x73, 0x1a, 0x18, 0x9d, 0x3b, 0x23, 0x69, 0xee, 0x4a, 0x92, 0x87, 0x9c, 0xa2, 0x96, 0x17,
	0xbd, 0x02, 0xa3, 0xf3, 0x55, 0x5e, 0xf4, 0x0d, 0xec, 0xff, 0xdd, 0x82, 0x8b, 0x47, 0x4f, 0x9b,
	0xc8, 0xf9, 0x9d, 0x87, 0xf9, 0xd2, 0x0c, 0x66, 0x28, 0xf1, 0x8b, 0x3d, 0x28, 0xe2, 0xdc, 0xcc,
	0xf4, 0x52, 0xdb, 0xb5, 0x5e, 0x2a, 0xda, 0x26, 0xbe, 0x5a, 0xca, 0xa2, 0x69, 0x19, 0x5d, 0x81,
	0x40, 0xe9, 0x7f, 0x01, 0x96, 0x84, 0x37, 0x56, 0xe4, 0x57, 0x74, 0x2b, 0xb6, 0x28, 0x70, 0x65,
	0x62, 0xc5, 0xd2, 0x32, 0x2a, 0xb8, 0xf7, 0xa0, 0x31, 0xe3, 0x4a, 0x50, 0x17, 0xcb, 0xf4, 0x96,
	0x73, 0x13, 0x6a, 0xdf, 0x01, 0xfb, 0xb8, 0x09, 0x88, 0x13, 0xb2, 0x06, 0x33, 0x74, 0x87, 0x46,
	0x5e, 0x1c, 0x99, 0x11, 0x90, 0x04, 0xda, 0xbf, 0xd0, 0x82, 0x17, 0x8f, 0x6e, 0x46, 0x78, 0x91,
	0x37, 0xb5, 0xd3, 0x91, 0xd7, 0x60, 0xb9, 0x3c, 0x02, 0x49, 0xfc, 0xa8, 0x9f, 0x49, 0x4b, 0xb2,
	0xdc, 0x31, 0xcf, 0x51, 0x7a, 0x55, 0x3a, 0x1e, 0xd8, 0xc6, 0xbb, 0xbb, 0x19, 0xcb, 0x1d, 0x3f,
	0xf2, 0xd8, 0x81, 0x99, 0xf0, 0x10, 0x98, 0x4d, 0x8e, 0xe0, 0x73, 0xbe, 0xeb, 0x73, 0x81, 0xd8,
	0xc1, 0xa9, 0xd1, 0x6d, 0x20, 0x20, 0xe2, 0x36, 0x4e, 0xc2, 0x6f, 0xcf, 0xd4, 0x0a, 0xac, 0xa9,
	0x3d, 0x62, 0x04, 0x52, 0x60, 0x2f, 0xc1, 0x7c, 0x58, 0x62, 0x8d, 0x49, 0xd1, 0x11, 0xe4, 0x0d,
	0x78, 0xf2, 0x11, 0xf5, 0x73, 0x3f, 0xea, 0x6b, 0xfb, 0xa8, 0x93, 0x31, 0xb4, 0x44, 0xc2, 0x40,
	0x2c, 0xf6, 0x56, 0x24, 0x49, 0xb1, 0x95, 0x6e, 0x4b, 0x3c, 0xd7, 0x43, 0x96, 0xa6, 0x71, 0x6a,
	0x48, 0x8b, 0x00, 0x91, 0x2e, 0x5c, 0x90, 0x29, 0x4b, 0xfc, 0x60, 0x6d, 0xfb, 0xd3, 0xd8, 0xfe,
	0x39, 0x9d, 0x6e, 0xf4, 0x23, 0xb7, 0x60, 0x41, 0x24, 0x08, 0x30, 0x77, 0x99, 0x61, 0xe6, 0x79,
	0xfe, 0xe6, 0xa9, 0x4e, 0x35, 0x03, 0xdc, 0x9b, 0xef, 0x17, 0x10, 0xee, 0x1c, 0x3d, 0xb5, 0x4b,
	0xfd, 0x20, 0x69, 0x1a, 0xda, 0x2c, 0x7e, 0xfa, 0x09, 0x45, 0x33, 0xfa, 0xd9, 0x37, 0xe0, 0xc9,
	0x84, 0x45, 0x34, 0xc8, 0x0f, 0x6b, 0xf9, 0xe7, 0xc4, 0xd4, 0x48, 0x92, 0x51, 0xf6, 0x75, 0x38,
	0xc7, 0xdb, 0x4e, 0x19, 0xf5, 0xea, 0x1b, 0x00, 0x6c, 0x60, 0xb5, 0x20, 0xaa, 0x6d, 0x62, 0x48,
	0xdd, 0x1d, 0x1a, 0x45, 0xcc, 0xab, 0x6d, 0x62, 0x5e, 0x34, 0x51, 0x10, 0x8d, 0x36, 0x71, 0x1b,
	0x1e, 0x53, 0xc7, 0x7b, 0x89, 0x0c, 0x72, 0x78, 0xf0, 0xb8, 0x8f, 0x31, 0xe0, 0xfc, 0xcd, 0xa5,
	0x8e, 0x11, 0x77, 0xf4, 0x4e, 0xcb, 0x03, 0x3f, 0x45, 0x8b, 0xc1, 0xc8, 0x26, 0x4c, 0x45, 0x31,
	0x77, 0x2f, 0x16, 0x51, 0xfc, 0x5f, 0xea, 0x9c, 0x48, 0x14, 0x3b, 0x6f, 0xc7, 0x39, 0xeb, 0x89,
	0x16, 0xc8, 0x9b, 0xf0, 0xf4, 0x11, 0x73, 0xea, 0xf4, 0x53, 0xc6, 0xa2, 0x95, 0x25, 0x21, 0x14,
	0x4d, 0x33, 0xdb, 0xe5, 0x44, 0xe4, 0x0d, 0x58, 0xf5, 0xa3, 0x6c, 0xb0, 0xbb, 0xeb, 0xbb, 0xfc,
	0x5b, 0x01, 0x1b, 0xb2, 0xa0, 0x9c, 0x98, 0x65, 0xb1, 0xb8, 0x23, 0x14, 0xaa, 0x8d, 0xd5, 0x3f,
	0xd1, 0x82, 0x49, 0xde, 0x31, 0x1e, 0x19, 0x15, 0x27, 0x89, 0xc5, 0xc1, 0x26, 0x87, 0x70, 0x93,
	0x99, 0xb2, 0xbe, 0x3c, 0x8e, 0x30, 0x92, 0x26, 0x02, 0x2c, 0xce, 0xaa, 0x24, 0x89, 0xd0, 0x00,
	0x95, 0x02, 0x9c, 0x11, 0xd0, 0x1e, 0xdf, 0x8b, 0x3c, 0x5f, 0x9c, 0x6a, 0x1a, 0x39, 0xc2, 0x02,
	0x6a, 0x7f, 0x79, 0x12, 0xae, 0x6c, 0x70, 0xc3, 0x5a, 0x99, 0xd0, 0x8a, 0x75, 0xbc, 0x93, 0xd2,
	0xdd, 0x31, 0xce, 0x9c, 0x46, 0x73, 0x34, 0xed, 0xc6, 0x63, 0x1a, 0x2d, 0xe3, 0x73, 0xbd, 0x2e,
	0xe3, 0x73, 0x5d, 0xa7, 0xb8, 0x61, 0x24, 0x7b, 0x24, 0xc5, 0x0d, 0x4c, 0xcc, 0xd1, 0x24, 0x73,
	0x70, 0x89, 0xd0, 0xb2, 0x4f, 0x15, 0x89, 0x39, 0x9a, 0x64, 0x1b, 0x1c, 0x8c, 0x69, 0x3e, 0x24,
	0x1a, 0xa4, 0x29, 0x8b, 0x72, 0xf3, 0x90, 0x09, 0xc9, 0x04, 0x02, 0x23, 0x6c, 0xf9, 0x3d, 0x71,
	0xcc, 0xa5, 0x9f, 0x31, 0xcd, 0x8b, 0x6f, 0x8a, 0xfd, 0x4e, 0xa3, 0x1c, 0xb2, 0x3c, 0xbe, 0x81,
	0x89, 0x97, 0x0a, 0xe5, 0xfb, 0x1c, 0xa1, 0x53, 0x26, 0xbe, 0xbb, 0x2f, 0x8e, 0x1f, 0x2a, 0x94,
	0x5b, 0x1c, 0x41, 0xba, 0x30, 0xed, 0xf1, 0x59, 0x16, 0x9a, 0x39, 0x7f, 0xf3, 0xc5, 0xce, 0xb8,
	0xeb, 0x22, 0x03, 0x16, 0xc9, 0xbe, 0xda, 0x55, 0x51, 0xd5, 0x2a, 0x4c, 0x85, 0x34, 0xa9, 0xac,
	0x95, 0x00, 0x8d, 0x93, 0x93, 0xb3, 0x7f, 0xad, 0x0d, 0xa7, 0x36, 0xb6, 0x52, 0x86, 0x5f, 0xda,
	0x8c, 0x76, 0x63, 0xdc, 0x80, 0xaf, 0xc1, 0x72, 0x92, 0x32, 0xcf, 0xc7, 0xc3, 0xb0, 0xcc, 0x49,
	0xdc, 0xdc, 0x68, 0x7f, 0x49, 0x43, 0x6e, 0xb9, 0x39, 0xf9, 0x2c, 0x4c, 0x61, 0xbf, 0xa4, 0xf3,
	0xf9, 0xdc, 0xd8, 0xa3, 0xea, 0x09, 0x3e, 0x72, 0x13, 0x7d, 0xad, 0x5c, 0x85, 0x97, 0x4f, 0x75,
	0x46, 0xba, 0xd4, 0x79, 0xc8, 0x68, 0x88, 0x56, 0xb7, 0x27, 0x48, 0x57, 0x7f, 0xa0, 0x05, 0x73,
	0x05, 0x90, 0x5c, 0x87, 0x53, 0x62, 0x0b, 0xf0, 0xa3, 0xdd, 0xd8, 0xf1, 0xbd, 0x83, 0xfc, 0xc0,
	0xec, 0xf3, 0x72, 0xa8, 0x9a, 0xdb, 0x44, 0x24, 0x97, 0x63, 0x8d, 0x83, 0x93, 0xeb, 0x07, 0xa8,
	0x0b, 0x05, 0xf9, 0xc3, 0x03, 0x2e, 0x0b, 0x96, 0x4e, 0xcb, 0x68, 0x28, 0x7c, 0xd3, 0xb9, 0xde,
	0x52, 0x49, 0xc7, 0xa1, 0xf6, 0xff, 0x98, 0x1a, 0xdb, 0x09, 0x15, 0x2e, 0x20, 0xfb, 0xae, 0x38,
	0x56, 0xe7, 0x61, 0x56, 0x76, 0xd0, 0x33, 0x1c, 0xd2, 0x19, 0xd1, 0x3d, 0xaf, 0x3c, 0x8c, 0xac,
	0x77, 0xa9, 0x04, 0x4e, 0xb9, 0x54, 0x1d, 0x98, 0x4d, 0xc5, 0x31, 0x87, 0x5a, 0x11, 0xd2, 0x19,
	0x39, 0xfd, 0xe8, 0x15, 0x34, 0xbc, 0x71, 0x16, 0xb9, 0xe9, 0x21, 0x7a, 0xf2, 0x98, 0x53, 0x9d,
	0xd6, 0xfa, 0xb0, 0x58, 0xe2, 0xde, 0x62, 0x87, 0x3c, 0xac, 0x36, 0x89, 0x9d, 0x64, 0xb0, 0x83,
	0x6a, 0xa8, 0x18, 0x2c, 0x83, 0x61, 0x6b, 0xb0, 0x43, 0x9e, 0x84, 0xb9, 0x84, 0xa6, 0xf9, 0x21,
	0x4e, 0x90, 0xd8, 0x55, 0x67, 0x11, 0xc0, 0xa7, 0xe7, 0x2a, 0xcc, 0x3d, 0xda, 0xf3, 0x73, 0x16,
	0xf8, 0x59, 0x8e, 0x5b, 0xe6, 0xe8, 0x9e, 0x53, 0x12, 0xd4, 0x27, 0x37, 0xe1, 0xa8, 0xe4, 0xe6,
	0xa7, 0x0c, 0x07, 0x13, 0xed, 0x1b, 0x66, 0x43, 0x79, 0xbc, 0x57, 0x39, 0xa5, 0xd3, 0x7d, 0x4b,
	0x71, 0x84, 0xff, 0xba, 0xc1, 0x2c, 0x24, 0x67, 0x41, 0xba, 0x78, 0x66, 0xd1, 0x82, 0xce, 0x8b,
	0xb2, 0x44, 0x36, 0x60, 0x4d, 0xe3, 0x75, 0xb1, 0x53, 0x99, 0xa3, 0xcb, 0xca, 0x22, 0x4e, 0xc5,
	0x93, 0x25, 0xd5, 0x86, 0x20, 0x5a, 0x2f, 0x85, 0xa7, 0x2e, 0x51, 0xb8, 0xd4, 0x9c, 0x28, 0x24,
	0xaf, 0x02, 0xd7, 0x6e, 0xe1, 0x47, 0x0b, 0x2f, 0x7d, 0x19, 0xc7, 0x4a, 0x46, 0x75, 0xb2, 0xb7,
	0x90, 0x48, 0x08, 0xff, 0x65, 0xff, 0xc7, 0x29, 0x78, 0xe5, 0x18, 0x3f, 0xba, 0x1a, 0xfa, 0xf4,
	0x58, 0x96, 0xc4, 0x51, 0xc6, 0xc8, 0xf3, 0xb0, 0x98, 0x96, 0xe0, 0x4a, 0x7e, 0xc0, 0x44, 0x91,
	0x77, 0x61, 0x5e, 0x03, 0xa0, 0x42, 0xa0, 0x25, 0x3d, 0x91, 0xd6, 0xf5, 0xf4, 0x36, 0xf4, 0xf3,
	0x90, 0x39, 0xed, 0x3c, 0x84, 0xdc, 0x82, 0xd3, 0x7d, 0xd7, 0xd1, 0x28, 0x9d, 0x8c, 0xaf, 0xfe,
	0xa4, 0xd6, 0xb9, 0x53, 0x7d, 0x57, 0x1b, 0xd0, 0x36, 0x5f, 0xf3, 0x51, 0x5d, 0x9b, 0x6a, 0xd6,
	0xb5, 0x2b, 0x98, 0xfa, 0xe7, 0x76, 0x05, 0x95, 0x86, 0xcb, 0x85, 0x79, 0xaa, 0xd1, 0x9b, 0x96,
	0xa7, 0x1b, 0xb7, 0xe0, 0x6c, 0xca, 0x1e, 0xd1, 0xd4, 0x73, 0x64, 0xfe, 0x41, 0x4a, 0x42, 0x26,
	0x8f, 0x9f, 0xce, 0x08, 0xac, 0x50, 0x54, 0x29, 0x01, 0x78, 0x64, 0xe5, 0x7b, 0x01, 0x1b, 0xe1,
	0x11, 0x5a, 0x44, 0x38, 0xae, 0xc2, 0xf1, 0x69, 0x58, 0x91, 0xdf, 0x31, 0xd2, 0xa0, 0xdc, 0xa8,
	0x56, 0x0f, 0xd6, 0x39, 0xd5, 0x66, 0x99, 0x0d, 0xdd, 0xf4, 0x0e, 0xc8, 0x6b, 0x45, 0x2f, 0x4b,
	0x6e, 0x91, 0x0e, 0xd5, 0x0f, 0xd7, 0x4f, 0x9b, 0xbc, 0x98, 0x0f, 0x25, 0xb7, 0xe1, 0xc9, 0x11,
	0x56, 0x05, 0xf0, 0x0e, 0x8c, 0x33, 0xf6, 0xc7, 0x4d, 0xfe, 0x9e, 0xf8, 0xe5, 0x1d, 0x70, 0x71,
	0x97, 0x2c, 0x5e, 0x1a, 0x27, 0x0e, 0xda, 0x04, 0xfd, 0x2c, 0x62, 0x49, 0x60, 0xef, 0xa4, 0x71,
	0x72, 0x9f, 0x9b, 0x83, 0x17, 0x60, 0x49, 0xd7, 0x4f, 0xda, 0xc7, 0xb3, 0x08, 0x25, 0x04, 0x8b,
	0x9a, 0x4a, 0xd2, 0xbe, 0xfd, 0x43, 0x6d, 0x18, 0xd7, 0x31, 0x55, 0xc6, 0xfd, 0x02, 0xcc, 0x8a,
	0xf5, 0xae, 0xc8, 0x74, 0x01, 0x1d, 0x15, 0xfd, 0xc9, 0xb1, 0x45, 0x7f, 0xea, 0xbb, 0x27, 0xfa,
	0xd3, 0x55, 0xd1, 0x2f, 0x85, 0x58, 0x1d, 0x5c, 0xe8, 0xf5, 0x57, 0x52, 0x88, 0xa5, 0x8d, 0xb5,
	0xff, 0xd7, 0xec, 0x71, 0x13, 0x23, 0x7b, 0x10, 0x0f, 0x22, 0x4f, 0x6c, 0xd8, 0xff, 0x9f, 0x6a,
	0xfc, 0x2a, 0x4c, 0xa5, 0xbc, 0x93, 0x86, 0x2f, 0x2a, 0x40, 0xe4, 0x0c, 0x4c, 0xed, 0xfb, 0x41,
	0x20, 0xf6, 0xc4, 0xa9, 0x9e, 0xf8, 0x41, 0x56, 0x60, 0x86, 0x66, 0x99, 0x9f, 0xe5, 0x22, 0xd4,
	0x9c, 0xea, 0xa9, 0x9f, 0xe4, 0x2c, 0x4c, 0x7b, 0x8c, 0xe6, 0x7b, 0x42, 0x41, 0xa7, 0x7a, 0xf2,
	0x17, 0x87, 0x63, 0xaa, 0x5e, 0x28, 0xe1, 0x54, 0x4f, 0xfe, 0xe2, 0xed, 0x8b, 0x1c, 0xc0, 0x9c,
	0x68, 0xbf, 0x08, 0xf4, 0xf1, 0xf3, 0xdc, 0x0c, 0x0d, 0x82, 0x1c, 0xd5, 0xa8, 0x70, 0x2e, 0x11,
	0xd3, 0x43, 0x84, 0xf0, 0x81, 0xb9, 0xd5, 0x96, 0x84, 0xf3, 0x23, 0x01, 0xb9, 0x24, 0x3c, 0x0f,
	0xe8, 0x94, 0x3a, 0xb2, 0x13, 0x0b, 0xf8, 0x35, 0x74, 0x15, 0xb7, 0x45, 0x47, 0x36, 0x61, 0xc6,
	0x15, 0x19, 0x32, 0xd4, 0x86, 0x13, 0xcc, 0xb5, 0x4c, 0xac, 0xf5, 0x14, 0x3f, 0xb9, 0x01, 0xa7,
	0x0c, 0xf3, 0xc9, 0x03, 0x03, 0xdc, 0x7f, 0x54, 0xcf, 0x2c, 0x0d, 0x8d, 0x61, 0x03, 0x97, 0x3c,
	0xb9, 0xfb, 0x0c, 0x44, 0xd2, 0x0f, 0x77, 0x20, 0x45, 0xbf, 0x88, 0xb8, 0x3b, 0x12, 0xc5, 0xc7,
	0xc2, 0x22, 0x16, 0x1e, 0x3a, 0x62, 0x65, 0x2c, 0x31, 0x16, 0x04, 0xbd, 0x85, 0xcb, 0x73, 0x19,
	0x96, 0x05, 0xc1, 0x1e, 0xa3, 0x5e, 0xb6, 0x17, 0xe7, 0xd9, 0xca, 0x29, 0x24, 0x5a, 0x42, 0xf0,
	0x9b, 0x0a, 0xca, 0x7d, 0x0c, 0x41, 0xf8, 0xd2, 0x7e, 0xb6, 0x42, 0x90, 0x64, 0x16, 0x01, 0x2f,
	0xed, 0x6b, 0xc8, 0x5b, 0xfb, 0xd9, 0xca, 0x69, 0x0d, 0x79, 0x4b, 0x47, 0xbe, 0xbc, 0x9f, 0xad,
	0x9c, 0xd1, 0x90, 0x2f, 0xef, 0x67, 0x84, 0xc0, 0x64, 0x38, 0x4c, 0xb2, 0x95, 0xc7, 0x10, 0x8e,
	0xff, 0x93, 0x17, 0xc1, 0xca, 0x12, 0xe6, 0xe6, 0x34, 0x8f, 0x53, 0x15, 0xd8, 0x9c, 0xd5, 0x8b,
	0xd1, 0x4a, 0xac, 0x08, 0x6f, 0x6e, 0xc1, 0xe9, 0x2a, 0x83, 0x93, 0x0f, 0x57, 0x1e, 0xd7, 0xcb,
	0x95, 0x2a, 0x3c, 0x0f, 0x87, 0xe4, 0x93, 0x70, 0x66, 0x84, 0x2b, 0x88, 0xf6, 0x57, 0x56, 0xf4,
	0x73, 0xa9, 0x0a, 0xdb, 0xfd, 0x68, 0x9f, 0x5c, 0x52, 0x53, 0x86, 0x73, 0xea, 0xd0, 0x7e, 0x7f,
	0xe5, 0x09, 0xec, 0xfd, 0x62, 0x39, 0xaf, 0xeb, 0xfd, 0x3e, 0x79, 0x0f, 0xe6, 0xd0, 0xc8, 0xe2,
	0xe6, 0xb5, 0x8a, 0x82, 0xf2, 0xea, 0x09, 0xcd, 0x40, 0x87, 0x1b, 0x62, 0xe1, 0x4d, 0x7a, 0xf2,
	0xbf, 0xd5, 0x1b, 0x30, 0xab, 0xa0, 0xe4, 0xd9, 0xd2, 0x37, 0x0e, 0x87, 0x89, 0x91, 0x09, 0x55,
	0x1e, 0xf2, 0x83, 0x61, 0x62, 0x7f, 0x67, 0x02, 0xae, 0x8e, 0xf3, 0x61, 0x75, 0x68, 0x41, 0xee,
	0xaa, 0x80, 0xa3, 0x35, 0x96, 0x7c, 0x57, 0xbb, 0x2d, 0x63, 0x10, 0x5d, 0x51, 0x26, 0x7e, 0x9f,
	0x8a, 0xb2, 0x06, 0x33, 0x29, 0x13, 0xd9, 0x4b, 0x7d, 0x03, 0x50, 0x40, 0x34, 0x03, 0x0c, 0xcb,
	0x47, 0x44, 0xc6, 0x5a, 0x77, 0x29, 0xe6, 0x05, 0xe6, 0x21, 0xe6, 0xad, 0xaf, 0x73, 0x8d, 0x4b,
	0xc4, 0x89, 0xf6, 0x00, 0xbd, 0x5c, 0xdf, 0x33, 0x4e, 0x5e, 0x97, 0x05, 0x7a, 0x43, 0x60, 0x37,
	0x3d, 0xf2, 0x1c, 0x2c, 0xd2, 0x9d, 0x38, 0xcd, 0x99, 0x27, 0xd3, 0xa7, 0xdc, 0xd2, 0xcf, 0xaa,
	0x40, 0x48, 0xa2, 0x70, 0x10, 0xe4, 0x6d, 0x38, 0x23, 0x74, 0x93, 0x45, 0x9e, 0x7e, 0xfe, 0x31,
	0x8b, 0xa3, 0x3f, 0xd7, 0x39, 0xea, 0xe4, 0xa4, 0x27, 0x22, 0xb4, 0xbb, 0x91, 0x57, 0x1e, 0x87,
	0x8c, 0xba, 0x4a, 0x73, 0x8d, 0xae, 0x92, 0xdd, 0x39, 0x6e, 0x91, 0x65, 0x82, 0xb5, 0xbb, 0xf1,
	0x26, 0x0b, 0x82, 0xd8, 0xfe, 0xd6, 0xcc, 0x71, 0x0c, 0xc5, 0x76, 0x8d, 0x0c, 0xe3, 0xd5, 0x73,
	0x6d, 0xc3, 0x82, 0x9e, 0x4b, 0x1c, 0x7f, 0x37, 0x32, 0x1c, 0x83, 0x9e, 0xd1, 0xc8, 0x48, 0xfe,
	0x71, 0x62, 0xac, 0xfc, 0x23, 0x0f, 0xd3, 0x65, 0xaa, 0x2b, 0x63, 0x6e, 0x1c, 0x79, 0x66, 0x15,
	0xca, 0x92, 0x44, 0x6e, 0x0b, 0x1c, 0x56, 0xaf, 0x4a, 0xf2, 0x94, 0xd1, 0xac, 0xea, 0x97, 0x4a,
	0x5c, 0x0f, 0x51, 0x7c, 0x2e, 0x86, 0xd4, 0x75, 0x44, 0xd2, 0xcf, 0xc8, 0xa7, 0xcc, 0x0d, 0xa9,
	0x7b, 0x1b, 0xc1, 0xe4, 0xaa, 0xa8, 0x6d, 0xf3, 0xa3, 0xbe, 0xcc, 0x98, 0xd6, 0xc5, 0x89, 0x8a,
	0x84, 0x7c, 0x0a, 0x16, 0x5c, 0xad, 0x44, 0x4d, 0x0a, 0xcd, 0xe3, 0x9d, 0xfa, 0xea, 0xb5, 0x9e,
	0x41, 0x4c, 0x9e, 0x83, 0x69, 0xac, 0xc3, 0xca, 0x50, 0x42, 0xf8, 0xdc, 0x54, 0x4b, 0xcc, 0x7a,
	0x92, 0x80, 0xc7, 0x5c, 0xe1, 0xa1, 0x4a, 0x05, 0xc9, 0x80, 0x0d, 0x1a, 0x02, 0xb6, 0xa5, 0xf0,
	0x50, 0xa6, 0x86, 0x44, 0xbc, 0x76, 0x07, 0xce, 0x56, 0x79, 0x65, 0xd4, 0x36, 0x5f, 0x1f, 0xb5,
	0x9d, 0x36, 0x1b, 0x10, 0x91, 0xdb, 0x2b, 0xb0, 0xac, 0xb5, 0x82, 0x07, 0x31, 0x0b, 0xd2, 0xb9,
	0xaf, 0xb0, 0x2f, 0x16, 0xec, 0x58, 0x00, 0xd7, 0x85, 0xc7, 0x47, 0x3e, 0x8f, 0x7b, 0xa6, 0xca,
	0x8c, 0x8e, 0x8e, 0xe0, 0x8c, 0xd9, 0x01, 0xdc, 0x43, 0xb1, 0x44, 0x42, 0x56, 0x89, 0x0e, 0xe3,
	0x9c, 0x19, 0x05, 0x33, 0x20, 0x10, 0xef, 0xc7, 0x39, 0x23, 0x57, 0xb5, 0x22, 0xb2, 0x65, 0x39,
	0x45, 0x95, 0x42, 0x33, 0xad, 0xa0, 0xec, 0x32, 0x2c, 0xa8, 0xfa, 0x7d, 0x36, 0x64, 0x01, 0x96,
	0xbe, 0x14, 0x1e, 0x86, 0x2c, 0xde, 0xe7, 0x08, 0x72, 0x05, 0x64, 0x2d, 0x34, 0x1f, 0x8a, 0x73,
	0x90, 0x60, 0xd1, 0x4b, 0x85, 0x72, 0x63, 0x90, 0x7e, 0x98, 0x90, 0x57, 0xe0, 0x31, 0x49, 0x79,
	0x90, 0xc8, 0x33, 0xdb, 0xdd, 0x80, 0xf6, 0x33, 0xac, 0x7c, 0x51, 0x1c, 0x44, 0x90, 0x7c, 0x98,
	0xe0, 0x71, 0xed, 0x3d, 0x8e, 0xb7, 0xbf, 0xd5, 0x82, 0xe7, 0x6a, 0x54, 0x4e, 0x76, 0x7e, 0x2b,
	0xf5, 0x87, 0xd4, 0x3d, 0xdc, 0x66, 0x79, 0x8e, 0x4e, 0xd4, 0xdb, 0xdc, 0x0d, 0x17, 0xff, 0xcb,
	0x13, 0x96, 0x9b, 0x9d, 0xb1, 0xb9, 0x3b, 0xf2, 0x9f, 0x5e, 0xd1, 0xc6, 0xea, 0x1f, 0x81, 0x19,
	0x09, 0xe4, 0x93, 0x22, 0xc1, 0xa3, 0xf7, 0x45, 0xe6, 0x25, 0x46, 0x95, 0x68, 0x29, 0x42, 0x11,
	0x10, 0xe9, 0xa9, 0x1c, 0xd5, 0x86, 0xa8, 0x0c, 0xf9, 0x33, 0xe3, 0x07, 0x1a, 0xeb, 0xe2, 0xf8,
	0x69, 0x3c, 0xdb, 0xf5, 0x21, 0x2c, 0xcb, 0xe3, 0xaa, 0xc2, 0xd6, 0x7f, 0x4c, 0xf3, 0xb5, 0x54,
	0xb4, 0x23, 0x36, 0x86, 0x1a, 0x53, 0x34, 0x71, 0x22, 0x53, 0x34, 0xd9, 0x68, 0x8a, 0xec, 0xaf,
	0xb7, 0xe0, 0x85, 0x71, 0xf6, 0xe7, 0x9b, 0xdd, 0x8d, 0xb7, 0x7c, 0x77, 0x7f, 0xbc, 0xa9, 0xf8,
	0xbf, 0x10, 0x53, 0x3c, 0x05, 0xd3, 0x72, 0x30, 0x13, 0x46, 0xa1, 0xaf, 0x18, 0xc5, 0x1f, 0x6f,
	0xc1, 0x8d, 0x71, 0x5b, 0xa7, 0xd1, 0xbe, 0x3c, 0x64, 0xd3, 0x53, 0x71, 0xad, 0x31, 0x52, 0x71,
	0x7a, 0x22, 0xb0, 0x5d, 0x93, 0x08, 0xb4, 0x1d, 0x78, 0xe9, 0xe8, 0x5e, 0x88, 0xb3, 0xf6, 0x98,
	0xcf, 0xe6, 0xed, 0x20, 0xee, 0xcb, 0x7e, 0x8c, 0x54, 0xe5, 0xb7, 0x1a, 0xaa, 0xf2, 0xed, 0x2f,
	0xb5, 0x6a, 0xbf, 0x20, 0x46, 0xf6, 0x76, 0x9c, 0xfb, 0xbb, 0xbe, 0xb8, 0xdf, 0x73, 0x2f, 0x4e,
	0xdf, 0xcb, 0x58, 0xba, 0x25, 0xd6, 0x7a, 0xbc, 0x55, 0x2b, 0xa7, 0xb8, 0x3d, 0x3a, 0xc5, 0xdc,
	0x87, 0xaa, 0x13, 0x3e, 0x05, 0xb4, 0xff, 0x4b, 0x1b, 0x9e, 0xad, 0xe9, 0x9a, 0x92, 0xec, 0x24,
	0x4e, 0x4f, 0x74, 0xd1, 0xea, 0x22, 0x40, 0x9a, 0xe4, 0x0e, 0xf5, 0xc3, 0x9d, 0xd8, 0xac, 0x55,
	0x9e, 0x4b, 0x93, 0x7c, 0x1d, 0xc1, 0xe8, 0xb7, 0x25, 0xb9, 0xf3, 0x88, 0x06, 0xc1, 0x1e, 0x75,
	0xf7, 0xcd, 0x4a, 0xe5, 0x34, 0xc9, 0x3f, 0x90, 0x08, 0x6e, 0x1e, 0x38, 0x61, 0x96, 0x30, 0xe6,
	0x21, 0xa5, 0xae, 0x11, 0xbc, 0x8d, 0x6d, 0x85, 0x51, 0x6d, 0xf2, 0x7d, 0x65, 0x8f, 0xa6, 0x61,
	0xc5, 0x17, 0x4c, 0x70, 0x2b, 0xe1, 0x08, 0xd5, 0x66, 0xce, 0x0e, 0x72, 0xba, 0x33, 0xc8, 0xcc,
	0xea, 0xd2, 0x05, 0xa4, 0x94, 0x18, 0xae, 0x91, 0x9c, 0x74, 0x18, 0xfb, 0x2e, 0x13, 0xb4, 0x33,
	0xba, 0x46, 0xa6, 0x49, 0xfe, 0x7e, 0x81, 0x32, 0xa4, 0x6c, 0xb6, 0x4e, 0xca, 0x7e, 0xa5, 0x05,
	0x97, 0x1a, 0x67, 0x5a, 0xee, 0xf4, 0x27, 0x99, 0xea, 0xe3, 0x3e, 0x38, 0xe2, 0x5b, 0xcc, 0x9d,
	0xc4, 0xb7, 0x78, 0x0a, 0xa6, 0xd1, 0xa9, 0xce, 0x8c, 0x1c, 0x95, 0x84, 0xd9, 0x3f, 0x7d, 0xbc,
	0xd4, 0x08, 0xe1, 0x56, 0xeb, 0x92, 0xc4, 0x71, 0x9a, 0xb0, 0x74, 0xd7, 0xdc, 0x0a, 0xd2, 0x24,
	0xdf, 0x92, 0x08, 0x8c, 0x8a, 0xb9, 0xe4, 0xec, 0x0c, 0x32, 0x7f, 0xc8, 0xc2, 0xd8, 0x63, 0x41,
	0x66, 0x08, 0x90, 0xc5, 0x05, 0x48, 0xc7, 0xe2, 0x6d, 0x80, 0x24, 0x77, 0x76, 0xa8, 0x17, 0xc6,
	0xb9, 0x67, 0x16, 0x04, 0xa5, 0x49, 0x7e, 0x5b, 0xc0, 0x79, 0x68, 0xc9, 0xc9, 0x02, 0xee, 0x2e,
	0x46, 0x7d, 0xb1, 0x90, 0x93, 0x86, 0xf3, 0x9f, 0xe4, 0xf7, 0x35, 0x24, 0x79, 0x09, 0x08, 0x67,
	0xf0, 0x23, 0xee, 0x3c, 0xc4, 0xe9, 0xa1, 0x60, 0xd1, 0x25, 0x8a, 0x77, 0x75, 0xd3, 0x40, 0x1f,
	0xbf, 0xfe, 0x5f, 0x6a, 0xc3, 0xe5, 0x63, 0xe6, 0xac, 0xc8, 0xfd, 0x5e, 0x83, 0x65, 0x19, 0x04,
	0x51, 0x75, 0x33, 0x4b, 0xcf, 0x05, 0x2d, 0xe9, 0x48, 0xa1, 0x75, 0x9a, 0xbc, 0xb4, 0xeb, 0xe5,
	0xe5, 0x69, 0x98, 0x2b, 0xce, 0xa4, 0x8d, 0xb9, 0x9a, 0x55, 0xa7, 0xcf, 0xa8, 0x1b, 0xb2, 0x0b,
	0x62, 0xe3, 0x36, 0xf5, 0x4d, 0xa2, 0x70, 0xe7, 0xbe, 0x06, 0xcb, 0x05, 0xa9, 0x4c, 0xae, 0x4c,
	0x99, 0x39, 0x45, 0x81, 0x94, 0xf9, 0x95, 0x52, 0x9c, 0xa6, 0x6b, 0xc4, 0xe9, 0xe7, 0xeb, 0x6b,
	0xae, 0xd4, 0xd4, 0x60, 0x50, 0xf5, 0x81, 0x4a, 0xb3, 0x8b, 0x1b, 0x1a, 0x58, 0x45, 0x9e, 0x32,
	0xa3, 0x78, 0xae, 0x34, 0x35, 0x4c, 0x95, 0xcf, 0x55, 0x0e, 0x92, 0xda, 0x23, 0x07, 0x49, 0x7a,
	0x32, 0x72, 0xa2, 0x36, 0x19, 0xb9, 0x06, 0x62, 0x09, 0x2b, 0x69, 0x48, 0x05, 0xb4, 0x7f, 0x74,
	0x12, 0x08, 0x76, 0x8e, 0xee, 0x04, 0xe5, 0x61, 0x80, 0x39, 0xdd, 0xad, 0xda, 0xe9, 0x16, 0x25,
	0xee, 0x58, 0xd4, 0xdc, 0x36, 0x4b, 0xdc, 0xb1, 0x9e, 0xf9, 0x39, 0xac, 0x7c, 0x2e, 0x93, 0x11,
	0xc6, 0xa2, 0x2d, 0xe4, 0xc3, 0xed, 0x02, 0xa3, 0x17, 0xcb, 0x4f, 0xd6, 0x14, 0xcb, 0x8b, 0x03,
	0x1e, 0x51, 0xde, 0x9f, 0xd0, 0x2c, 0x7b, 0x14, 0xa7, 0xe2, 0x7a, 0xe2, 0x42, 0x79, 0xc0, 0x83,
	0x43, 0xd8, 0x92, 0x48, 0x72, 0x13, 0x88, 0x1b, 0x38, 0x1e, 0xc3, 0x43, 0x27, 0x1e, 0xce, 0x8e,
	0x1c, 0x61, 0x59, 0x6e, 0x70, 0xa7, 0x44, 0xbf, 0xc5, 0x0e, 0xc9, 0x6b, 0x70, 0x76, 0x94, 0x67,
	0xe4, 0x24, 0xeb, 0x74, 0x95, 0x6f, 0x6b, 0xb0, 0xf3, 0xff, 0xba, 0x9a, 0x5f, 0x5b, 0x1b, 0xb3,
	0x8a, 0x7f, 0xb6, 0xb8, 0x79, 0xad, 0xab, 0xf3, 0x42, 0xc3, 0xe9, 0xa1, 0x9e, 0xc5, 0x93, 0x17,
	0xcf, 0xea, 0xb2, 0xb5, 0x9b, 0x9e, 0xfd, 0x95, 0x7a, 0xe7, 0xd5, 0x10, 0xf0, 0x3f, 0x10, 0xfb,
	0x91, 0x90, 0x6d, 0x4c, 0x03, 0xac, 0xc1, 0x8c, 0x8a, 0xff, 0x75, 0xe9, 0x51, 0xc0, 0xf1, 0x74,
	0xfe, 0x22, 0xc0, 0x1f, 0x8d, 0xfd, 0x48, 0xe6, 0x47, 0x74, 0xf9, 0x99, 0xe3, 0x70, 0x91, 0x1d,
	0x39, 0x0f, 0xb3, 0x48, 0xe4, 0x27, 0x89, 0x21, 0x3d, 0x33, 0x1c, 0xba, 0x99, 0x24, 0x64, 0x1d,
	0x26, 0x52, 0x79, 0x51, 0xe3, 0x63, 0xb8, 0xc5, 0x9c, 0x17, 0xab, 0x03, 0xd3, 0x34, 0x4e, 0xc3,
	0xac, 0x6f, 0xe4, 0xd5, 0x0b, 0xa8, 0xfd, 0xe3, 0x63, 0x4e, 0x91, 0xd8, 0x57, 0xbe, 0x7b, 0x53,
	0x74, 0xbc, 0x01, 0x30, 0x34, 0x79, 0xb2, 0x56, 0x93, 0x79, 0x68, 0x29, 0x48, 0x50, 0x9b, 0x8d,
	0xc2, 0x61, 0x81, 0x40, 0x8d, 0x96, 0x13, 0x39, 0xfd, 0xf1, 0x27, 0xd2, 0x3e, 0x80, 0xe7, 0x25,
	0x5b, 0xd6, 0x34, 0x4b, 0x6f, 0xb3, 0x47, 0x0f, 0x44, 0x4d, 0x2b, 0x16, 0x8a, 0x88, 0x7f, 0x47,
	0x66, 0x40, 0xc2, 0xc5, 0xe5, 0x78, 0x97, 0x86, 0x09, 0xf5, 0xfb, 0x91, 0x3a, 0x2b, 0x2f, 0x3a,
	0xaf, 0x10, 0x9b, 0x9e, 0xfd, 0x85, 0x76, 0x91, 0x3a, 0xca, 0xea, 0xca, 0x37, 0xd1, 0x8f, 0x3d,
	0xfc, 0x70, 0x4b, 0x1c, 0x3c, 0x31, 0xaf, 0xb6, 0x60, 0xbb, 0x35, 0x5e, 0xc1, 0xf6, 0xb8, 0xc2,
	0xad, 0xb2, 0x02, 0x07, 0xe6, 0x8e, 0x36, 0x27, 0xe1, 0x1f, 0xe2, 0x96, 0xa6, 0x88, 0x44, 0x80,
	0x6e, 0x6c, 0x69, 0x12, 0x25, 0x22, 0xf4, 0x6b, 0xb0, 0x3c, 0x48, 0xfa, 0x29, 0xf5, 0x98, 0xa7,
	0xee, 0x38, 0x18, 0x5b, 0x9a, 0x42, 0xca, 0xfb, 0x67, 0xdf, 0x69, 0xc1, 0xd3, 0x35, 0x2b, 0x58,
	0xec, 0x53, 0xdc, 0x91, 0xff, 0x6e, 0xed, 0x52, 0x5d, 0x78, 0xec, 0x91, 0xda, 0x62, 0x9c, 0xb2,
	0xec, 0x42, 0x55, 0x03, 0x9f, 0xee, 0x8c, 0x6e, 0x40, 0xbd, 0xd3, 0x8f, 0x46, 0x60, 0x98, 0x66,
	0x67, 0x07, 0x39, 0x8b, 0xf8, 0x18, 0xf9, 0x76, 0x11, 0x0f, 0x4c, 0x69, 0x5d, 0x56, 0xd8, 0x87,
	0x02, 0x69, 0xff, 0xf7, 0xd6, 0xf1, 0x6a, 0x29, 0x1c, 0xca, 0x6c, 0x2b, 0x8d, 0x77, 0xfd, 0x80,
	0x89, 0xe3, 0x4e, 0x35, 0x64, 0xc7, 0xf1, 0x58, 0x92, 0x32, 0x97, 0xe6, 0xcc, 0x1c, 0xfe, 0xe9,
	0x62, 0xf8, 0x77, 0x0a, 0x02, 0xf2, 0x32, 0x3c, 0xae, 0x4d, 0x84, 0xc1, 0x2b, 0x26, 0xe5, 0x4c,
	0x39, 0x29, 0x1a, 0x9b, 0x29, 0x2e, 0x13, 0xf5, 0xe2, 0x82, 0xce, 0x8d, 0xe8, 0x56, 0x8d, 0x24,
	0x48, 0x14, 0x4a, 0x82, 0xfd, 0x63, 0xf5, 0x4b, 0x5b, 0x19, 0xe7, 0x58, 0x4b, 0xfb, 0x21, 0x58,
	0xaa, 0x6b, 0x89, 0xe0, 0x53, 0xf5, 0xdf, 0xd7, 0x3a, 0x27, 0x49, 0xc4, 0xf6, 0x96, 0xa9, 0x4a,
	0xc4, 0x88, 0x56, 0xec, 0xdf, 0x6a, 0xd7, 0xa6, 0x72, 0x45, 0x27, 0xdf, 0x19, 0xb2, 0x14, 0xd7,
	0x7f, 0x83, 0x66, 0x4c, 0xc6, 0xab, 0x4f, 0xc1, 0xb4, 0x4b, 0x33, 0x56, 0xbd, 0xe2, 0x23, 0x60,
	0xc4, 0x86, 0xb9, 0x6c, 0x80, 0xce, 0x46, 0x75, 0x0a, 0x0b, 0x30, 0x79, 0x06, 0x60, 0x37, 0xa5,
	0xae, 0x76, 0x28, 0x5b, 0x18, 0x8a, 0x12, 0x5e, 0x89, 0x01, 0xa7, 0xc6, 0x8b, 0x01, 0xa7, 0xc7,
	0x8e, 0x01, 0x67, 0xc6, 0x8e, 0x01, 0x67, 0x9b, 0x62, 0xc0, 0x32, 0x64, 0x9e, 0xab, 0xc9, 0x4a,
	0xfc, 0xc6, 0x44, 0xad, 0x37, 0x5a, 0x33, 0xb1, 0xeb, 0x59, 0xe6, 0xf7, 0x23, 0xbc, 0xe1, 0x7d,
	0xf4, 0xe4, 0xae, 0xc1, 0x0c, 0xff, 0x6f, 0x90, 0x06, 0xe6, 0xe3, 0x1a, 0x12, 0x28, 0x77, 0x32,
	0xcf, 0x77, 0x73, 0x33, 0x4a, 0x97, 0x40, 0xbe, 0x38, 0xe5, 0x3d, 0x6e, 0xf3, 0x56, 0x65, 0x71,
	0x8b, 0xbb, 0x03, 0xcb, 0xf9, 0x5e, 0x1a, 0xe7, 0x79, 0xc0, 0x54, 0xc4, 0x6f, 0x68, 0x76, 0x05,
	0x69, 0x2e, 0xf8, 0xf4, 0x38, 0x0b, 0x3e, 0xd3, 0xb0, 0xe0, 0x36, 0xcc, 0x45, 0x83, 0x10, 0xcf,
	0x5d, 0x33, 0x63, 0xd2, 0x4b, 0x30, 0xb9, 0x0a, 0x4b, 0x8a, 0x43, 0x12, 0xea, 0x53, 0x5f, 0xc1,
	0x91, 0x9b, 0x70, 0x0a, 0x9f, 0x13, 0xd8, 0x77, 0xe3, 0x68, 0x28, 0xab, 0xea, 0x8c, 0x53, 0xde,
	0x51, 0xb4, 0xb6, 0xa8, 0xf3, 0x35, 0x8b, 0x1a, 0x8d, 0xab, 0x2c, 0xdb, 0x39, 0xcd, 0x07, 0xd9,
	0x31, 0xeb, 0xc9, 0x9d, 0x06, 0xa4, 0xab, 0xec, 0x4e, 0x05, 0xd4, 0xde, 0x81, 0xb5, 0x0d, 0xa5,
	0xbe, 0xd4, 0xd3, 0xbe, 0x71, 0x77, 0xe8, 0x7b, 0x2c, 0x72, 0xd9, 0x58, 0x57, 0xb7, 0xca, 0x5e,
	0xb4, 0x47, 0x7b, 0x61, 0x0f, 0x6a, 0x6f, 0x29, 0x14, 0x76, 0xe3, 0x21, 0x3b, 0xc8, 0x1f, 0x64,
	0xe2, 0xa9, 0x20, 0xf3, 0x0b, 0x6d, 0xdf, 0x2b, 0x2a, 0x70, 0x8d, 0x9b, 0xd0, 0x58, 0x81, 0xbb,
	0x06, 0x33, 0x09, 0x3d, 0x0c, 0x62, 0x2a, 0xec, 0x80, 0x8a, 0x11, 0x14, 0xd0, 0x7e, 0xa7, 0xf6,
	0xb3, 0xc5, 0x41, 0xd3, 0xd1, 0x9f, 0x25, 0x30, 0x49, 0xd3, 0xbe, 0xb0, 0x81, 0x0b, 0x3d, 0xfc,
	0xdf, 0xfe, 0xcd, 0xfa, 0xbc, 0xb5, 0x3a, 0x99, 0xec, 0x0d, 0xa2, 0x5e, 0x51, 0xa1, 0x92, 0x91,
	0x0f, 0x41, 0xba, 0x54, 0x78, 0xc6, 0x3a, 0x71, 0x92, 0x33, 0xd6, 0xd1, 0x2a, 0xab, 0x9e, 0xd6,
	0x56, 0xe3, 0x49, 0xde, 0xe4, 0xc7, 0x3b, 0xc9, 0xb3, 0xbf, 0x32, 0x0d, 0x4f, 0x6c, 0xdc, 0x75,
	0xe3, 0x68, 0x33, 0x67, 0xe1, 0x56, 0xca, 0x86, 0x3e, 0x7b, 0xc4, 0x11, 0xb7, 0x83, 0xd8, 0xdd,
	0x1f, 0x77, 0xfd, 0xfd, 0x9c, 0x85, 0xd5, 0xf5, 0x17, 0x30, 0x2c, 0x73, 0x66, 0xbb, 0xe2, 0xae,
	0x83, 0x11, 0xd0, 0x2b, 0x28, 0xd7, 0xdf, 0x84, 0xfa, 0x51, 0x2e, 0x68, 0x0c, 0x83, 0x5d, 0xc2,
	0x51, 0x73, 0x68, 0xea, 0xe7, 0x87, 0x86, 0xc1, 0x90, 0x30, 0x2e, 0x0e, 0x1f, 0x0d, 0x68, 0xc0,
	0xd1, 0xba, 0x95, 0x50, 0x40, 0x3e, 0x0e, 0x6c, 0xeb, 0x11, 0xa3, 0xa9, 0x61, 0x22, 0x4a, 0x70,
	0x41, 0x93, 0x31, 0xe6, 0x99, 0x16, 0xa2, 0x00, 0x93, 0x5b, 0x40, 0xf6, 0xfd, 0x20, 0x60, 0x34,
	0x67, 0x29, 0x96, 0x61, 0xa0, 0x78, 0xea, 0x56, 0xa2, 0x06, 0xcf, 0xed, 0x4a, 0x01, 0x1d, 0xad,
	0xa9, 0xaa, 0xe0, 0xf8, 0x7c, 0xb8, 0x83, 0x2c, 0x8f, 0x43, 0x7c, 0xe2, 0x63, 0x5e, 0xbf, 0x6b,
	0x53, 0xc2, 0xc9, 0x67, 0xb8, 0x76, 0xfb, 0xee, 0x3e, 0x4b, 0x55, 0x61, 0xa2, 0xdd, 0x69, 0x5c,
	0xc7, 0xce, 0xb6, 0x20, 0xed, 0x15, 0x3c, 0xe2, 0xad, 0x2d, 0x99, 0x1c, 0x32, 0xee, 0x71, 0x97,
	0x60, 0x3e, 0xe7, 0x71, 0xea, 0xf7, 0xfd, 0xc8, 0x38, 0x87, 0x92, 0x30, 0x31, 0xe7, 0x2c, 0xe3,
	0x92, 0xb1, 0x6c, 0xce, 0x39, 0x02, 0xf9, 0x38, 0xbc, 0x34, 0x4e, 0xa4, 0xbd, 0xd3, 0xaf, 0x67,
	0x6b, 0xf0, 0xd5, 0xaf, 0xb4, 0x60, 0x46, 0xf6, 0x8e, 0xab, 0x7b, 0x16, 0xc4, 0xe6, 0x03, 0x00,
	0x08, 0xe1, 0xdb, 0xb5, 0xec, 0xf9, 0x88, 0xaf, 0x2d, 0xe1, 0xf2, 0x49, 0x0e, 0xbe, 0xbe, 0x7a,
	0xb9, 0x3d, 0x42, 0xc4, 0xbd, 0x5b, 0x1a, 0x98, 0x85, 0xf6, 0x02, 0xc4, 0x05, 0x34, 0x8d, 0xf3,
	0xb2, 0x30, 0xab, 0xa8, 0xc3, 0x57, 0x50, 0x3b, 0x80, 0x9b, 0x47, 0x69, 0x7e, 0xa9, 0xf6, 0x7a,
	0x96, 0x9c, 0x7c, 0x12, 0x66, 0x51, 0x05, 0xca, 0x0a, 0xc1, 0xd5, 0xe6, 0x05, 0xea, 0x15, 0xb4,
	0xf6, 0xdb, 0x70, 0x86, 0x7f, 0x0d, 0x4b, 0xe4, 0xdc, 0xfd, 0x28, 0x7e, 0x14, 0x30, 0xaf, 0xcf,
	0x3c, 0xa3, 0xbd, 0xd6, 0x09, 0xda, 0xfb, 0xd9, 0x56, 0x6d, 0x79, 0x67, 0x61, 0x0a, 0x79, 0x13,
	0x23, 0xec, 0xc2, 0x35, 0x24, 0xe7, 0xb8, 0x95, 0x4d, 0x69, 0xe8, 0x64, 0xe6, 0x0e, 0x83, 0xc0,
	0xed, 0x12, 0x4d, 0x4d, 0xd5, 0x47, 0xe0, 0x7a, 0x89, 0x36, 0x83, 0x56, 0x81, 0xbe, 0x53, 0xa2,
	0x43, 0x23, 0x67, 0x25, 0xd0, 0x0f, 0xec, 0x14, 0x5e, 0x3d, 0x79, 0xb7, 0x65, 0x6a, 0xf2, 0xe3,
	0xce, 0xd5, 0x8f, 0xb4, 0xe0, 0xb5, 0x9a, 0x8f, 0x56, 0x4a, 0xe0, 0x9b, 0x56, 0x5c, 0x4f, 0xc7,
	0xb4, 0xea, 0xd2, 0x31, 0xba, 0x2d, 0x6c, 0xd7, 0xda, 0xc2, 0xb5, 0x22, 0x48, 0xf0, 0x3d, 0x11,
	0x38, 0x95, 0x31, 0x96, 0xef, 0x65, 0xf6, 0xcb, 0xcd, 0xa7, 0x40, 0xf7, 0xfd, 0x4c, 0xc5, 0x3a,
	0xf2, 0x5c, 0xf9, 0xbe, 0x3f, 0x64, 0x5d, 0x1a, 0xb2, 0xcc, 0xfe, 0xb0, 0x59, 0x82, 0x35, 0x36,
	0x45, 0x2f, 0x0f, 0x78, 0xc6, 0x31, 0xfe, 0x63, 0xb6, 0xdc, 0x63, 0x2e, 0x8b, 0x72, 0xde, 0x28,
	0xf6, 0x67, 0xac, 0x96, 0x1f, 0x8e, 0xd5, 0x72, 0xb9, 0x34, 0xa2, 0xe5, 0x35, 0x98, 0x51, 0x8f,
	0x33, 0x8d, 0xde, 0x82, 0xf1, 0x3d, 0xfb, 0xfb, 0x8f, 0xb8, 0xed, 0xa7, 0x35, 0x7b, 0x6f, 0x10,
	0x04, 0xbc, 0x41, 0xcc, 0x92, 0x6a, 0xc9, 0xd5, 0x56, 0x4d, 0x72, 0x95, 0x8f, 0x26, 0x1e, 0xe4,
	0x6e, 0x1c, 0x56, 0x7d, 0xa0, 0x12, 0x5c, 0xde, 0x58, 0x9d, 0x18, 0x7d, 0x4b, 0xe1, 0x77, 0xdb,
	0x70, 0xae, 0xee, 0xe6, 0x45, 0x99, 0xa7, 0x1d, 0xa3, 0x07, 0xf8, 0x2f, 0x26, 0x57, 0xcd, 0x0c,
	0x8a, 0x02, 0x93, 0x0d, 0x20, 0x45, 0xb0, 0x2d, 0xf8, 0x4a, 0xd7, 0xa4, 0x36, 0x36, 0xaf, 0x21,
	0x27, 0x7f, 0x18, 0x4e, 0x09, 0xef, 0x37, 0xa7, 0x79, 0xe6, 0x04, 0xac, 0x4f, 0xdd, 0x43, 0xe9,
	0x7a, 0x9c, 0xb8, 0x16, 0xcb, 0x2a, 0x5b, 0xba, 0x8f, 0x0d, 0x91, 0xf7, 0x60, 0xb1, 0x84, 0xd1,
	0x20, 0x90, 0x97, 0x18, 0x4e, 0xdc, 0xb2, 0xd9, 0x8a, 0xfd, 0xbd, 0x2d, 0xb8, 0x7c, 0xf4, 0xcd,
	0x96, 0x6e, 0x1a, 0x0f, 0x92, 0x71, 0x5e, 0x20, 0x34, 0x1e, 0x70, 0x98, 0x32, 0x1f, 0x70, 0xb8,
	0x04, 0xf3, 0x6e, 0x9c, 0xa6, 0xcc, 0xcd, 0x13, 0x5f, 0x1e, 0x18, 0xce, 0x16, 0x6f, 0x31, 0x95,
	0x08, 0xfb, 0x7f, 0x4e, 0xc0, 0xc5, 0x31, 0xba, 0xc3, 0x17, 0x1d, 0x53, 0xc5, 0x15, 0x15, 0x51,
	0xc0, 0xe2, 0x11, 0xb0, 0xf6, 0xc8, 0x23, 0x60, 0x2b, 0x30, 0x89, 0x2f, 0x2f, 0xea, 0x55, 0xb2,
	0x08, 0x21, 0xd7, 0xe1, 0x14, 0xef, 0x83, 0x99, 0xb5, 0x30, 0xce, 0x99, 0x10, 0xad, 0xa5, 0x2d,
	0x3e, 0x03, 0x53, 0xa2, 0x8e, 0x46, 0xac, 0xc5, 0x95, 0xce, 0x98, 0x33, 0xd9, 0x13, 0x6c, 0xe4,
	0x49, 0x98, 0x53, 0x17, 0xce, 0x54, 0xa1, 0xed, 0x6c, 0x26, 0xae, 0x99, 0x61, 0x08, 0xc5, 0xbf,
	0xc7, 0xad, 0x30, 0x57, 0xfa, 0x00, 0xe5, 0x77, 0xc6, 0x78, 0xcc, 0xad, 0x8a, 0x26, 0xcf, 0xc3,
	0x22, 0x07, 0x72, 0xb9, 0x14, 0x1d, 0x9b, 0x35, 0x2a, 0x10, 0x74, 0x14, 0xb9, 0x0a, 0xcb, 0xf2,
	0x25, 0x81, 0x84, 0xa5, 0x78, 0xc9, 0xcb, 0xac, 0x53, 0x13, 0xc8, 0x2d, 0x96, 0x6e, 0xf9, 0xee,
	0x3e, 0xf9, 0x1c, 0x4c, 0xe1, 0xe8, 0xe5, 0x25, 0xaf, 0xe7, 0xc7, 0x19, 0x6a, 0x87, 0x73, 0x66,
	0x3d, 0xc1, 0xb8, 0xfa, 0x34, 0x4c, 0xe1, 0x6f, 0xb2, 0x02, 0x33, 0x1c, 0xa2, 0xee, 0x05, 0x4d,
	0xf5, 0xd4, 0x4f, 0xfb, 0x17, 0x5b, 0xf0, 0xec, 0xd1, 0xed, 0xca, 0xb7, 0x0c, 0x31, 0xf6, 0x65,
	0xae, 0x56, 0x65, 0x5d, 0xba, 0x3c, 0x0a, 0xfc, 0xb1, 0x64, 0xe0, 0xd3, 0x30, 0x8d, 0x22, 0x94,
	0xad, 0x4c, 0xca, 0x07, 0x46, 0xc6, 0x18, 0x67, 0x4f, 0xf2, 0xd8, 0xff, 0xb9, 0x05, 0xf6, 0xd1,
	0xf4, 0x68, 0xb1, 0x6e, 0xc3, 0xac, 0xec, 0xa5, 0xaa, 0x7f, 0xb8, 0xd4, 0x19, 0x6b, 0xd8, 0xbd,
	0x82, 0xaf, 0xf6, 0x02, 0x4f, 0xfb, 0xf7, 0x73, 0x81, 0x67, 0x62, 0xbc, 0x0b, 0x3c, 0xf6, 0x2f,
	0xb7, 0xd5, 0x5b, 0x12, 0xf5, 0x9b, 0x04, 0xb9, 0x02, 0x0b, 0x61, 0xd6, 0x97, 0x09, 0xb4, 0xca,
	0xea, 0x18, 0x18, 0x73, 0xa7, 0x6b, 0xd7, 0x07, 0x50, 0xcf, 0xa8, 0x60, 0x11, 0xc5, 0x7f, 0x62,
	0x34, 0x2f, 0x8f, 0x72, 0xff, 0xaa, 0xdc, 0x03, 0x98, 0x5a, 0xb7, 0xb5, 0xce, 0x91, 0x9b, 0x46,
	0x4f, 0x91, 0x93, 0xe7, 0x60, 0x46, 0xbe, 0x7b, 0x28, 0x95, 0x78, 0x64, 0x06, 0x14, 0x9e, 0xbc,
	0xa5, 0x5f, 0xab, 0xd0, 0x5c, 0xd7, 0x8b, 0x9d, 0xe3, 0xd7, 0xbc, 0x57, 0x61, 0xe5, 0xfb, 0xda,
	0x5a, 0x5d, 0x3e, 0xa3, 0xbc, 0x84, 0x38, 0x72, 0x6b, 0x75, 0xb1, 0x7a, 0x6b, 0xb5, 0x0f, 0x67,
	0x51, 0xf0, 0x64, 0x42, 0x19, 0x6d, 0xb3, 0x50, 0xd2, 0x76, 0x73, 0x39, 0x98, 0xf6, 0x85, 0x0e,
	0x4a, 0x2f, 0x4e, 0x0a, 0x1f, 0x29, 0xd7, 0xce, 0xde, 0xe9, 0xfe, 0x08, 0x2c, 0x5b, 0xfd, 0xa9,
	0x16, 0x90, 0x51, 0xda, 0x51, 0x25, 0x9c, 0x1a, 0x55, 0x42, 0xcd, 0x50, 0xeb, 0xdb, 0x42, 0x61,
	0xa8, 0x57, 0x61, 0xaa, 0x8c, 0x7f, 0x8b, 0x4d, 0xa3, 0x08, 0x6b, 0xe5, 0xe5, 0xae, 0xc9, 0xea,
	0x76, 0x63, 0x84, 0xd6, 0x53, 0xa3, 0xa1, 0xb5, 0xfd, 0xeb, 0x6d, 0x58, 0xad, 0x19, 0xfd, 0x3d,
	0x1a, 0xe5, 0x34, 0x3b, 0x3c, 0x7e, 0x6e, 0xdf, 0x50, 0xa6, 0x5d, 0x4c, 0xe5, 0xe5, 0x4e, 0x73,
	0x63, 0x1d, 0xf9, 0x57, 0xb3, 0xec, 0xab, 0x0e, 0xcc, 0x4b, 0xe8, 0x36, 0x0f, 0xd1, 0x9a, 0x6f,
	0x4b, 0xe3, 0x03, 0xd1, 0xf2, 0x45, 0x63, 0xed, 0x81, 0x68, 0x77, 0x5f, 0x1b, 0xdf, 0xc4, 0xe8,
	0xf8, 0x56, 0x93, 0xe2, 0x03, 0xb8, 0x35, 0x8f, 0xb3, 0x14, 0x6f, 0xc0, 0x94, 0x78, 0x3b, 0x6c,
	0xfc, 0x21, 0xf1, 0xce, 0xf7, 0x04, 0x97, 0xfd, 0x22, 0x9c, 0xda, 0x58, 0xcf, 0xf3, 0xd4, 0xdf,
	0x19, 0xe4, 0xcc, 0xe1, 0x4c, 0x51, 0x9f, 0x2f, 0x9f, 0x08, 0xda, 0xf5, 0xd2, 0x29, 0x01, 0xb2,
	0x57, 0x61, 0x45, 0x7c, 0xe1, 0x61, 0xdc, 0xdd, 0xe8, 0xb1, 0x20, 0xa6, 0xea, 0xa5, 0xd2, 0xcc,
	0xfe, 0x9d, 0xb6, 0x88, 0xe4, 0x8a, 0x8f, 0x7f, 0xc0, 0x02, 0xee, 0x0d, 0xe2, 0xf3, 0xac, 0x79,
	0x9c, 0x32, 0x71, 0x5d, 0x6a, 0x8f, 0x66, 0x7b, 0x95, 0x8b, 0x66, 0x1c, 0xc9, 0x23, 0x95, 0x37,
	0x69, 0xb6, 0x47, 0x3e, 0x03, 0x8f, 0x73, 0xfd, 0x17, 0xcf, 0x02, 0xb9, 0x3c, 0xbc, 0x71, 0x07,
	0xb9, 0x3f, 0x64, 0x81, 0x99, 0xea, 0x68, 0x22, 0xc2, 0x73, 0x75, 0x3f, 0x64, 0xce, 0xae, 0x9f,
	0x66, 0xb9, 0x7a, 0x5d, 0x08, 0x8c, 0xa4, 0xab, 0x1f, 0xb2, 0x7b, 0x1c, 0x2b, 0x9f, 0x18, 0xea,
	0x80, 0x15, 0xd0, 0x4c, 0x3e, 0x12, 0x2c, 0x19, 0x8c, 0xbb, 0x58, 0x1c, 0xfb, 0xb0, 0x7c, 0x92,
	0xe8, 0x2a, 0x2c, 0x23, 0xbd, 0x9f, 0x14, 0x77, 0x8e, 0xf4, 0x84, 0xc2, 0x22, 0x47, 0x16, 0xf7,
	0x3a, 0xb9, 0xb5, 0xeb, 0x67, 0x6e, 0x1c, 0xef, 0xfb, 0xdc, 0x5d, 0x26, 0xfa, 0x23, 0x7e, 0x25,
	0x9c, 0x87, 0x4a, 0x83, 0xc8, 0xff, 0x68, 0xc0, 0x69, 0x4e, 0xeb, 0x27, 0x9e, 0x0a, 0x6a, 0xff,
	0xb7, 0xfa, 0xba, 0x3c, 0x11, 0x20, 0xbe, 0x4f, 0xc5, 0xdd, 0x34, 0x3d, 0x3e, 0x53, 0xcf, 0x59,
	0xe2, 0xca, 0x39, 0x23, 0xef, 0xa7, 0xce, 0x21, 0x1c, 0x5f, 0x1d, 0x7e, 0x1a, 0xc4, 0x0f, 0xc7,
	0x8f, 0x2a, 0xf7, 0xaf, 0x11, 0xbc, 0x19, 0xe5, 0xda, 0x61, 0x2a, 0x1f, 0x72, 0x9d, 0xd1, 0xe6,
	0xe3, 0xad, 0x9e, 0xb9, 0x4e, 0x36, 0x9c, 0xb9, 0x5e, 0x84, 0x45, 0x77, 0x2f, 0xde, 0x67, 0x9e,
	0xb3, 0xc3, 0x9d, 0x1d, 0x61, 0xa7, 0xe7, 0x7a, 0x0b, 0x02, 0x88, 0x51, 0x6a, 0xc6, 0x43, 0x97,
	0x1b, 0x8d, 0x05, 0x7a, 0x8d, 0x03, 0x1e, 0x27, 0x83, 0xb7, 0x06, 0xc0, 0x23, 0x62, 0x1a, 0xf5,
	0xd5, 0xc9, 0xcf, 0x62, 0x4f, 0x83, 0x14, 0xaa, 0x3d, 0x51, 0x4d, 0xc3, 0xda, 0x57, 0x8b, 0x93,
	0x5e, 0x23, 0xbb, 0xeb, 0xef, 0x72, 0x9f, 0xbe, 0x78, 0xc3, 0x48, 0x06, 0x55, 0xf6, 0x97, 0x27,
	0x6a, 0x0b, 0x42, 0x47, 0xc9, 0x65, 0x18, 0x6f, 0x6e, 0x8c, 0xad, 0x86, 0x8d, 0xf1, 0x16, 0x9c,
	0x16, 0x92, 0xca, 0x52, 0x3f, 0xf6, 0x8a, 0x32, 0x56, 0x7d, 0xb3, 0x45, 0x0d, 0xd8, 0x42, 0xbc,
	0xaa, 0x64, 0xe5, 0x6a, 0x11, 0xe7, 0x34, 0x70, 0xfa, 0xfc, 0xeb, 0x4e, 0xdf, 0x1f, 0x56, 0x82,
	0xb3, 0x65, 0x44, 0x63, 0xdf, 0xba, 0x1c, 0x49, 0x2e, 0xc3, 0x82, 0xe2, 0x18, 0xb2, 0xd4, 0x2c,
	0xd9, 0x9f, 0x97, 0xc4, 0x1c, 0x41, 0xfe, 0x50, 0xf9, 0x96, 0x99, 0xd8, 0x6f, 0xd7, 0x3b, 0x27,
	0x18, 0x75, 0x87, 0x23, 0x34, 0xb8, 0xf9, 0xe2, 0xd9, 0xea, 0xfb, 0x70, 0xa6, 0x8e, 0x60, 0xac,
	0x75, 0x5e, 0x85, 0x29, 0x1c, 0xad, 0xf9, 0x34, 0x12, 0x82, 0xec, 0xbd, 0xda, 0xf4, 0xb6, 0xd0,
	0xa6, 0xed, 0xc1, 0x4e, 0xe8, 0xe7, 0xdb, 0x65, 0xf9, 0xf9, 0xd3, 0x30, 0x57, 0xbe, 0x65, 0x6c,
	0xd6, 0x0d, 0xc9, 0x57, 0x8c, 0xb9, 0xcc, 0x60, 0x05, 0xbb, 0x91, 0xba, 0xe7, 0x10, 0x7b, 0xab,
	0x56, 0x66, 0x8a, 0x52, 0x60, 0xa5, 0xc0, 0x81, 0x8f, 0x07, 0x82, 0xe3, 0xa4, 0x0a, 0xfe, 0x7a,
	0xbb, 0x36, 0xc5, 0x55, 0x34, 0xb9, 0x35, 0x48, 0x99, 0x52, 0x13, 0x6c, 0xd6, 0x8f, 0xa3, 0x7b,
	0xd4, 0x0f, 0x06, 0xe9, 0x78, 0x27, 0x1c, 0x7c, 0x03, 0xa3, 0xf9, 0x9e, 0xe9, 0x65, 0x73, 0x08,
	0xc7, 0xec, 0xfa, 0x81, 0xf9, 0x3e, 0x3b, 0x42, 0xc8, 0x59, 0x98, 0x70, 0x53, 0xd7, 0x10, 0x12,
	0x0e, 0xe0, 0x1c, 0x85, 0xc5, 0x2f, 0x36, 0x43, 0x0e, 0xe1, 0x1c, 0x81, 0x7c, 0x6c, 0x51, 0x21,
	0x38, 0x00, 0x9f, 0xd3, 0xa7, 0xee, 0xbe, 0x13, 0x0d, 0xc2, 0x1d, 0x96, 0x1a, 0x0f, 0x5f, 0x00,
	0x47, 0xbc, 0x8d, 0x70, 0x72, 0x09, 0x16, 0x90, 0x8c, 0x7f, 0x5d, 0xd5, 0xf7, 0x19, 0x74, 0xf7,
	0xfc, 0x80, 0x6d, 0x7a, 0xf6, 0xd7, 0x5a, 0xf5, 0x3a, 0x5b, 0x9c, 0xc8, 0x98, 0x8e, 0x7c, 0x25,
	0xa1, 0xb2, 0x58, 0x49, 0xa8, 0x60, 0xed, 0x2e, 0x0f, 0xe7, 0x2a, 0xee, 0xad, 0x02, 0x9a, 0x55,
	0x53, 0x13, 0xb5, 0x55, 0x53, 0x2b, 0x22, 0xe6, 0xf6, 0x3d, 0xe1, 0xd9, 0x2e, 0xf6, 0xd4, 0x4f,
	0xfb, 0xf3, 0x2d, 0x58, 0xdc, 0xd8, 0x7e, 0xe7, 0xae, 0x1b, 0x47, 0x1b, 0xf1, 0x20, 0xc1, 0xa0,
	0x08, 0x35, 0xe1, 0xb0, 0xe8, 0xce, 0xec, 0xe7, 0x7f, 0xe2, 0x5c, 0x4b, 0x76, 0x49, 0x20, 0xb8,
	0x57, 0x51, 0xf3, 0xfc, 0xa3, 0x84, 0x91, 0x6b, 0xb0, 0xcc, 0x0e, 0x12, 0x5f, 0xdc, 0x43, 0x74,
	0xb8, 0x8c, 0x61, 0xb7, 0x66, 0x8a, 0x17, 0xe8, 0x0b, 0xe4, 0x1d, 0x9a, 0x33, 0xfb, 0x8b, 0x2d,
	0xb0, 0x36, 0xb6, 0xdf, 0xc1, 0x03, 0x13, 0x55, 0xfe, 0xc1, 0x7b, 0x61, 0xba, 0xfe, 0x5a, 0x2f,
	0x94, 0xe7, 0xff, 0x22, 0x58, 0x32, 0xf6, 0x4c, 0x59, 0x48, 0xfd, 0xa8, 0xfa, 0x3e, 0xb3, 0x8c,
	0x4c, 0x7b, 0x0a, 0xc9, 0xed, 0x8b, 0xfe, 0xf8, 0x9d, 0x59, 0x71, 0xbc, 0x53, 0x3e, 0x78, 0x87,
	0xaf, 0xfd, 0x6e, 0x6c, 0xbf, 0xb3, 0xc5, 0xd2, 0x2c, 0x8e, 0x28, 0xf7, 0xcb, 0xe5, 0x4b, 0xfc,
	0xd5, 0x7b, 0x1e, 0xad, 0xa6, 0x7b, 0x1e, 0xd5, 0xaa, 0xdb, 0xf6, 0x49, 0xaa, 0x6e, 0x5f, 0x80,
	0x25, 0x16, 0xb0, 0x21, 0xcd, 0x19, 0xbe, 0xc5, 0x22, 0xe7, 0x6f, 0xb6, 0x78, 0x35, 0x42, 0xe2,
	0xb6, 0x39, 0xca, 0xfe, 0x14, 0x3c, 0x29, 0x4f, 0xa4, 0xc4, 0x95, 0xa8, 0x2e, 0x97, 0x85, 0xed,
	0xc1, 0x4e, 0xe6, 0xa6, 0xfe, 0x0e, 0x1e, 0xf7, 0x8b, 0xf7, 0xc3, 0xcc, 0xfc, 0xb2, 0x80, 0xd9,
	0xeb, 0x70, 0x6e, 0x94, 0xf9, 0xbd, 0x28, 0x2b, 0xd8, 0x2f, 0xc0, 0x2c, 0xb7, 0xec, 0x01, 0xdb,
	0x35, 0x1f, 0x0d, 0x29, 0xa0, 0xf6, 0x1f, 0x6b, 0xc1, 0xd9, 0xd1, 0x36, 0xf8, 0x38, 0x8f, 0xfe,
	0x36, 0xba, 0x29, 0x34, 0x64, 0xbc, 0xa1, 0xd0, 0x34, 0x98, 0x1a, 0x9c, 0x53, 0x85, 0x59, 0xc2,
	0x52, 0x5c, 0xb2, 0xca, 0x6b, 0x7f, 0x05, 0xdc, 0x7e, 0xb7, 0xb6, 0x10, 0x59, 0xcb, 0xee, 0xab,
	0x5a, 0xfa, 0x2b, 0xb0, 0x40, 0xb5, 0x9c, 0xbf, 0x31, 0x26, 0x03, 0x63, 0xdf, 0xa8, 0x4d, 0x63,
	0x16, 0xd9, 0x71, 0x55, 0xf4, 0x92, 0x72, 0x59, 0xec, 0xb3, 0x8d, 0xd8, 0x8f, 0xec, 0xef, 0x81,
	0x2b, 0x47, 0xb1, 0x88, 0x77, 0xef, 0xdf, 0x8b, 0xf0, 0xdc, 0xef, 0xe8, 0xb9, 0x39, 0x03, 0xed,
	0x38, 0x33, 0x1c, 0xa3, 0x76, 0x9c, 0xd9, 0x9b, 0xb5, 0x9b, 0xbb, 0x32, 0x2a, 0x45, 0x9f, 0xee,
	0x0a, 0xf9, 0x90, 0xef, 0xf4, 0xf5, 0xcd, 0x7d, 0x5d, 0x80, 0xec, 0xef, 0xa9, 0x2d, 0x6d, 0x29,
	0x9b, 0xda, 0xd8, 0xa3, 0xf9, 0xf1, 0xe9, 0x76, 0xee, 0xb6, 0xb0, 0xca, 0xfb, 0x30, 0x08, 0xb1,
	0x77, 0x6a, 0xdb, 0xe7, 0x5e, 0xbc, 0xac, 0x74, 0xe7, 0xed, 0x8f, 0x55, 0xe0, 0xde, 0xf8, 0x8d,
	0xe7, 0x7f, 0xee, 0x02, 0xc0, 0xdd, 0x8d, 0xac, 0x1f, 0x77, 0xf9, 0xa7, 0xc8, 0x1a, 0x3c, 0xb1,
	0xef, 0xdc, 0x1d, 0xfd, 0xe8, 0x6d, 0x9a, 0x31, 0xeb, 0x7b, 0xbb, 0xe4, 0x79, 0x78, 0xb6, 0x16,
	0x5f, 0x7d, 0xcf, 0xcf, 0xfa, 0x42, 0x97, 0x3c, 0x07, 0xcf, 0x1c, 0x4f, 0x1b, 0x27, 0xd6, 0x9f,
	0xed, 0x92, 0x4f, 0xc2, 0x8d, 0xe3, 0x48, 0x47, 0x9e, 0xb7, 0xb3, 0xbe, 0xaf, 0x4b, 0x6e, 0xc1,
	0x8b, 0xc7, 0xf1, 0x55, 0x1e, 0xf3, 0xb2, 0xbe, 0xd8, 0x25, 0x2f, 0xc3, 0xf5, 0x31, 0xb8, 0x8c,
	0xab, 0x38, 0xd6, 0xf7, 0x77, 0xc9, 0x67, 0xe0, 0xb5, 0x63, 0xc7, 0xd3, 0x74, 0x38, 0x6e, 0xfd,
	0xb9, 0x71, 0x3f, 0x6b, 0x14, 0x2a, 0x5a, 0x3f, 0x30, 0x16, 0x5b, 0x35, 0xb5, 0x6c, 0xfd, 0xf9,
	0x2e, 0x79, 0x09, 0x3a, 0x63, 0x4e, 0xa9, 0xbc, 0xd0, 0x6a, 0xfd, 0xe0, 0x58, 0x4c, 0x66, 0x2d,
	0x95, 0xf5, 0x43, 0x63, 0x31, 0x99, 0xf7, 0xa3, 0xad, 0xbf, 0x70, 0xb2, 0xc9, 0x90, 0x97, 0xd0,
	0xac, 0x2f, 0x75, 0xc9, 0x4d, 0xb8, 0x36, 0xde, 0xb7, 0xe4, 0x6d, 0x2d, 0xeb, 0xcb, 0x27, 0x5b,
	0x6e, 0x79, 0x71, 0xda, 0xfa, 0x8b, 0x5d, 0xf2, 0x0a, 0xdc, 0x3c, 0x9e, 0xad, 0xfa, 0x7c, 0xa9,
	0xf5, 0x97, 0xba, 0xe4, 0x55, 0x78, 0x69, 0x7c, 0xf1, 0x2a, 0xee, 0x62, 0x59, 0x7f, 0xb9, 0x4b,
	0x5e, 0x87, 0x97, 0x8f, 0xe3, 0xac, 0xbd, 0x3f, 0x65, 0xfd, 0x70, 0x33, 0xef, 0x71, 0x37, 0xa3,
	0xac, 0x1f, 0xe9, 0x92, 0xab, 0x70, 0xb9, 0x96, 0x77, 0xf4, 0xea, 0x92, 0xf5, 0x57, 0xc6, 0xa3,
	0x16, 0x5f, 0xb5, 0xbe, 0xd2, 0x25, 0xd7, 0xe0, 0xca, 0x11, 0xd4, 0xc6, 0x65, 0x1d, 0xeb, 0x47,
	0xbb, 0xa4, 0x03, 0xcf, 0x1d, 0xdb, 0x78, 0xa1, 0x54, 0x3f, 0xd6, 0x2c, 0x10, 0x35, 0xcd, 0xbf,
	0x3b, 0x60, 0xe9, 0xa1, 0xf5, 0x57, 0x9b, 0xa7, 0xaa, 0x89, 0xa7, 0xf8, 0xde, 0x8f, 0x77, 0xc9,
	0x15, 0xb8, 0x58, 0xcb, 0x6b, 0xd6, 0xaa, 0x5a, 0x3f, 0xd1, 0x2c, 0x76, 0x47, 0xd4, 0x7b, 0x5a,
	0x5f, 0x6d, 0xfe, 0x40, 0x85, 0xf2, 0xaf, 0x35, 0xdb, 0xd7, 0x6d, 0x96, 0x3f, 0x38, 0x2c, 0x2f,
	0x2e, 0x5b, 0x5f, 0x6b, 0x56, 0xd1, 0xc6, 0x0a, 0x47, 0xeb, 0x27, 0x9b, 0x15, 0xe0, 0xc8, 0xea,
	0x3d, 0xeb, 0x6f, 0x9c, 0xe8, 0x6b, 0xa2, 0x44, 0xcc, 0xfa, 0x9b, 0xcd, 0x3b, 0x4b, 0xb5, 0x06,
	0xcb, 0xfa, 0x5b, 0xcd, 0xb4, 0xd5, 0xc2, 0x29, 0xeb, 0x6f, 0x77, 0xc9, 0x75, 0x78, 0xa1, 0x59,
	0xa7, 0x46, 0x4a, 0xa2, 0xac, 0x9f, 0xea, 0x92, 0xd7, 0xe0, 0xd6, 0xd1, 0x1c, 0xf5, 0x07, 0xeb,
	0xd6, 0x4f, 0x37, 0xab, 0xfe, 0x91, 0xd7, 0x6f, 0x6e, 0x5a, 0x7f, 0xa7, 0x4b, 0x2e, 0xc2, 0x5a,
	0xf3, 0x47, 0xef, 0xfb, 0x59, 0x6e, 0xfd, 0xdd, 0x63, 0xec, 0xc3, 0x11, 0x27, 0xeb, 0xd6, 0xcf,
	0x1c, 0x33, 0xaa, 0xe6, 0x43, 0x70, 0xeb, 0x67, 0x9b, 0x77, 0xd9, 0xe6, 0xe7, 0x86, 0xad, 0xbf,
	0x77, 0xdc, 0x5c, 0x34, 0x65, 0x82, 0xac, 0xbf, 0xdf, 0x25, 0x9f, 0x83, 0x4f, 0xd5, 0x72, 0x8e,
	0x57, 0xe0, 0x60, 0xfd, 0xdc, 0xf8, 0x83, 0xad, 0x9c, 0xcb, 0x5b, 0x3f, 0x7f, 0x8c, 0x2b, 0xd2,
	0x70, 0xf6, 0x6e, 0xfd, 0x83, 0x2e, 0xb9, 0x01, 0x57, 0xeb, 0x27, 0xa9, 0x3e, 0xcb, 0x64, 0xfd,
	0x42, 0xb3, 0xed, 0x6a, 0xca, 0xb9, 0x58, 0xbf, 0xd8, 0x3c, 0xab, 0x47, 0xe7, 0xd7, 0xac, 0x7f,
	0xd8, 0x25, 0xe7, 0x61, 0x55, 0x71, 0x8e, 0xa6, 0x81, 0xad, 0x5f, 0x6a, 0xd6, 0x94, 0xfa, 0xec,
	0x8a, 0xf5, 0x8f, 0x9a, 0xc7, 0xdc, 0x90, 0x25, 0xb1, 0xfe, 0xf1, 0xf8, 0x2b, 0x53, 0xa9, 0xf2,
	0xb0, 0xfe, 0x49, 0xb3, 0xff, 0x35, 0x4e, 0x02, 0xc5, 0xfa, 0x7a, 0x33, 0xff, 0x38, 0x35, 0x46,
	0xd6, 0x2f, 0x77, 0xc9, 0x67, 0xe1, 0xf5, 0x8f, 0xc3, 0x2f, 0xd7, 0xee, 0x9f, 0x36, 0x4f, 0x70,
	0xfd, 0xbb, 0x00, 0xd6, 0x3f, 0xeb, 0x92, 0x17, 0xe0, 0x52, 0xb3, 0x89, 0x57, 0x4f, 0x28, 0xe0,
	0x02, 0xff, 0xf3, 0xe6, 0xfe, 0x35, 0x0b, 0xbd, 0x76, 0x02, 0x65, 0x7d, 0xe3, 0x18, 0x07, 0x97,
	0x37, 0xf0, 0x5e, 0xc2, 0x65, 0xa6, 0x9e, 0xff, 0x57, 0xba, 0xe4, 0x12, 0x3c, 0x5d, 0xcb, 0x8f,
	0x8f, 0x71, 0x6e, 0x0f, 0xc2, 0x90, 0xa6, 0x87, 0xd6, 0xaf, 0x8e, 0xb9, 0x33, 0x9a, 0x77, 0xb8,
	0xac, 0x7f, 0x71, 0x02, 0xb6, 0xf2, 0x5e, 0x93, 0xf5, 0x2f, 0x9b, 0x85, 0xb4, 0xe1, 0xa2, 0x8f,
	0xf5, 0x6b, 0xcd, 0x1b, 0x58, 0xe3, 0x05, 0x1d, 0xeb, 0x5f, 0x1d, 0x61, 0x00, 0xea, 0x53, 0x56,
	0xd6, 0xaf, 0x77, 0x89, 0x0d, 0xe7, 0x14, 0x4b, 0x6d, 0xe2, 0xc1, 0xfa, 0x66, 0x97, 0x3c, 0x03,
	0xe7, 0xeb, 0x68, 0xb4, 0xfc, 0x82, 0xf5, 0xaf, 0xbb, 0xe4, 0x1c, 0xac, 0xd4, 0x51, 0xf1, 0x1d,
	0xd7, 0xfa, 0x8d, 0x66, 0x97, 0x6d, 0x34, 0xb8, 0xb7, 0xfe, 0x4d, 0xb3, 0x09, 0x3c, 0x2a, 0x6e,
	0xb7, 0xfe, 0x6d, 0xb3, 0xef, 0x56, 0xcc, 0x40, 0xf9, 0xde, 0x4c, 0x66, 0xfd, 0x66, 0x97, 0xbc,
	0x08, 0xcf, 0x1f, 0xfd, 0x1d, 0x3d, 0xd8, 0xb7, 0x7e, 0xab, 0xd9, 0x60, 0xca, 0x33, 0x32, 0xb5,
	0xfb, 0x21, 0x3b, 0x2e, 0xff, 0xbf, 0x6b, 0x5e, 0x16, 0xc9, 0x23, 0xf6, 0x2b, 0x8d, 0xe5, 0xb7,
	0x9b, 0x1d, 0x9f, 0x32, 0xf2, 0xc6, 0xe7, 0x2c, 0x3d, 0x9a, 0xd3, 0x7e, 0x4a, 0xc3, 0x87, 0x98,
	0x6e, 0xb0, 0xfe, 0xfd, 0x71, 0xa2, 0xa6, 0x65, 0x17, 0x24, 0xcb, 0xb7, 0x8e, 0xf3, 0x5f, 0x47,
	0x13, 0x12, 0xd6, 0x7f, 0x30, 0x44, 0xc2, 0xec, 0x1f, 0x4e, 0xef, 0xc6, 0x1e, 0xcd, 0xad, 0xdf,
	0x39, 0x62, 0x35, 0x0a, 0x2a, 0x4d, 0xd0, 0x7e, 0xb7, 0xd9, 0x3a, 0x69, 0xf4, 0xba, 0xd0, 0xfd,
	0x5e, 0xf7, 0xf6, 0x63, 0xdf, 0xf8, 0xf6, 0x5a, 0xeb, 0x9b, 0xdf, 0x5e, 0x6b, 0xfd, 0xa7, 0x6f,
	0xaf, 0xb5, 0xbe, 0xf8, 0x9d, 0xb5, 0x4f, 0xbc, 0xd9, 0xfa, 0x7c, 0xeb, 0x13, 0xff, 0x27, 0x00,
	0x00, 0xff, 0xff, 0x7b, 0x0f, 0xba, 0x03, 0xd9, 0x77, 0x00, 0x00,
}
